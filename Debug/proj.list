
proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccfc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  0800cec0  0800cec0  0001cec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2ac  0800d2ac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2ac  0800d2ac  0001d2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2b4  0800d2b4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2b4  0800d2b4  0001d2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2b8  0800d2b8  0001d2b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800d2bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  200001dc  0800d498  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  0800d498  000207ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018736  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ed8  00000000  00000000  00038985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  0003b860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001010  00000000  00000000  0003ccf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d59a  00000000  00000000  0003dd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b8d  00000000  00000000  0006b2a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011cbcb  00000000  00000000  00083e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000067d0  00000000  00000000  001a09fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  001a71cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800cea4 	.word	0x0800cea4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	0800cea4 	.word	0x0800cea4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ed6:	b0b3      	sub	sp, #204	; 0xcc
 8000ed8:	af24      	add	r7, sp, #144	; 0x90
  /* USER CODE BEGIN 1 */


	uint8_t i, lenReceived;
	uint8_t versionRequest[] =
 8000eda:	4b85      	ldr	r3, [pc, #532]	; (80010f0 <main+0x21c>)
 8000edc:	60bb      	str	r3, [r7, #8]
			0xc1,
			0x0e,
			0x00
	};

	uint8_t setLED[] = {
 8000ede:	4a85      	ldr	r2, [pc, #532]	; (80010f4 <main+0x220>)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ee6:	6018      	str	r0, [r3, #0]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	8019      	strh	r1, [r3, #0]
 8000eec:	3302      	adds	r3, #2
 8000eee:	0c0a      	lsrs	r2, r1, #16
 8000ef0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef2:	f002 fa78 	bl	80033e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef6:	f000 faf7 	bl	80014e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efa:	f001 f809 	bl	8001f10 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000efe:	f000 fb39 	bl	8001574 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000f02:	f000 fb9b 	bl	800163c <MX_DAC1_Init>
  MX_TIM4_Init();
 8000f06:	f000 fe23 	bl	8001b50 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000f0a:	f000 fd9b 	bl	8001a44 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000f0e:	f000 fc61 	bl	80017d4 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000f12:	f000 fc13 	bl	800173c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000f16:	f000 fca9 	bl	800186c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f1a:	f000 fd1d 	bl	8001958 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000f1e:	f000 fe9b 	bl	8001c58 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000f22:	f000 ff0b 	bl	8001d3c <MX_TIM8_Init>
  MX_TIM15_Init();
 8000f26:	f000 ff7f 	bl	8001e28 <MX_TIM15_Init>
  MX_LPUART1_UART_Init();
 8000f2a:	f000 fbbb 	bl	80016a4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2140      	movs	r1, #64	; 0x40
 8000f32:	4871      	ldr	r0, [pc, #452]	; (80010f8 <main+0x224>)
 8000f34:	f003 fea0 	bl	8004c78 <HAL_GPIO_WritePin>

 // HAL_TIM_Base_Start(&htim2);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //Starts timer 4
 8000f38:	2104      	movs	r1, #4
 8000f3a:	4870      	ldr	r0, [pc, #448]	; (80010fc <main+0x228>)
 8000f3c:	f005 fc9a 	bl	8006874 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1); //Starts timer 2
 8000f40:	2100      	movs	r1, #0
 8000f42:	486f      	ldr	r0, [pc, #444]	; (8001100 <main+0x22c>)
 8000f44:	f005 fdfe 	bl	8006b44 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1); //Starts timer 2
 8000f48:	2100      	movs	r1, #0
 8000f4a:	486e      	ldr	r0, [pc, #440]	; (8001104 <main+0x230>)
 8000f4c:	f005 fdfa 	bl	8006b44 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); //Starts timer 2
 8000f50:	2100      	movs	r1, #0
 8000f52:	486d      	ldr	r0, [pc, #436]	; (8001108 <main+0x234>)
 8000f54:	f005 fdf6 	bl	8006b44 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1); //Starts timer 2
 8000f58:	2100      	movs	r1, #0
 8000f5a:	486c      	ldr	r0, [pc, #432]	; (800110c <main+0x238>)
 8000f5c:	f005 fdf2 	bl	8006b44 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //motor
  HAL_GPIO_WritePin(GPIOF,GPIO_PIN_1, GPIO_PIN_SET); //L
 8000f60:	2201      	movs	r2, #1
 8000f62:	2102      	movs	r1, #2
 8000f64:	486a      	ldr	r0, [pc, #424]	; (8001110 <main+0x23c>)
 8000f66:	f003 fe87 	bl	8004c78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	4868      	ldr	r0, [pc, #416]	; (8001110 <main+0x23c>)
 8000f70:	f003 fe82 	bl	8004c78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2101      	movs	r1, #1
 8000f78:	4866      	ldr	r0, [pc, #408]	; (8001114 <main+0x240>)
 8000f7a:	f003 fe7d 	bl	8004c78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2102      	movs	r1, #2
 8000f82:	4864      	ldr	r0, [pc, #400]	; (8001114 <main+0x240>)
 8000f84:	f003 fe78 	bl	8004c78 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start(&htim4); //RIGHT D13 CH2
 8000f88:	4863      	ldr	r0, [pc, #396]	; (8001118 <main+0x244>)
 8000f8a:	f005 fba9 	bl	80066e0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); //LEFT B0 CH3
 8000f8e:	4863      	ldr	r0, [pc, #396]	; (800111c <main+0x248>)
 8000f90:	f005 fba6 	bl	80066e0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f94:	2104      	movs	r1, #4
 8000f96:	4860      	ldr	r0, [pc, #384]	; (8001118 <main+0x244>)
 8000f98:	f005 fc6c 	bl	8006874 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	485f      	ldr	r0, [pc, #380]	; (800111c <main+0x248>)
 8000fa0:	f005 fc68 	bl	8006874 <HAL_TIM_PWM_Start>
  set_throttle(htim3, htim4, 0);
 8000fa4:	4e5d      	ldr	r6, [pc, #372]	; (800111c <main+0x248>)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	9322      	str	r3, [sp, #136]	; 0x88
 8000faa:	4a5b      	ldr	r2, [pc, #364]	; (8001118 <main+0x244>)
 8000fac:	ab0f      	add	r3, sp, #60	; 0x3c
 8000fae:	4611      	mov	r1, r2
 8000fb0:	224c      	movs	r2, #76	; 0x4c
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f00a f8a5 	bl	800b102 <memcpy>
 8000fb8:	466d      	mov	r5, sp
 8000fba:	f106 0410 	add.w	r4, r6, #16
 8000fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000fce:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000fd2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000fd6:	f001 fa4d 	bl	8002474 <set_throttle>
//  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 999); //L
//  	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,999); //R
  i = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  //uint16_t x = 0;

  HAL_UART_Receive_IT(&huart1, buttonRec, 1);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	494f      	ldr	r1, [pc, #316]	; (8001120 <main+0x24c>)
 8000fe4:	484f      	ldr	r0, [pc, #316]	; (8001124 <main+0x250>)
 8000fe6:	f007 fa47 	bl	8008478 <HAL_UART_Receive_IT>
 // HAL_UART_Transmit_IT(&huart3, getBlocks, 6);
//  float history[8];
//  int index = 0;
char counter = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

char col_start = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  while (1)
  {
	 if(started){
 8000ff6:	4b4c      	ldr	r3, [pc, #304]	; (8001128 <main+0x254>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0fb      	beq.n	8000ff6 <main+0x122>

		const float factor = 1/144.0f;
 8000ffe:	4b4b      	ldr	r3, [pc, #300]	; (800112c <main+0x258>)
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
		const float limit = 40.0f;
 8001002:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <main+0x25c>)
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c


		float a = (ePulse * factor > limit) ? limit : ePulse * factor;
 8001006:	4b4b      	ldr	r3, [pc, #300]	; (8001134 <main+0x260>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001012:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800101e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001026:	d502      	bpl.n	800102e <main+0x15a>
 8001028:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800102c:	e009      	b.n	8001042 <main+0x16e>
 800102e:	4b41      	ldr	r3, [pc, #260]	; (8001134 <main+0x260>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800103a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800103e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001042:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		float a1 = (ePulse1 * factor > limit) ? limit : ePulse1 * factor;
 8001046:	4b3c      	ldr	r3, [pc, #240]	; (8001138 <main+0x264>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	ee07 3a90 	vmov	s15, r3
 800104e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001052:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800105e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001066:	d502      	bpl.n	800106e <main+0x19a>
 8001068:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800106c:	e009      	b.n	8001082 <main+0x1ae>
 800106e:	4b32      	ldr	r3, [pc, #200]	; (8001138 <main+0x264>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800107a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800107e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001082:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float a2 = (ePulse2 * factor > limit) ? limit : ePulse2 * factor;
 8001086:	4b2d      	ldr	r3, [pc, #180]	; (800113c <main+0x268>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001092:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800109a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800109e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a6:	d502      	bpl.n	80010ae <main+0x1da>
 80010a8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010ac:	e009      	b.n	80010c2 <main+0x1ee>
 80010ae:	4b23      	ldr	r3, [pc, #140]	; (800113c <main+0x268>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	ee07 3a90 	vmov	s15, r3
 80010b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	edc7 7a08 	vstr	s15, [r7, #32]
		float a3 = (ePulse3 * factor > limit) ? limit : ePulse3 * factor;
 80010c6:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <main+0x26c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80010d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010da:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80010de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e6:	d52d      	bpl.n	8001144 <main+0x270>
 80010e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010ec:	e034      	b.n	8001158 <main+0x284>
 80010ee:	bf00      	nop
 80010f0:	000ec1ae 	.word	0x000ec1ae
 80010f4:	0800cec0 	.word	0x0800cec0
 80010f8:	48000400 	.word	0x48000400
 80010fc:	2000047c 	.word	0x2000047c
 8001100:	20000560 	.word	0x20000560
 8001104:	200005f8 	.word	0x200005f8
 8001108:	20000430 	.word	0x20000430
 800110c:	200005ac 	.word	0x200005ac
 8001110:	48001400 	.word	0x48001400
 8001114:	48000c00 	.word	0x48000c00
 8001118:	20000514 	.word	0x20000514
 800111c:	200004c8 	.word	0x200004c8
 8001120:	20000680 	.word	0x20000680
 8001124:	20000308 	.word	0x20000308
 8001128:	2000064c 	.word	0x2000064c
 800112c:	3be38e39 	.word	0x3be38e39
 8001130:	42200000 	.word	0x42200000
 8001134:	20000650 	.word	0x20000650
 8001138:	20000654 	.word	0x20000654
 800113c:	20000658 	.word	0x20000658
 8001140:	2000065c 	.word	0x2000065c
 8001144:	4bbd      	ldr	r3, [pc, #756]	; (800143c <main+0x568>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	ee07 3a90 	vmov	s15, r3
 800114c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001150:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001158:	edc7 7a07 	vstr	s15, [r7, #28]

		float avgLHS = (a2 * a) * 0.5f;
 800115c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001160:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001168:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800116c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001170:	edc7 7a06 	vstr	s15, [r7, #24]
		float avgCenter = (a + a3) * 0.5f;
 8001174:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001178:	edd7 7a07 	vldr	s15, [r7, #28]
 800117c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001180:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001188:	edc7 7a05 	vstr	s15, [r7, #20]
		float avgRHS = (a1+ a3) * 0.5f;
 800118c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001190:	edd7 7a07 	vldr	s15, [r7, #28]
 8001194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001198:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800119c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a0:	edc7 7a04 	vstr	s15, [r7, #16]
		float avg = (a1+ a3 + a + a2) * 0.25f;
 80011a4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80011ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80011bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c0:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80011c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c8:	edc7 7a03 	vstr	s15, [r7, #12]
		if ((avgLHS < 15) || (avgCenter < 15) ||(avgRHS < 15) || (avg < 15)) {
 80011cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80011d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011dc:	d41a      	bmi.n	8001214 <main+0x340>
 80011de:	edd7 7a05 	vldr	s15, [r7, #20]
 80011e2:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80011e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	d411      	bmi.n	8001214 <main+0x340>
 80011f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80011f4:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80011f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001200:	d408      	bmi.n	8001214 <main+0x340>
 8001202:	edd7 7a03 	vldr	s15, [r7, #12]
 8001206:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800120a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001212:	d504      	bpl.n	800121e <main+0x34a>
			++counter;
 8001214:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001218:	3301      	adds	r3, #1
 800121a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		}

	  if (counter == 2){
 800121e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001222:	2b02      	cmp	r3, #2
 8001224:	f040 811a 	bne.w	800145c <main+0x588>

		  counter = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  HAL_GPIO_WritePin(GPIOF,GPIO_PIN_0, GPIO_PIN_SET);
 800122e:	2201      	movs	r2, #1
 8001230:	2101      	movs	r1, #1
 8001232:	4883      	ldr	r0, [pc, #524]	; (8001440 <main+0x56c>)
 8001234:	f003 fd20 	bl	8004c78 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	2102      	movs	r1, #2
 800123c:	4880      	ldr	r0, [pc, #512]	; (8001440 <main+0x56c>)
 800123e:	f003 fd1b 	bl	8004c78 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2102      	movs	r1, #2
 8001246:	487f      	ldr	r0, [pc, #508]	; (8001444 <main+0x570>)
 8001248:	f003 fd16 	bl	8004c78 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	2101      	movs	r1, #1
 8001250:	487c      	ldr	r0, [pc, #496]	; (8001444 <main+0x570>)
 8001252:	f003 fd11 	bl	8004c78 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 8001256:	20c8      	movs	r0, #200	; 0xc8
 8001258:	f002 f93a 	bl	80034d0 <HAL_Delay>
		  set_throttle(htim3,htim4, 0);
 800125c:	4e7a      	ldr	r6, [pc, #488]	; (8001448 <main+0x574>)
 800125e:	2300      	movs	r3, #0
 8001260:	9322      	str	r3, [sp, #136]	; 0x88
 8001262:	4a7a      	ldr	r2, [pc, #488]	; (800144c <main+0x578>)
 8001264:	ab0f      	add	r3, sp, #60	; 0x3c
 8001266:	4611      	mov	r1, r2
 8001268:	224c      	movs	r2, #76	; 0x4c
 800126a:	4618      	mov	r0, r3
 800126c:	f009 ff49 	bl	800b102 <memcpy>
 8001270:	466d      	mov	r5, sp
 8001272:	f106 0410 	add.w	r4, r6, #16
 8001276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800127a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800127c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800127e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001282:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001286:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800128a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800128e:	f001 f8f1 	bl	8002474 <set_throttle>
		  HAL_Delay(300);
 8001292:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001296:	f002 f91b 	bl	80034d0 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOF,GPIO_PIN_1, GPIO_PIN_SET);
 800129a:	2201      	movs	r2, #1
 800129c:	2102      	movs	r1, #2
 800129e:	4868      	ldr	r0, [pc, #416]	; (8001440 <main+0x56c>)
 80012a0:	f003 fcea 	bl	8004c78 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2101      	movs	r1, #1
 80012a8:	4865      	ldr	r0, [pc, #404]	; (8001440 <main+0x56c>)
 80012aa:	f003 fce5 	bl	8004c78 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2101      	movs	r1, #1
 80012b2:	4864      	ldr	r0, [pc, #400]	; (8001444 <main+0x570>)
 80012b4:	f003 fce0 	bl	8004c78 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	2102      	movs	r1, #2
 80012bc:	4861      	ldr	r0, [pc, #388]	; (8001444 <main+0x570>)
 80012be:	f003 fcdb 	bl	8004c78 <HAL_GPIO_WritePin>

		  HAL_Delay(1500);
 80012c2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80012c6:	f002 f903 	bl	80034d0 <HAL_Delay>
		  a = (ePulse * factor > limit) ? limit : ePulse * factor;
 80012ca:	4b61      	ldr	r3, [pc, #388]	; (8001450 <main+0x57c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80012da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012de:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80012e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <main+0x41e>
 80012ec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80012f0:	e009      	b.n	8001306 <main+0x432>
 80012f2:	4b57      	ldr	r3, [pc, #348]	; (8001450 <main+0x57c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012fe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001306:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		  a1 = (ePulse1 * factor > limit) ? limit : ePulse1 * factor;
 800130a:	4b52      	ldr	r3, [pc, #328]	; (8001454 <main+0x580>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001316:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800131a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001322:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132a:	d502      	bpl.n	8001332 <main+0x45e>
 800132c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001330:	e009      	b.n	8001346 <main+0x472>
 8001332:	4b48      	ldr	r3, [pc, #288]	; (8001454 <main+0x580>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800133e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001346:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		  a2 = (ePulse2 * factor > limit) ? limit : ePulse2 * factor;
 800134a:	4b43      	ldr	r3, [pc, #268]	; (8001458 <main+0x584>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001356:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800135a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800135e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001362:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136a:	d502      	bpl.n	8001372 <main+0x49e>
 800136c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001370:	e009      	b.n	8001386 <main+0x4b2>
 8001372:	4b39      	ldr	r3, [pc, #228]	; (8001458 <main+0x584>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	ee07 3a90 	vmov	s15, r3
 800137a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800137e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001386:	edc7 7a08 	vstr	s15, [r7, #32]
		  a3 = (ePulse3 * factor > limit) ? limit : ePulse3 * factor;
 800138a:	4b2c      	ldr	r3, [pc, #176]	; (800143c <main+0x568>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	ee07 3a90 	vmov	s15, r3
 8001392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001396:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800139a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80013a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d502      	bpl.n	80013b2 <main+0x4de>
 80013ac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013b0:	e009      	b.n	80013c6 <main+0x4f2>
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <main+0x568>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	ee07 3a90 	vmov	s15, r3
 80013ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013be:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80013c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c6:	edc7 7a07 	vstr	s15, [r7, #28]


		  avgLHS = (a2 * a) * 0.5f;
 80013ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80013ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80013d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013de:	edc7 7a06 	vstr	s15, [r7, #24]
		  avgCenter = (a + a3) * 0.5f;
 80013e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80013e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80013ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f6:	edc7 7a05 	vstr	s15, [r7, #20]
		  avgRHS = (a1+ a3) * 0.5f;
 80013fa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001406:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	edc7 7a04 	vstr	s15, [r7, #16]
		  avg = (a1+ a3 + a + a2) * 0.25f;
 8001412:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001416:	edd7 7a07 	vldr	s15, [r7, #28]
 800141a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800141e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001422:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001426:	edd7 7a08 	vldr	s15, [r7, #32]
 800142a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001436:	edc7 7a03 	vstr	s15, [r7, #12]
 800143a:	e5dc      	b.n	8000ff6 <main+0x122>
 800143c:	2000065c 	.word	0x2000065c
 8001440:	48001400 	.word	0x48001400
 8001444:	48000c00 	.word	0x48000c00
 8001448:	200004c8 	.word	0x200004c8
 800144c:	20000514 	.word	0x20000514
 8001450:	20000650 	.word	0x20000650
 8001454:	20000654 	.word	0x20000654
 8001458:	20000658 	.word	0x20000658

	  }

	  else {

		  HAL_UART_Transmit(&huart3, getBlocks, 6, 500);
 800145c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001460:	2206      	movs	r2, #6
 8001462:	491b      	ldr	r1, [pc, #108]	; (80014d0 <main+0x5fc>)
 8001464:	481b      	ldr	r0, [pc, #108]	; (80014d4 <main+0x600>)
 8001466:	f006 feaf 	bl	80081c8 <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart3, recvBuf, 20,500);
 800146a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800146e:	2214      	movs	r2, #20
 8001470:	4919      	ldr	r1, [pc, #100]	; (80014d8 <main+0x604>)
 8001472:	4818      	ldr	r0, [pc, #96]	; (80014d4 <main+0x600>)
 8001474:	f006 ff37 	bl	80082e6 <HAL_UART_Receive>
		  col_start = 1;
 8001478:	2301      	movs	r3, #1
 800147a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

		  x = (((uint16_t)(recvBuf[9]) << 8) + recvBuf[8]);
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <main+0x604>)
 8001480:	7a5b      	ldrb	r3, [r3, #9]
 8001482:	b29b      	uxth	r3, r3
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	b29a      	uxth	r2, r3
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <main+0x604>)
 800148a:	7a1b      	ldrb	r3, [r3, #8]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4413      	add	r3, r2
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <main+0x608>)
 8001494:	801a      	strh	r2, [r3, #0]
		  center_robot(htim3, htim4, x);
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <main+0x608>)
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	4e11      	ldr	r6, [pc, #68]	; (80014e0 <main+0x60c>)
 800149c:	9322      	str	r3, [sp, #136]	; 0x88
 800149e:	4a11      	ldr	r2, [pc, #68]	; (80014e4 <main+0x610>)
 80014a0:	ab0f      	add	r3, sp, #60	; 0x3c
 80014a2:	4611      	mov	r1, r2
 80014a4:	224c      	movs	r2, #76	; 0x4c
 80014a6:	4618      	mov	r0, r3
 80014a8:	f009 fe2b 	bl	800b102 <memcpy>
 80014ac:	466d      	mov	r5, sp
 80014ae:	f106 0410 	add.w	r4, r6, #16
 80014b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014be:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80014c2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80014c6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80014ca:	f000 fec5 	bl	8002258 <center_robot>
	 if(started){
 80014ce:	e592      	b.n	8000ff6 <main+0x122>
 80014d0:	20000000 	.word	0x20000000
 80014d4:	2000039c 	.word	0x2000039c
 80014d8:	20000660 	.word	0x20000660
 80014dc:	20000644 	.word	0x20000644
 80014e0:	200004c8 	.word	0x200004c8
 80014e4:	20000514 	.word	0x20000514

080014e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b096      	sub	sp, #88	; 0x58
 80014ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	2244      	movs	r2, #68	; 0x44
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f009 fd83 	bl	800b002 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014fc:	463b      	mov	r3, r7
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800150a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800150e:	f003 fbeb 	bl	8004ce8 <HAL_PWREx_ControlVoltageScaling>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001518:	f000 fe98 	bl	800224c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800151c:	2310      	movs	r3, #16
 800151e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001520:	2301      	movs	r3, #1
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001528:	2360      	movs	r3, #96	; 0x60
 800152a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800152c:	2300      	movs	r3, #0
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4618      	mov	r0, r3
 8001536:	f003 fc8b 	bl	8004e50 <HAL_RCC_OscConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001540:	f000 fe84 	bl	800224c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001544:	230f      	movs	r3, #15
 8001546:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001558:	463b      	mov	r3, r7
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f004 f891 	bl	8005684 <HAL_RCC_ClockConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001568:	f000 fe70 	bl	800224c <Error_Handler>
  }
}
 800156c:	bf00      	nop
 800156e:	3758      	adds	r7, #88	; 0x58
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800157a:	463b      	mov	r3, r7
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
 8001588:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800158a:	4b29      	ldr	r3, [pc, #164]	; (8001630 <MX_ADC1_Init+0xbc>)
 800158c:	4a29      	ldr	r2, [pc, #164]	; (8001634 <MX_ADC1_Init+0xc0>)
 800158e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001590:	4b27      	ldr	r3, [pc, #156]	; (8001630 <MX_ADC1_Init+0xbc>)
 8001592:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001596:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001598:	4b25      	ldr	r3, [pc, #148]	; (8001630 <MX_ADC1_Init+0xbc>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800159e:	4b24      	ldr	r3, [pc, #144]	; (8001630 <MX_ADC1_Init+0xbc>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <MX_ADC1_Init+0xbc>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015aa:	4b21      	ldr	r3, [pc, #132]	; (8001630 <MX_ADC1_Init+0xbc>)
 80015ac:	2204      	movs	r2, #4
 80015ae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <MX_ADC1_Init+0xbc>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015b6:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <MX_ADC1_Init+0xbc>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <MX_ADC1_Init+0xbc>)
 80015be:	2201      	movs	r2, #1
 80015c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015c2:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <MX_ADC1_Init+0xbc>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <MX_ADC1_Init+0xbc>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <MX_ADC1_Init+0xbc>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <MX_ADC1_Init+0xbc>)
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015de:	4b14      	ldr	r3, [pc, #80]	; (8001630 <MX_ADC1_Init+0xbc>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <MX_ADC1_Init+0xbc>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ec:	4810      	ldr	r0, [pc, #64]	; (8001630 <MX_ADC1_Init+0xbc>)
 80015ee:	f002 f933 	bl	8003858 <HAL_ADC_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80015f8:	f000 fe28 	bl	800224c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_ADC1_Init+0xc4>)
 80015fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001600:	2306      	movs	r3, #6
 8001602:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001604:	2307      	movs	r3, #7
 8001606:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001608:	237f      	movs	r3, #127	; 0x7f
 800160a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800160c:	2304      	movs	r3, #4
 800160e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_ADC1_Init+0xbc>)
 800161a:	f002 fa63 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001624:	f000 fe12 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200001f8 	.word	0x200001f8
 8001634:	50040000 	.word	0x50040000
 8001638:	04300002 	.word	0x04300002

0800163c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001642:	463b      	mov	r3, r7
 8001644:	2228      	movs	r2, #40	; 0x28
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f009 fcda 	bl	800b002 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <MX_DAC1_Init+0x60>)
 8001650:	4a13      	ldr	r2, [pc, #76]	; (80016a0 <MX_DAC1_Init+0x64>)
 8001652:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001654:	4811      	ldr	r0, [pc, #68]	; (800169c <MX_DAC1_Init+0x60>)
 8001656:	f002 ff52 	bl	80044fe <HAL_DAC_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001660:	f000 fdf4 	bl	800224c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800167c:	463b      	mov	r3, r7
 800167e:	2200      	movs	r2, #0
 8001680:	4619      	mov	r1, r3
 8001682:	4806      	ldr	r0, [pc, #24]	; (800169c <MX_DAC1_Init+0x60>)
 8001684:	f002 ff5e 	bl	8004544 <HAL_DAC_ConfigChannel>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800168e:	f000 fddd 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	3728      	adds	r7, #40	; 0x28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000260 	.word	0x20000260
 80016a0:	40007400 	.word	0x40007400

080016a4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80016a8:	4b22      	ldr	r3, [pc, #136]	; (8001734 <MX_LPUART1_UART_Init+0x90>)
 80016aa:	4a23      	ldr	r2, [pc, #140]	; (8001738 <MX_LPUART1_UART_Init+0x94>)
 80016ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80016ae:	4b21      	ldr	r3, [pc, #132]	; (8001734 <MX_LPUART1_UART_Init+0x90>)
 80016b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016b6:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <MX_LPUART1_UART_Init+0x90>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80016bc:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <MX_LPUART1_UART_Init+0x90>)
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <MX_LPUART1_UART_Init+0x90>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016c8:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <MX_LPUART1_UART_Init+0x90>)
 80016ca:	220c      	movs	r2, #12
 80016cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <MX_LPUART1_UART_Init+0x90>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d4:	4b17      	ldr	r3, [pc, #92]	; (8001734 <MX_LPUART1_UART_Init+0x90>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016da:	4b16      	ldr	r3, [pc, #88]	; (8001734 <MX_LPUART1_UART_Init+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e0:	4b14      	ldr	r3, [pc, #80]	; (8001734 <MX_LPUART1_UART_Init+0x90>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <MX_LPUART1_UART_Init+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016ec:	4811      	ldr	r0, [pc, #68]	; (8001734 <MX_LPUART1_UART_Init+0x90>)
 80016ee:	f006 fd1b 	bl	8008128 <HAL_UART_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80016f8:	f000 fda8 	bl	800224c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016fc:	2100      	movs	r1, #0
 80016fe:	480d      	ldr	r0, [pc, #52]	; (8001734 <MX_LPUART1_UART_Init+0x90>)
 8001700:	f008 fe49 	bl	800a396 <HAL_UARTEx_SetTxFifoThreshold>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800170a:	f000 fd9f 	bl	800224c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800170e:	2100      	movs	r1, #0
 8001710:	4808      	ldr	r0, [pc, #32]	; (8001734 <MX_LPUART1_UART_Init+0x90>)
 8001712:	f008 fe7e 	bl	800a412 <HAL_UARTEx_SetRxFifoThreshold>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800171c:	f000 fd96 	bl	800224c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <MX_LPUART1_UART_Init+0x90>)
 8001722:	f008 fdff 	bl	800a324 <HAL_UARTEx_DisableFifoMode>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800172c:	f000 fd8e 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000274 	.word	0x20000274
 8001738:	40008000 	.word	0x40008000

0800173c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001740:	4b22      	ldr	r3, [pc, #136]	; (80017cc <MX_USART1_UART_Init+0x90>)
 8001742:	4a23      	ldr	r2, [pc, #140]	; (80017d0 <MX_USART1_UART_Init+0x94>)
 8001744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001746:	4b21      	ldr	r3, [pc, #132]	; (80017cc <MX_USART1_UART_Init+0x90>)
 8001748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800174c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800174e:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <MX_USART1_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001754:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <MX_USART1_UART_Init+0x90>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <MX_USART1_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <MX_USART1_UART_Init+0x90>)
 8001762:	220c      	movs	r2, #12
 8001764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001766:	4b19      	ldr	r3, [pc, #100]	; (80017cc <MX_USART1_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800176c:	4b17      	ldr	r3, [pc, #92]	; (80017cc <MX_USART1_UART_Init+0x90>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <MX_USART1_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <MX_USART1_UART_Init+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <MX_USART1_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001784:	4811      	ldr	r0, [pc, #68]	; (80017cc <MX_USART1_UART_Init+0x90>)
 8001786:	f006 fccf 	bl	8008128 <HAL_UART_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001790:	f000 fd5c 	bl	800224c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001794:	2100      	movs	r1, #0
 8001796:	480d      	ldr	r0, [pc, #52]	; (80017cc <MX_USART1_UART_Init+0x90>)
 8001798:	f008 fdfd 	bl	800a396 <HAL_UARTEx_SetTxFifoThreshold>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80017a2:	f000 fd53 	bl	800224c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a6:	2100      	movs	r1, #0
 80017a8:	4808      	ldr	r0, [pc, #32]	; (80017cc <MX_USART1_UART_Init+0x90>)
 80017aa:	f008 fe32 	bl	800a412 <HAL_UARTEx_SetRxFifoThreshold>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017b4:	f000 fd4a 	bl	800224c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <MX_USART1_UART_Init+0x90>)
 80017ba:	f008 fdb3 	bl	800a324 <HAL_UARTEx_DisableFifoMode>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017c4:	f000 fd42 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000308 	.word	0x20000308
 80017d0:	40013800 	.word	0x40013800

080017d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017d8:	4b22      	ldr	r3, [pc, #136]	; (8001864 <MX_USART3_UART_Init+0x90>)
 80017da:	4a23      	ldr	r2, [pc, #140]	; (8001868 <MX_USART3_UART_Init+0x94>)
 80017dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017de:	4b21      	ldr	r3, [pc, #132]	; (8001864 <MX_USART3_UART_Init+0x90>)
 80017e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017e6:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <MX_USART3_UART_Init+0x90>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <MX_USART3_UART_Init+0x90>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017f2:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <MX_USART3_UART_Init+0x90>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017f8:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <MX_USART3_UART_Init+0x90>)
 80017fa:	220c      	movs	r2, #12
 80017fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001804:	4b17      	ldr	r3, [pc, #92]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <MX_USART3_UART_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001812:	2200      	movs	r2, #0
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800181c:	4811      	ldr	r0, [pc, #68]	; (8001864 <MX_USART3_UART_Init+0x90>)
 800181e:	f006 fc83 	bl	8008128 <HAL_UART_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001828:	f000 fd10 	bl	800224c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800182c:	2100      	movs	r1, #0
 800182e:	480d      	ldr	r0, [pc, #52]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001830:	f008 fdb1 	bl	800a396 <HAL_UARTEx_SetTxFifoThreshold>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800183a:	f000 fd07 	bl	800224c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800183e:	2100      	movs	r1, #0
 8001840:	4808      	ldr	r0, [pc, #32]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001842:	f008 fde6 	bl	800a412 <HAL_UARTEx_SetRxFifoThreshold>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800184c:	f000 fcfe 	bl	800224c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001852:	f008 fd67 	bl	800a324 <HAL_UARTEx_DisableFifoMode>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800185c:	f000 fcf6 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	2000039c 	.word	0x2000039c
 8001868:	40004800 	.word	0x40004800

0800186c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08c      	sub	sp, #48	; 0x30
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001872:	f107 0320 	add.w	r3, r7, #32
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001898:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <MX_TIM1_Init+0xe4>)
 800189a:	4a2e      	ldr	r2, [pc, #184]	; (8001954 <MX_TIM1_Init+0xe8>)
 800189c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 800189e:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <MX_TIM1_Init+0xe4>)
 80018a0:	2203      	movs	r2, #3
 80018a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a4:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <MX_TIM1_Init+0xe4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018aa:	4b29      	ldr	r3, [pc, #164]	; (8001950 <MX_TIM1_Init+0xe4>)
 80018ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b2:	4b27      	ldr	r3, [pc, #156]	; (8001950 <MX_TIM1_Init+0xe4>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <MX_TIM1_Init+0xe4>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018be:	4b24      	ldr	r3, [pc, #144]	; (8001950 <MX_TIM1_Init+0xe4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018c4:	4822      	ldr	r0, [pc, #136]	; (8001950 <MX_TIM1_Init+0xe4>)
 80018c6:	f004 feb3 	bl	8006630 <HAL_TIM_Base_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80018d0:	f000 fcbc 	bl	800224c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	4619      	mov	r1, r3
 80018e0:	481b      	ldr	r0, [pc, #108]	; (8001950 <MX_TIM1_Init+0xe4>)
 80018e2:	f005 fd2b 	bl	800733c <HAL_TIM_ConfigClockSource>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80018ec:	f000 fcae 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80018f0:	4817      	ldr	r0, [pc, #92]	; (8001950 <MX_TIM1_Init+0xe4>)
 80018f2:	f005 f8c5 	bl	8006a80 <HAL_TIM_IC_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80018fc:	f000 fca6 	bl	800224c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001904:	2300      	movs	r3, #0
 8001906:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	480f      	ldr	r0, [pc, #60]	; (8001950 <MX_TIM1_Init+0xe4>)
 8001914:	f006 fb62 	bl	8007fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800191e:	f000 fc95 	bl	800224c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001926:	2301      	movs	r3, #1
 8001928:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2200      	movs	r2, #0
 8001936:	4619      	mov	r1, r3
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_TIM1_Init+0xe4>)
 800193a:	f005 fb4f 	bl	8006fdc <HAL_TIM_IC_ConfigChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001944:	f000 fc82 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	3730      	adds	r7, #48	; 0x30
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000430 	.word	0x20000430
 8001954:	40012c00 	.word	0x40012c00

08001958 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08e      	sub	sp, #56	; 0x38
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001978:	463b      	mov	r3, r7
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]
 8001986:	615a      	str	r2, [r3, #20]
 8001988:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800198a:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <MX_TIM2_Init+0xe8>)
 800198c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001990:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001992:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <MX_TIM2_Init+0xe8>)
 8001994:	2200      	movs	r2, #0
 8001996:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001998:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <MX_TIM2_Init+0xe8>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800199e:	4b28      	ldr	r3, [pc, #160]	; (8001a40 <MX_TIM2_Init+0xe8>)
 80019a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a6:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <MX_TIM2_Init+0xe8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ac:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <MX_TIM2_Init+0xe8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019b2:	4823      	ldr	r0, [pc, #140]	; (8001a40 <MX_TIM2_Init+0xe8>)
 80019b4:	f004 fe3c 	bl	8006630 <HAL_TIM_Base_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80019be:	f000 fc45 	bl	800224c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019cc:	4619      	mov	r1, r3
 80019ce:	481c      	ldr	r0, [pc, #112]	; (8001a40 <MX_TIM2_Init+0xe8>)
 80019d0:	f005 fcb4 	bl	800733c <HAL_TIM_ConfigClockSource>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019da:	f000 fc37 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019de:	4818      	ldr	r0, [pc, #96]	; (8001a40 <MX_TIM2_Init+0xe8>)
 80019e0:	f004 fee6 	bl	80067b0 <HAL_TIM_PWM_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019ea:	f000 fc2f 	bl	800224c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	4619      	mov	r1, r3
 80019fc:	4810      	ldr	r0, [pc, #64]	; (8001a40 <MX_TIM2_Init+0xe8>)
 80019fe:	f006 faed 	bl	8007fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a08:	f000 fc20 	bl	800224c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a0c:	2360      	movs	r3, #96	; 0x60
 8001a0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8001a10:	2301      	movs	r3, #1
 8001a12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	2204      	movs	r2, #4
 8001a20:	4619      	mov	r1, r3
 8001a22:	4807      	ldr	r0, [pc, #28]	; (8001a40 <MX_TIM2_Init+0xe8>)
 8001a24:	f005 fb76 	bl	8007114 <HAL_TIM_PWM_ConfigChannel>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a2e:	f000 fc0d 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a32:	4803      	ldr	r0, [pc, #12]	; (8001a40 <MX_TIM2_Init+0xe8>)
 8001a34:	f001 f908 	bl	8002c48 <HAL_TIM_MspPostInit>

}
 8001a38:	bf00      	nop
 8001a3a:	3738      	adds	r7, #56	; 0x38
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	2000047c 	.word	0x2000047c

08001a44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08e      	sub	sp, #56	; 0x38
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a64:	463b      	mov	r3, r7
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]
 8001a72:	615a      	str	r2, [r3, #20]
 8001a74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a76:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <MX_TIM3_Init+0x104>)
 8001a78:	4a34      	ldr	r2, [pc, #208]	; (8001b4c <MX_TIM3_Init+0x108>)
 8001a7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8001a7c:	4b32      	ldr	r3, [pc, #200]	; (8001b48 <MX_TIM3_Init+0x104>)
 8001a7e:	2209      	movs	r2, #9
 8001a80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a82:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <MX_TIM3_Init+0x104>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001a88:	4b2f      	ldr	r3, [pc, #188]	; (8001b48 <MX_TIM3_Init+0x104>)
 8001a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <MX_TIM3_Init+0x104>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a96:	4b2c      	ldr	r3, [pc, #176]	; (8001b48 <MX_TIM3_Init+0x104>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a9c:	482a      	ldr	r0, [pc, #168]	; (8001b48 <MX_TIM3_Init+0x104>)
 8001a9e:	f004 fdc7 	bl	8006630 <HAL_TIM_Base_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001aa8:	f000 fbd0 	bl	800224c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4823      	ldr	r0, [pc, #140]	; (8001b48 <MX_TIM3_Init+0x104>)
 8001aba:	f005 fc3f 	bl	800733c <HAL_TIM_ConfigClockSource>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001ac4:	f000 fbc2 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ac8:	481f      	ldr	r0, [pc, #124]	; (8001b48 <MX_TIM3_Init+0x104>)
 8001aca:	f004 fe71 	bl	80067b0 <HAL_TIM_PWM_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001ad4:	f000 fbba 	bl	800224c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4818      	ldr	r0, [pc, #96]	; (8001b48 <MX_TIM3_Init+0x104>)
 8001ae8:	f006 fa78 	bl	8007fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001af2:	f000 fbab 	bl	800224c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af6:	2360      	movs	r3, #96	; 0x60
 8001af8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b06:	463b      	mov	r3, r7
 8001b08:	2208      	movs	r2, #8
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	480e      	ldr	r0, [pc, #56]	; (8001b48 <MX_TIM3_Init+0x104>)
 8001b0e:	f005 fb01 	bl	8007114 <HAL_TIM_PWM_ConfigChannel>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b18:	f000 fb98 	bl	800224c <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8001b1c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b20:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b22:	463b      	mov	r3, r7
 8001b24:	220c      	movs	r2, #12
 8001b26:	4619      	mov	r1, r3
 8001b28:	4807      	ldr	r0, [pc, #28]	; (8001b48 <MX_TIM3_Init+0x104>)
 8001b2a:	f005 faf3 	bl	8007114 <HAL_TIM_PWM_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8001b34:	f000 fb8a 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b38:	4803      	ldr	r0, [pc, #12]	; (8001b48 <MX_TIM3_Init+0x104>)
 8001b3a:	f001 f885 	bl	8002c48 <HAL_TIM_MspPostInit>

}
 8001b3e:	bf00      	nop
 8001b40:	3738      	adds	r7, #56	; 0x38
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200004c8 	.word	0x200004c8
 8001b4c:	40000400 	.word	0x40000400

08001b50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08e      	sub	sp, #56	; 0x38
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b70:	463b      	mov	r3, r7
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	611a      	str	r2, [r3, #16]
 8001b7e:	615a      	str	r2, [r3, #20]
 8001b80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b82:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <MX_TIM4_Init+0x100>)
 8001b84:	4a33      	ldr	r2, [pc, #204]	; (8001c54 <MX_TIM4_Init+0x104>)
 8001b86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8001b88:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <MX_TIM4_Init+0x100>)
 8001b8a:	2209      	movs	r2, #9
 8001b8c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8e:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <MX_TIM4_Init+0x100>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001b94:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <MX_TIM4_Init+0x100>)
 8001b96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b9a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9c:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <MX_TIM4_Init+0x100>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <MX_TIM4_Init+0x100>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ba8:	4829      	ldr	r0, [pc, #164]	; (8001c50 <MX_TIM4_Init+0x100>)
 8001baa:	f004 fd41 	bl	8006630 <HAL_TIM_Base_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001bb4:	f000 fb4a 	bl	800224c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4822      	ldr	r0, [pc, #136]	; (8001c50 <MX_TIM4_Init+0x100>)
 8001bc6:	f005 fbb9 	bl	800733c <HAL_TIM_ConfigClockSource>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001bd0:	f000 fb3c 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001bd4:	481e      	ldr	r0, [pc, #120]	; (8001c50 <MX_TIM4_Init+0x100>)
 8001bd6:	f004 fdeb 	bl	80067b0 <HAL_TIM_PWM_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001be0:	f000 fb34 	bl	800224c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4817      	ldr	r0, [pc, #92]	; (8001c50 <MX_TIM4_Init+0x100>)
 8001bf4:	f006 f9f2 	bl	8007fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001bfe:	f000 fb25 	bl	800224c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c02:	2360      	movs	r3, #96	; 0x60
 8001c04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001c06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c0a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c14:	463b      	mov	r3, r7
 8001c16:	2200      	movs	r2, #0
 8001c18:	4619      	mov	r1, r3
 8001c1a:	480d      	ldr	r0, [pc, #52]	; (8001c50 <MX_TIM4_Init+0x100>)
 8001c1c:	f005 fa7a 	bl	8007114 <HAL_TIM_PWM_ConfigChannel>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8001c26:	f000 fb11 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4807      	ldr	r0, [pc, #28]	; (8001c50 <MX_TIM4_Init+0x100>)
 8001c32:	f005 fa6f 	bl	8007114 <HAL_TIM_PWM_ConfigChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8001c3c:	f000 fb06 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c40:	4803      	ldr	r0, [pc, #12]	; (8001c50 <MX_TIM4_Init+0x100>)
 8001c42:	f001 f801 	bl	8002c48 <HAL_TIM_MspPostInit>

}
 8001c46:	bf00      	nop
 8001c48:	3738      	adds	r7, #56	; 0x38
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000514 	.word	0x20000514
 8001c54:	40000800 	.word	0x40000800

08001c58 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08c      	sub	sp, #48	; 0x30
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5e:	f107 0320 	add.w	r3, r7, #32
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c84:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <MX_TIM5_Init+0xdc>)
 8001c86:	4a2c      	ldr	r2, [pc, #176]	; (8001d38 <MX_TIM5_Init+0xe0>)
 8001c88:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 3;
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <MX_TIM5_Init+0xdc>)
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c90:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <MX_TIM5_Init+0xdc>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001c96:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <MX_TIM5_Init+0xdc>)
 8001c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c9c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9e:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <MX_TIM5_Init+0xdc>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca4:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <MX_TIM5_Init+0xdc>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001caa:	4822      	ldr	r0, [pc, #136]	; (8001d34 <MX_TIM5_Init+0xdc>)
 8001cac:	f004 fcc0 	bl	8006630 <HAL_TIM_Base_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8001cb6:	f000 fac9 	bl	800224c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cbe:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001cc0:	f107 0320 	add.w	r3, r7, #32
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	481b      	ldr	r0, [pc, #108]	; (8001d34 <MX_TIM5_Init+0xdc>)
 8001cc8:	f005 fb38 	bl	800733c <HAL_TIM_ConfigClockSource>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001cd2:	f000 fabb 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001cd6:	4817      	ldr	r0, [pc, #92]	; (8001d34 <MX_TIM5_Init+0xdc>)
 8001cd8:	f004 fed2 	bl	8006a80 <HAL_TIM_IC_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001ce2:	f000 fab3 	bl	800224c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480f      	ldr	r0, [pc, #60]	; (8001d34 <MX_TIM5_Init+0xdc>)
 8001cf6:	f006 f971 	bl	8007fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8001d00:	f000 faa4 	bl	800224c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	2200      	movs	r2, #0
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4806      	ldr	r0, [pc, #24]	; (8001d34 <MX_TIM5_Init+0xdc>)
 8001d1c:	f005 f95e 	bl	8006fdc <HAL_TIM_IC_ConfigChannel>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 8001d26:	f000 fa91 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	3730      	adds	r7, #48	; 0x30
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000560 	.word	0x20000560
 8001d38:	40000c00 	.word	0x40000c00

08001d3c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08c      	sub	sp, #48	; 0x30
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 0320 	add.w	r3, r7, #32
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d68:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <MX_TIM8_Init+0xe4>)
 8001d6a:	4a2e      	ldr	r2, [pc, #184]	; (8001e24 <MX_TIM8_Init+0xe8>)
 8001d6c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <MX_TIM8_Init+0xe4>)
 8001d70:	2203      	movs	r2, #3
 8001d72:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d74:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <MX_TIM8_Init+0xe4>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001d7a:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <MX_TIM8_Init+0xe4>)
 8001d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d80:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d82:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <MX_TIM8_Init+0xe4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d88:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <MX_TIM8_Init+0xe4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8e:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <MX_TIM8_Init+0xe4>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d94:	4822      	ldr	r0, [pc, #136]	; (8001e20 <MX_TIM8_Init+0xe4>)
 8001d96:	f004 fc4b 	bl	8006630 <HAL_TIM_Base_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8001da0:	f000 fa54 	bl	800224c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001daa:	f107 0320 	add.w	r3, r7, #32
 8001dae:	4619      	mov	r1, r3
 8001db0:	481b      	ldr	r0, [pc, #108]	; (8001e20 <MX_TIM8_Init+0xe4>)
 8001db2:	f005 fac3 	bl	800733c <HAL_TIM_ConfigClockSource>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001dbc:	f000 fa46 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001dc0:	4817      	ldr	r0, [pc, #92]	; (8001e20 <MX_TIM8_Init+0xe4>)
 8001dc2:	f004 fe5d 	bl	8006a80 <HAL_TIM_IC_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001dcc:	f000 fa3e 	bl	800224c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	480f      	ldr	r0, [pc, #60]	; (8001e20 <MX_TIM8_Init+0xe4>)
 8001de4:	f006 f8fa 	bl	8007fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8001dee:	f000 fa2d 	bl	800224c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001df6:	2301      	movs	r3, #1
 8001df8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2200      	movs	r2, #0
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_TIM8_Init+0xe4>)
 8001e0a:	f005 f8e7 	bl	8006fdc <HAL_TIM_IC_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8001e14:	f000 fa1a 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	3730      	adds	r7, #48	; 0x30
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	200005ac 	.word	0x200005ac
 8001e24:	40013400 	.word	0x40013400

08001e28 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	; 0x30
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e2e:	f107 0320 	add.w	r3, r7, #32
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001e54:	4b2c      	ldr	r3, [pc, #176]	; (8001f08 <MX_TIM15_Init+0xe0>)
 8001e56:	4a2d      	ldr	r2, [pc, #180]	; (8001f0c <MX_TIM15_Init+0xe4>)
 8001e58:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 3;
 8001e5a:	4b2b      	ldr	r3, [pc, #172]	; (8001f08 <MX_TIM15_Init+0xe0>)
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e60:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <MX_TIM15_Init+0xe0>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001e66:	4b28      	ldr	r3, [pc, #160]	; (8001f08 <MX_TIM15_Init+0xe0>)
 8001e68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e6c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6e:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <MX_TIM15_Init+0xe0>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001e74:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <MX_TIM15_Init+0xe0>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7a:	4b23      	ldr	r3, [pc, #140]	; (8001f08 <MX_TIM15_Init+0xe0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001e80:	4821      	ldr	r0, [pc, #132]	; (8001f08 <MX_TIM15_Init+0xe0>)
 8001e82:	f004 fbd5 	bl	8006630 <HAL_TIM_Base_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 8001e8c:	f000 f9de 	bl	800224c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e94:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001e96:	f107 0320 	add.w	r3, r7, #32
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	481a      	ldr	r0, [pc, #104]	; (8001f08 <MX_TIM15_Init+0xe0>)
 8001e9e:	f005 fa4d 	bl	800733c <HAL_TIM_ConfigClockSource>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 8001ea8:	f000 f9d0 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001eac:	4816      	ldr	r0, [pc, #88]	; (8001f08 <MX_TIM15_Init+0xe0>)
 8001eae:	f004 fde7 	bl	8006a80 <HAL_TIM_IC_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001eb8:	f000 f9c8 	bl	800224c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	4619      	mov	r1, r3
 8001eca:	480f      	ldr	r0, [pc, #60]	; (8001f08 <MX_TIM15_Init+0xe0>)
 8001ecc:	f006 f886 	bl	8007fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 8001ed6:	f000 f9b9 	bl	800224c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	2200      	movs	r2, #0
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4805      	ldr	r0, [pc, #20]	; (8001f08 <MX_TIM15_Init+0xe0>)
 8001ef2:	f005 f873 	bl	8006fdc <HAL_TIM_IC_ConfigChannel>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001efc:	f000 f9a6 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001f00:	bf00      	nop
 8001f02:	3730      	adds	r7, #48	; 0x30
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200005f8 	.word	0x200005f8
 8001f0c:	40014000 	.word	0x40014000

08001f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08e      	sub	sp, #56	; 0x38
 8001f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
 8001f24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f26:	4bb3      	ldr	r3, [pc, #716]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2a:	4ab2      	ldr	r2, [pc, #712]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001f2c:	f043 0310 	orr.w	r3, r3, #16
 8001f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f32:	4bb0      	ldr	r3, [pc, #704]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	623b      	str	r3, [r7, #32]
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3e:	4bad      	ldr	r3, [pc, #692]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f42:	4aac      	ldr	r2, [pc, #688]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001f44:	f043 0304 	orr.w	r3, r3, #4
 8001f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4a:	4baa      	ldr	r3, [pc, #680]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	61fb      	str	r3, [r7, #28]
 8001f54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f56:	4ba7      	ldr	r3, [pc, #668]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	4aa6      	ldr	r2, [pc, #664]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001f5c:	f043 0320 	orr.w	r3, r3, #32
 8001f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f62:	4ba4      	ldr	r3, [pc, #656]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f6e:	4ba1      	ldr	r3, [pc, #644]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	4aa0      	ldr	r2, [pc, #640]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f7a:	4b9e      	ldr	r3, [pc, #632]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f86:	4b9b      	ldr	r3, [pc, #620]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	4a9a      	ldr	r2, [pc, #616]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f92:	4b98      	ldr	r3, [pc, #608]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	4b95      	ldr	r3, [pc, #596]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	4a94      	ldr	r2, [pc, #592]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001faa:	4b92      	ldr	r3, [pc, #584]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb6:	4b8f      	ldr	r3, [pc, #572]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	4a8e      	ldr	r2, [pc, #568]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001fbc:	f043 0308 	orr.w	r3, r3, #8
 8001fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc2:	4b8c      	ldr	r3, [pc, #560]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fce:	4b89      	ldr	r3, [pc, #548]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	4a88      	ldr	r2, [pc, #544]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fda:	4b86      	ldr	r3, [pc, #536]	; (80021f4 <MX_GPIO_Init+0x2e4>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001fe6:	f002 ff23 	bl	8004e30 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2103      	movs	r1, #3
 8001fee:	4882      	ldr	r0, [pc, #520]	; (80021f8 <MX_GPIO_Init+0x2e8>)
 8001ff0:	f002 fe42 	bl	8004c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f240 7103 	movw	r1, #1795	; 0x703
 8001ffa:	4880      	ldr	r0, [pc, #512]	; (80021fc <MX_GPIO_Init+0x2ec>)
 8001ffc:	f002 fe3c 	bl	8004c78 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002000:	2200      	movs	r2, #0
 8002002:	2140      	movs	r1, #64	; 0x40
 8002004:	487e      	ldr	r0, [pc, #504]	; (8002200 <MX_GPIO_Init+0x2f0>)
 8002006:	f002 fe37 	bl	8004c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800200a:	230c      	movs	r3, #12
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800201a:	230d      	movs	r3, #13
 800201c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800201e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002022:	4619      	mov	r1, r3
 8002024:	4877      	ldr	r0, [pc, #476]	; (8002204 <MX_GPIO_Init+0x2f4>)
 8002026:	f002 fc95 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800202a:	2303      	movs	r3, #3
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202e:	2301      	movs	r3, #1
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800203a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203e:	4619      	mov	r1, r3
 8002040:	486d      	ldr	r0, [pc, #436]	; (80021f8 <MX_GPIO_Init+0x2e8>)
 8002042:	f002 fc87 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002046:	2304      	movs	r3, #4
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800204a:	2312      	movs	r3, #18
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002052:	2303      	movs	r3, #3
 8002054:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002056:	2304      	movs	r3, #4
 8002058:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800205a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800205e:	4619      	mov	r1, r3
 8002060:	4865      	ldr	r0, [pc, #404]	; (80021f8 <MX_GPIO_Init+0x2e8>)
 8002062:	f002 fc77 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002076:	230d      	movs	r3, #13
 8002078:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800207a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207e:	4619      	mov	r1, r3
 8002080:	485d      	ldr	r0, [pc, #372]	; (80021f8 <MX_GPIO_Init+0x2e8>)
 8002082:	f002 fc67 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002086:	23c0      	movs	r3, #192	; 0xc0
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002096:	2305      	movs	r3, #5
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209e:	4619      	mov	r1, r3
 80020a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a4:	f002 fc56 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020a8:	2304      	movs	r3, #4
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ac:	2303      	movs	r3, #3
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b8:	4619      	mov	r1, r3
 80020ba:	4851      	ldr	r0, [pc, #324]	; (8002200 <MX_GPIO_Init+0x2f0>)
 80020bc:	f002 fc4a 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80020c0:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80020d2:	230d      	movs	r3, #13
 80020d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020da:	4619      	mov	r1, r3
 80020dc:	4848      	ldr	r0, [pc, #288]	; (8002200 <MX_GPIO_Init+0x2f0>)
 80020de:	f002 fc39 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0
                           PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0
 80020e2:	f240 7303 	movw	r3, #1795	; 0x703
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e8:	2301      	movs	r3, #1
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f8:	4619      	mov	r1, r3
 80020fa:	4840      	ldr	r0, [pc, #256]	; (80021fc <MX_GPIO_Init+0x2ec>)
 80020fc:	f002 fc2a 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002100:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210e:	2303      	movs	r3, #3
 8002110:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002112:	230c      	movs	r3, #12
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211a:	4619      	mov	r1, r3
 800211c:	483a      	ldr	r0, [pc, #232]	; (8002208 <MX_GPIO_Init+0x2f8>)
 800211e:	f002 fc19 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8002122:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002134:	230a      	movs	r3, #10
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213c:	4619      	mov	r1, r3
 800213e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002142:	f002 fc07 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214c:	2300      	movs	r3, #0
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002158:	4619      	mov	r1, r3
 800215a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800215e:	f002 fbf9 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002162:	2304      	movs	r3, #4
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216e:	2303      	movs	r3, #3
 8002170:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002172:	230c      	movs	r3, #12
 8002174:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217a:	4619      	mov	r1, r3
 800217c:	481f      	ldr	r0, [pc, #124]	; (80021fc <MX_GPIO_Init+0x2ec>)
 800217e:	f002 fbe9 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002182:	2378      	movs	r3, #120	; 0x78
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218e:	2303      	movs	r3, #3
 8002190:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002192:	2307      	movs	r3, #7
 8002194:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219a:	4619      	mov	r1, r3
 800219c:	4817      	ldr	r0, [pc, #92]	; (80021fc <MX_GPIO_Init+0x2ec>)
 800219e:	f002 fbd9 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80021a2:	2338      	movs	r3, #56	; 0x38
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ae:	2303      	movs	r3, #3
 80021b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021b2:	2306      	movs	r3, #6
 80021b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ba:	4619      	mov	r1, r3
 80021bc:	4810      	ldr	r0, [pc, #64]	; (8002200 <MX_GPIO_Init+0x2f0>)
 80021be:	f002 fbc9 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021c2:	2340      	movs	r3, #64	; 0x40
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c6:	2301      	movs	r3, #1
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d6:	4619      	mov	r1, r3
 80021d8:	4809      	ldr	r0, [pc, #36]	; (8002200 <MX_GPIO_Init+0x2f0>)
 80021da:	f002 fbbb 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021e4:	2312      	movs	r3, #18
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ec:	2303      	movs	r3, #3
 80021ee:	633b      	str	r3, [r7, #48]	; 0x30
 80021f0:	e00c      	b.n	800220c <MX_GPIO_Init+0x2fc>
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	48001400 	.word	0x48001400
 80021fc:	48000c00 	.word	0x48000c00
 8002200:	48000400 	.word	0x48000400
 8002204:	48001000 	.word	0x48001000
 8002208:	48000800 	.word	0x48000800
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800220c:	2304      	movs	r3, #4
 800220e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002214:	4619      	mov	r1, r3
 8002216:	4803      	ldr	r0, [pc, #12]	; (8002224 <MX_GPIO_Init+0x314>)
 8002218:	f002 fb9c 	bl	8004954 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800221c:	bf00      	nop
 800221e:	3738      	adds	r7, #56	; 0x38
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	48000400 	.word	0x48000400

08002228 <__io_putchar>:
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)&ch,1,0xFFFF);
 8002230:	1d39      	adds	r1, r7, #4
 8002232:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002236:	2201      	movs	r2, #1
 8002238:	4803      	ldr	r0, [pc, #12]	; (8002248 <__io_putchar+0x20>)
 800223a:	f005 ffc5 	bl	80081c8 <HAL_UART_Transmit>
	return ch;
 800223e:	687b      	ldr	r3, [r7, #4]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000274 	.word	0x20000274

0800224c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002250:	b672      	cpsid	i
}
 8002252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002254:	e7fe      	b.n	8002254 <Error_Handler+0x8>
	...

08002258 <center_robot>:
 */
#include "main.h"

//based on pixy input, center the target by rotating wheels so that the object is at [127.5, y]
//assume that the robot is already moving
void center_robot(TIM_HandleTypeDef htim3, TIM_HandleTypeDef htim4, uint16_t x) {
 8002258:	b084      	sub	sp, #16
 800225a:	b5b0      	push	{r4, r5, r7, lr}
 800225c:	b0a6      	sub	sp, #152	; 0x98
 800225e:	af26      	add	r7, sp, #152	; 0x98
 8002260:	f107 0410 	add.w	r4, r7, #16
 8002264:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//to prevent the robot from speeding up constantly as it centers on the object
	extern int speed;
	static char turning_left = 0;
	static char turning_right = 0;

	if (x > 192 && !turning_right) { //turn right
 8002268:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800226c:	2bc0      	cmp	r3, #192	; 0xc0
 800226e:	d92b      	bls.n	80022c8 <center_robot+0x70>
 8002270:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <center_robot+0x168>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d127      	bne.n	80022c8 <center_robot+0x70>

		turning_right = 1;
 8002278:	4b51      	ldr	r3, [pc, #324]	; (80023c0 <center_robot+0x168>)
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
		turning_left = 0;
 800227e:	4b51      	ldr	r3, [pc, #324]	; (80023c4 <center_robot+0x16c>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
		//int ccr = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_3);
		//set_throttle(htim3, htim4, 0);
		//HAL_Delay(1000);

		turn(htim3, htim4, 650, 550, 'R');
 8002284:	2352      	movs	r3, #82	; 0x52
 8002286:	9324      	str	r3, [sp, #144]	; 0x90
 8002288:	f240 2326 	movw	r3, #550	; 0x226
 800228c:	9323      	str	r3, [sp, #140]	; 0x8c
 800228e:	f240 238a 	movw	r3, #650	; 0x28a
 8002292:	9322      	str	r3, [sp, #136]	; 0x88
 8002294:	a80f      	add	r0, sp, #60	; 0x3c
 8002296:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800229a:	224c      	movs	r2, #76	; 0x4c
 800229c:	4619      	mov	r1, r3
 800229e:	f008 ff30 	bl	800b102 <memcpy>
 80022a2:	466d      	mov	r5, sp
 80022a4:	f107 0420 	add.w	r4, r7, #32
 80022a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80022b8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80022bc:	f107 0310 	add.w	r3, r7, #16
 80022c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022c2:	f000 f889 	bl	80023d8 <turn>
	if (x > 192 && !turning_right) { //turn right
 80022c6:	e074      	b.n	80023b2 <center_robot+0x15a>
		//HAL_Delay(200);
		//turn(htim3, htim4, 600, 600, 'R');
	}

	else if (x < 112 && !turning_left) { //turn left
 80022c8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80022cc:	2b6f      	cmp	r3, #111	; 0x6f
 80022ce:	d82b      	bhi.n	8002328 <center_robot+0xd0>
 80022d0:	4b3c      	ldr	r3, [pc, #240]	; (80023c4 <center_robot+0x16c>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d127      	bne.n	8002328 <center_robot+0xd0>

		turning_right = 0;
 80022d8:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <center_robot+0x168>)
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
		turning_left = 1;
 80022de:	4b39      	ldr	r3, [pc, #228]	; (80023c4 <center_robot+0x16c>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
		//set_throttle(htim3, htim4, 0);
		//HAL_Delay(1000);
		//int ccr = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_2);

		turn(htim3, htim4, 550, 650, 'L');
 80022e4:	234c      	movs	r3, #76	; 0x4c
 80022e6:	9324      	str	r3, [sp, #144]	; 0x90
 80022e8:	f240 238a 	movw	r3, #650	; 0x28a
 80022ec:	9323      	str	r3, [sp, #140]	; 0x8c
 80022ee:	f240 2326 	movw	r3, #550	; 0x226
 80022f2:	9322      	str	r3, [sp, #136]	; 0x88
 80022f4:	a80f      	add	r0, sp, #60	; 0x3c
 80022f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022fa:	224c      	movs	r2, #76	; 0x4c
 80022fc:	4619      	mov	r1, r3
 80022fe:	f008 ff00 	bl	800b102 <memcpy>
 8002302:	466d      	mov	r5, sp
 8002304:	f107 0420 	add.w	r4, r7, #32
 8002308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800230a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800230c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800230e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002314:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002318:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002322:	f000 f859 	bl	80023d8 <turn>
	else if (x < 112 && !turning_left) { //turn left
 8002326:	e044      	b.n	80023b2 <center_robot+0x15a>
		//HAL_Delay(200);
		//turn(htim3, htim4, 600, 600, 'L');

	}

	else if (x >= 112 && x <= 192 ){
 8002328:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800232c:	2b6f      	cmp	r3, #111	; 0x6f
 800232e:	d940      	bls.n	80023b2 <center_robot+0x15a>
 8002330:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002334:	2bc0      	cmp	r3, #192	; 0xc0
 8002336:	d83c      	bhi.n	80023b2 <center_robot+0x15a>

		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_1, GPIO_PIN_SET); //L
 8002338:	2201      	movs	r2, #1
 800233a:	2102      	movs	r1, #2
 800233c:	4822      	ldr	r0, [pc, #136]	; (80023c8 <center_robot+0x170>)
 800233e:	f002 fc9b 	bl	8004c78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	2101      	movs	r1, #1
 8002346:	4820      	ldr	r0, [pc, #128]	; (80023c8 <center_robot+0x170>)
 8002348:	f002 fc96 	bl	8004c78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 800234c:	2200      	movs	r2, #0
 800234e:	2101      	movs	r1, #1
 8002350:	481e      	ldr	r0, [pc, #120]	; (80023cc <center_robot+0x174>)
 8002352:	f002 fc91 	bl	8004c78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8002356:	2201      	movs	r2, #1
 8002358:	2102      	movs	r1, #2
 800235a:	481c      	ldr	r0, [pc, #112]	; (80023cc <center_robot+0x174>)
 800235c:	f002 fc8c 	bl	8004c78 <HAL_GPIO_WritePin>

		turning_right = 0;
 8002360:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <center_robot+0x168>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
		turning_left = 0;
 8002366:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <center_robot+0x16c>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
		set_throttle(htim3, htim4, speed / 100);
 800236c:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <center_robot+0x178>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a18      	ldr	r2, [pc, #96]	; (80023d4 <center_robot+0x17c>)
 8002372:	fb82 1203 	smull	r1, r2, r2, r3
 8002376:	1152      	asrs	r2, r2, #5
 8002378:	17db      	asrs	r3, r3, #31
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	9322      	str	r3, [sp, #136]	; 0x88
 800237e:	a80f      	add	r0, sp, #60	; 0x3c
 8002380:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002384:	224c      	movs	r2, #76	; 0x4c
 8002386:	4619      	mov	r1, r3
 8002388:	f008 febb 	bl	800b102 <memcpy>
 800238c:	466d      	mov	r5, sp
 800238e:	f107 0420 	add.w	r4, r7, #32
 8002392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800239a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800239c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800239e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80023a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80023a6:	f107 0310 	add.w	r3, r7, #16
 80023aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023ac:	f000 f862 	bl	8002474 <set_throttle>
	}

}
 80023b0:	e7ff      	b.n	80023b2 <center_robot+0x15a>
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80023ba:	b004      	add	sp, #16
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000684 	.word	0x20000684
 80023c4:	20000685 	.word	0x20000685
 80023c8:	48001400 	.word	0x48001400
 80023cc:	48000c00 	.word	0x48000c00
 80023d0:	20000648 	.word	0x20000648
 80023d4:	51eb851f 	.word	0x51eb851f

080023d8 <turn>:

void turn(TIM_HandleTypeDef htim3, TIM_HandleTypeDef htim4, uint16_t l_speed, uint16_t r_speed, char direction) {
 80023d8:	b084      	sub	sp, #16
 80023da:	b580      	push	{r7, lr}
 80023dc:	af00      	add	r7, sp, #0
 80023de:	f107 0c08 	add.w	ip, r7, #8
 80023e2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (direction == 'L') {
 80023e6:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 80023ea:	2b4c      	cmp	r3, #76	; 0x4c
 80023ec:	d11c      	bne.n	8002428 <turn+0x50>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET); //R
 80023ee:	2200      	movs	r2, #0
 80023f0:	2102      	movs	r1, #2
 80023f2:	481e      	ldr	r0, [pc, #120]	; (800246c <turn+0x94>)
 80023f4:	f002 fc40 	bl	8004c78 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOF,GPIO_PIN_0, GPIO_PIN_SET); //L
 80023f8:	2201      	movs	r2, #1
 80023fa:	2101      	movs	r1, #1
 80023fc:	481c      	ldr	r0, [pc, #112]	; (8002470 <turn+0x98>)
 80023fe:	f002 fc3b 	bl	8004c78 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
 8002404:	2101      	movs	r1, #1
 8002406:	4819      	ldr	r0, [pc, #100]	; (800246c <turn+0x94>)
 8002408:	f002 fc36 	bl	8004c78 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOF,GPIO_PIN_1, GPIO_PIN_SET); //L
 800240c:	2201      	movs	r2, #1
 800240e:	2102      	movs	r1, #2
 8002410:	4817      	ldr	r0, [pc, #92]	; (8002470 <turn+0x98>)
 8002412:	f002 fc31 	bl	8004c78 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, r_speed); //TODO: check if 50 increment is enough
 8002416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002418:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800241c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, l_speed);
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8002424:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, l_speed); //TODO: check if 50 increment is enough
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, r_speed); //TODO: check if 50 increment is enough
	}
}
 8002426:	e01b      	b.n	8002460 <turn+0x88>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8002428:	2201      	movs	r2, #1
 800242a:	2101      	movs	r1, #1
 800242c:	480f      	ldr	r0, [pc, #60]	; (800246c <turn+0x94>)
 800242e:	f002 fc23 	bl	8004c78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8002432:	2200      	movs	r2, #0
 8002434:	2102      	movs	r1, #2
 8002436:	480e      	ldr	r0, [pc, #56]	; (8002470 <turn+0x98>)
 8002438:	f002 fc1e 	bl	8004c78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 800243c:	2201      	movs	r2, #1
 800243e:	2102      	movs	r1, #2
 8002440:	480a      	ldr	r0, [pc, #40]	; (800246c <turn+0x94>)
 8002442:	f002 fc19 	bl	8004c78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8002446:	2200      	movs	r2, #0
 8002448:	2101      	movs	r1, #1
 800244a:	4809      	ldr	r0, [pc, #36]	; (8002470 <turn+0x98>)
 800244c:	f002 fc14 	bl	8004c78 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, l_speed); //TODO: check if 50 increment is enough
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8002456:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, r_speed); //TODO: check if 50 increment is enough
 8002458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800245a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800245e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002468:	b004      	add	sp, #16
 800246a:	4770      	bx	lr
 800246c:	48000c00 	.word	0x48000c00
 8002470:	48001400 	.word	0x48001400

08002474 <set_throttle>:

//ARR=1000; set CCR based on input from 1-10
void set_throttle(TIM_HandleTypeDef htim3, TIM_HandleTypeDef htim4, int throttle) {
 8002474:	b084      	sub	sp, #16
 8002476:	b490      	push	{r4, r7}
 8002478:	af00      	add	r7, sp, #0
 800247a:	f107 0408 	add.w	r4, r7, #8
 800247e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, throttle*100); //L
 8002482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002486:	2264      	movs	r2, #100	; 0x64
 8002488:	fb03 f202 	mul.w	r2, r3, r2
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, throttle*100); //R
 8002490:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002494:	2264      	movs	r2, #100	; 0x64
 8002496:	fb03 f202 	mul.w	r2, r3, r2
 800249a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800249c:	639a      	str	r2, [r3, #56]	; 0x38

}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc90      	pop	{r4, r7}
 80024a4:	b004      	add	sp, #16
 80024a6:	4770      	bx	lr

080024a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_MspInit+0x44>)
 80024b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b2:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <HAL_MspInit+0x44>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6613      	str	r3, [r2, #96]	; 0x60
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <HAL_MspInit+0x44>)
 80024bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_MspInit+0x44>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	4a08      	ldr	r2, [pc, #32]	; (80024ec <HAL_MspInit+0x44>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	6593      	str	r3, [r2, #88]	; 0x58
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_MspInit+0x44>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000

080024f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b0b0      	sub	sp, #192	; 0xc0
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002508:	f107 0318 	add.w	r3, r7, #24
 800250c:	2294      	movs	r2, #148	; 0x94
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f008 fd76 	bl	800b002 <memset>
  if(hadc->Instance==ADC1)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a42      	ldr	r2, [pc, #264]	; (8002624 <HAL_ADC_MspInit+0x134>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d17d      	bne.n	800261c <HAL_ADC_MspInit+0x12c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002520:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002524:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002526:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800252a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800252e:	2301      	movs	r3, #1
 8002530:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002532:	2301      	movs	r3, #1
 8002534:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002536:	2310      	movs	r3, #16
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800253a:	2302      	movs	r3, #2
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800253e:	2302      	movs	r3, #2
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002542:	2302      	movs	r3, #2
 8002544:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002546:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800254a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800254c:	f107 0318 	add.w	r3, r7, #24
 8002550:	4618      	mov	r0, r3
 8002552:	f003 fb55 	bl	8005c00 <HAL_RCCEx_PeriphCLKConfig>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800255c:	f7ff fe76 	bl	800224c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002560:	4b31      	ldr	r3, [pc, #196]	; (8002628 <HAL_ADC_MspInit+0x138>)
 8002562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002564:	4a30      	ldr	r2, [pc, #192]	; (8002628 <HAL_ADC_MspInit+0x138>)
 8002566:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800256a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800256c:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <HAL_ADC_MspInit+0x138>)
 800256e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_ADC_MspInit+0x138>)
 800257a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257c:	4a2a      	ldr	r2, [pc, #168]	; (8002628 <HAL_ADC_MspInit+0x138>)
 800257e:	f043 0304 	orr.w	r3, r3, #4
 8002582:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002584:	4b28      	ldr	r3, [pc, #160]	; (8002628 <HAL_ADC_MspInit+0x138>)
 8002586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002590:	4b25      	ldr	r3, [pc, #148]	; (8002628 <HAL_ADC_MspInit+0x138>)
 8002592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002594:	4a24      	ldr	r2, [pc, #144]	; (8002628 <HAL_ADC_MspInit+0x138>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800259c:	4b22      	ldr	r3, [pc, #136]	; (8002628 <HAL_ADC_MspInit+0x138>)
 800259e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a8:	4b1f      	ldr	r3, [pc, #124]	; (8002628 <HAL_ADC_MspInit+0x138>)
 80025aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ac:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <HAL_ADC_MspInit+0x138>)
 80025ae:	f043 0302 	orr.w	r3, r3, #2
 80025b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025b4:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <HAL_ADC_MspInit+0x138>)
 80025b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PA3     ------> ADC1_IN8
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80025c0:	230f      	movs	r3, #15
 80025c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80025c6:	230b      	movs	r3, #11
 80025c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025d6:	4619      	mov	r1, r3
 80025d8:	4814      	ldr	r0, [pc, #80]	; (800262c <HAL_ADC_MspInit+0x13c>)
 80025da:	f002 f9bb 	bl	8004954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025de:	2308      	movs	r3, #8
 80025e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80025e4:	230b      	movs	r3, #11
 80025e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025f4:	4619      	mov	r1, r3
 80025f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025fa:	f002 f9ab 	bl	8004954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025fe:	2302      	movs	r3, #2
 8002600:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002604:	230b      	movs	r3, #11
 8002606:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002610:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002614:	4619      	mov	r1, r3
 8002616:	4806      	ldr	r0, [pc, #24]	; (8002630 <HAL_ADC_MspInit+0x140>)
 8002618:	f002 f99c 	bl	8004954 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800261c:	bf00      	nop
 800261e:	37c0      	adds	r7, #192	; 0xc0
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	50040000 	.word	0x50040000
 8002628:	40021000 	.word	0x40021000
 800262c:	48000800 	.word	0x48000800
 8002630:	48000400 	.word	0x48000400

08002634 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a15      	ldr	r2, [pc, #84]	; (80026a8 <HAL_DAC_MspInit+0x74>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d124      	bne.n	80026a0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_DAC_MspInit+0x78>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265a:	4a14      	ldr	r2, [pc, #80]	; (80026ac <HAL_DAC_MspInit+0x78>)
 800265c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002660:	6593      	str	r3, [r2, #88]	; 0x58
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_DAC_MspInit+0x78>)
 8002664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002666:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <HAL_DAC_MspInit+0x78>)
 8002670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002672:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <HAL_DAC_MspInit+0x78>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <HAL_DAC_MspInit+0x78>)
 800267c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002686:	2310      	movs	r3, #16
 8002688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800268a:	2303      	movs	r3, #3
 800268c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002692:	f107 0314 	add.w	r3, r7, #20
 8002696:	4619      	mov	r1, r3
 8002698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800269c:	f002 f95a 	bl	8004954 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80026a0:	bf00      	nop
 80026a2:	3728      	adds	r7, #40	; 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40007400 	.word	0x40007400
 80026ac:	40021000 	.word	0x40021000

080026b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b0b2      	sub	sp, #200	; 0xc8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026c8:	f107 0320 	add.w	r3, r7, #32
 80026cc:	2294      	movs	r2, #148	; 0x94
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f008 fc96 	bl	800b002 <memset>
  if(huart->Instance==LPUART1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a6d      	ldr	r2, [pc, #436]	; (8002890 <HAL_UART_MspInit+0x1e0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d13e      	bne.n	800275e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80026e0:	2320      	movs	r3, #32
 80026e2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80026e4:	2300      	movs	r3, #0
 80026e6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026e8:	f107 0320 	add.w	r3, r7, #32
 80026ec:	4618      	mov	r0, r3
 80026ee:	f003 fa87 	bl	8005c00 <HAL_RCCEx_PeriphCLKConfig>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026f8:	f7ff fda8 	bl	800224c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80026fc:	4b65      	ldr	r3, [pc, #404]	; (8002894 <HAL_UART_MspInit+0x1e4>)
 80026fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002700:	4a64      	ldr	r2, [pc, #400]	; (8002894 <HAL_UART_MspInit+0x1e4>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002708:	4b62      	ldr	r3, [pc, #392]	; (8002894 <HAL_UART_MspInit+0x1e4>)
 800270a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002714:	4b5f      	ldr	r3, [pc, #380]	; (8002894 <HAL_UART_MspInit+0x1e4>)
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002718:	4a5e      	ldr	r2, [pc, #376]	; (8002894 <HAL_UART_MspInit+0x1e4>)
 800271a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800271e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002720:	4b5c      	ldr	r3, [pc, #368]	; (8002894 <HAL_UART_MspInit+0x1e4>)
 8002722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 800272c:	f002 fb80 	bl	8004e30 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002730:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002744:	2303      	movs	r3, #3
 8002746:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800274a:	2308      	movs	r3, #8
 800274c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002750:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002754:	4619      	mov	r1, r3
 8002756:	4850      	ldr	r0, [pc, #320]	; (8002898 <HAL_UART_MspInit+0x1e8>)
 8002758:	f002 f8fc 	bl	8004954 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800275c:	e093      	b.n	8002886 <HAL_UART_MspInit+0x1d6>
  else if(huart->Instance==USART1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a4e      	ldr	r2, [pc, #312]	; (800289c <HAL_UART_MspInit+0x1ec>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d146      	bne.n	80027f6 <HAL_UART_MspInit+0x146>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002768:	2301      	movs	r3, #1
 800276a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800276c:	2300      	movs	r3, #0
 800276e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002770:	f107 0320 	add.w	r3, r7, #32
 8002774:	4618      	mov	r0, r3
 8002776:	f003 fa43 	bl	8005c00 <HAL_RCCEx_PeriphCLKConfig>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002780:	f7ff fd64 	bl	800224c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002784:	4b43      	ldr	r3, [pc, #268]	; (8002894 <HAL_UART_MspInit+0x1e4>)
 8002786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002788:	4a42      	ldr	r2, [pc, #264]	; (8002894 <HAL_UART_MspInit+0x1e4>)
 800278a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800278e:	6613      	str	r3, [r2, #96]	; 0x60
 8002790:	4b40      	ldr	r3, [pc, #256]	; (8002894 <HAL_UART_MspInit+0x1e4>)
 8002792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800279c:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <HAL_UART_MspInit+0x1e4>)
 800279e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a0:	4a3c      	ldr	r2, [pc, #240]	; (8002894 <HAL_UART_MspInit+0x1e4>)
 80027a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027a8:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <HAL_UART_MspInit+0x1e4>)
 80027aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80027b4:	f002 fb3c 	bl	8004e30 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027d2:	2307      	movs	r3, #7
 80027d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80027dc:	4619      	mov	r1, r3
 80027de:	482e      	ldr	r0, [pc, #184]	; (8002898 <HAL_UART_MspInit+0x1e8>)
 80027e0:	f002 f8b8 	bl	8004954 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2100      	movs	r1, #0
 80027e8:	2025      	movs	r0, #37	; 0x25
 80027ea:	f001 fe52 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027ee:	2025      	movs	r0, #37	; 0x25
 80027f0:	f001 fe6b 	bl	80044ca <HAL_NVIC_EnableIRQ>
}
 80027f4:	e047      	b.n	8002886 <HAL_UART_MspInit+0x1d6>
  else if(huart->Instance==USART3)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a29      	ldr	r2, [pc, #164]	; (80028a0 <HAL_UART_MspInit+0x1f0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d142      	bne.n	8002886 <HAL_UART_MspInit+0x1d6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002800:	2304      	movs	r3, #4
 8002802:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002804:	2300      	movs	r3, #0
 8002806:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002808:	f107 0320 	add.w	r3, r7, #32
 800280c:	4618      	mov	r0, r3
 800280e:	f003 f9f7 	bl	8005c00 <HAL_RCCEx_PeriphCLKConfig>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_UART_MspInit+0x16c>
      Error_Handler();
 8002818:	f7ff fd18 	bl	800224c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800281c:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_UART_MspInit+0x1e4>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	4a1c      	ldr	r2, [pc, #112]	; (8002894 <HAL_UART_MspInit+0x1e4>)
 8002822:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002826:	6593      	str	r3, [r2, #88]	; 0x58
 8002828:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <HAL_UART_MspInit+0x1e4>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002834:	4b17      	ldr	r3, [pc, #92]	; (8002894 <HAL_UART_MspInit+0x1e4>)
 8002836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002838:	4a16      	ldr	r2, [pc, #88]	; (8002894 <HAL_UART_MspInit+0x1e4>)
 800283a:	f043 0304 	orr.w	r3, r3, #4
 800283e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <HAL_UART_MspInit+0x1e4>)
 8002842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800284c:	2330      	movs	r3, #48	; 0x30
 800284e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002852:	2302      	movs	r3, #2
 8002854:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285e:	2303      	movs	r3, #3
 8002860:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002864:	2307      	movs	r3, #7
 8002866:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800286a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800286e:	4619      	mov	r1, r3
 8002870:	480c      	ldr	r0, [pc, #48]	; (80028a4 <HAL_UART_MspInit+0x1f4>)
 8002872:	f002 f86f 	bl	8004954 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	2100      	movs	r1, #0
 800287a:	2027      	movs	r0, #39	; 0x27
 800287c:	f001 fe09 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002880:	2027      	movs	r0, #39	; 0x27
 8002882:	f001 fe22 	bl	80044ca <HAL_NVIC_EnableIRQ>
}
 8002886:	bf00      	nop
 8002888:	37c8      	adds	r7, #200	; 0xc8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40008000 	.word	0x40008000
 8002894:	40021000 	.word	0x40021000
 8002898:	48001800 	.word	0x48001800
 800289c:	40013800 	.word	0x40013800
 80028a0:	40004800 	.word	0x40004800
 80028a4:	48000800 	.word	0x48000800

080028a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b096      	sub	sp, #88	; 0x58
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a90      	ldr	r2, [pc, #576]	; (8002b08 <HAL_TIM_Base_MspInit+0x260>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d15a      	bne.n	8002980 <HAL_TIM_Base_MspInit+0xd8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028ca:	4b90      	ldr	r3, [pc, #576]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 80028cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ce:	4a8f      	ldr	r2, [pc, #572]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 80028d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028d4:	6613      	str	r3, [r2, #96]	; 0x60
 80028d6:	4b8d      	ldr	r3, [pc, #564]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 80028d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028de:	643b      	str	r3, [r7, #64]	; 0x40
 80028e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028e2:	4b8a      	ldr	r3, [pc, #552]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 80028e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e6:	4a89      	ldr	r2, [pc, #548]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 80028e8:	f043 0310 	orr.w	r3, r3, #16
 80028ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ee:	4b87      	ldr	r3, [pc, #540]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 80028f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 80028fa:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 80028fe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	2300      	movs	r3, #0
 800290a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800290c:	2301      	movs	r3, #1
 800290e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002910:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002914:	4619      	mov	r1, r3
 8002916:	487e      	ldr	r0, [pc, #504]	; (8002b10 <HAL_TIM_Base_MspInit+0x268>)
 8002918:	f002 f81c 	bl	8004954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800291c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002920:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292a:	2300      	movs	r3, #0
 800292c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800292e:	2303      	movs	r3, #3
 8002930:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002932:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002936:	4619      	mov	r1, r3
 8002938:	4875      	ldr	r0, [pc, #468]	; (8002b10 <HAL_TIM_Base_MspInit+0x268>)
 800293a:	f002 f80b 	bl	8004954 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	2018      	movs	r0, #24
 8002944:	f001 fda5 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002948:	2018      	movs	r0, #24
 800294a:	f001 fdbe 	bl	80044ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800294e:	2200      	movs	r2, #0
 8002950:	2100      	movs	r1, #0
 8002952:	2019      	movs	r0, #25
 8002954:	f001 fd9d 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002958:	2019      	movs	r0, #25
 800295a:	f001 fdb6 	bl	80044ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800295e:	2200      	movs	r2, #0
 8002960:	2100      	movs	r1, #0
 8002962:	201a      	movs	r0, #26
 8002964:	f001 fd95 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002968:	201a      	movs	r0, #26
 800296a:	f001 fdae 	bl	80044ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2100      	movs	r1, #0
 8002972:	201b      	movs	r0, #27
 8002974:	f001 fd8d 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002978:	201b      	movs	r0, #27
 800297a:	f001 fda6 	bl	80044ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800297e:	e157      	b.n	8002c30 <HAL_TIM_Base_MspInit+0x388>
  else if(htim_base->Instance==TIM2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002988:	d129      	bne.n	80029de <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800298a:	4b60      	ldr	r3, [pc, #384]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 800298c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298e:	4a5f      	ldr	r2, [pc, #380]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6593      	str	r3, [r2, #88]	; 0x58
 8002996:	4b5d      	ldr	r3, [pc, #372]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 8002998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	63bb      	str	r3, [r7, #56]	; 0x38
 80029a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a2:	4b5a      	ldr	r3, [pc, #360]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 80029a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a6:	4a59      	ldr	r2, [pc, #356]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 80029a8:	f043 0302 	orr.w	r3, r3, #2
 80029ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ae:	4b57      	ldr	r3, [pc, #348]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 80029b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	637b      	str	r3, [r7, #52]	; 0x34
 80029b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029be:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c8:	2300      	movs	r3, #0
 80029ca:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029cc:	2301      	movs	r3, #1
 80029ce:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029d4:	4619      	mov	r1, r3
 80029d6:	484f      	ldr	r0, [pc, #316]	; (8002b14 <HAL_TIM_Base_MspInit+0x26c>)
 80029d8:	f001 ffbc 	bl	8004954 <HAL_GPIO_Init>
}
 80029dc:	e128      	b.n	8002c30 <HAL_TIM_Base_MspInit+0x388>
  else if(htim_base->Instance==TIM3)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a4d      	ldr	r2, [pc, #308]	; (8002b18 <HAL_TIM_Base_MspInit+0x270>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d10c      	bne.n	8002a02 <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029e8:	4b48      	ldr	r3, [pc, #288]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 80029ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ec:	4a47      	ldr	r2, [pc, #284]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 80029ee:	f043 0302 	orr.w	r3, r3, #2
 80029f2:	6593      	str	r3, [r2, #88]	; 0x58
 80029f4:	4b45      	ldr	r3, [pc, #276]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 80029f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	633b      	str	r3, [r7, #48]	; 0x30
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002a00:	e116      	b.n	8002c30 <HAL_TIM_Base_MspInit+0x388>
  else if(htim_base->Instance==TIM4)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a45      	ldr	r2, [pc, #276]	; (8002b1c <HAL_TIM_Base_MspInit+0x274>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d145      	bne.n	8002a98 <HAL_TIM_Base_MspInit+0x1f0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a0c:	4b3f      	ldr	r3, [pc, #252]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a10:	4a3e      	ldr	r2, [pc, #248]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 8002a12:	f043 0304 	orr.w	r3, r3, #4
 8002a16:	6593      	str	r3, [r2, #88]	; 0x58
 8002a18:	4b3c      	ldr	r3, [pc, #240]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a24:	4b39      	ldr	r3, [pc, #228]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 8002a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a28:	4a38      	ldr	r2, [pc, #224]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 8002a2a:	f043 0308 	orr.w	r3, r3, #8
 8002a2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a30:	4b36      	ldr	r3, [pc, #216]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 8002a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a3c:	4b33      	ldr	r3, [pc, #204]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 8002a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a40:	4a32      	ldr	r2, [pc, #200]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 8002a42:	f043 0310 	orr.w	r3, r3, #16
 8002a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a48:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 8002a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002a54:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002a58:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a62:	2300      	movs	r3, #0
 8002a64:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a66:	2302      	movs	r3, #2
 8002a68:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a6e:	4619      	mov	r1, r3
 8002a70:	482b      	ldr	r0, [pc, #172]	; (8002b20 <HAL_TIM_Base_MspInit+0x278>)
 8002a72:	f001 ff6f 	bl	8004954 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a76:	2301      	movs	r3, #1
 8002a78:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a82:	2300      	movs	r3, #0
 8002a84:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a86:	2302      	movs	r3, #2
 8002a88:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a8a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a8e:	4619      	mov	r1, r3
 8002a90:	481f      	ldr	r0, [pc, #124]	; (8002b10 <HAL_TIM_Base_MspInit+0x268>)
 8002a92:	f001 ff5f 	bl	8004954 <HAL_GPIO_Init>
}
 8002a96:	e0cb      	b.n	8002c30 <HAL_TIM_Base_MspInit+0x388>
  else if(htim_base->Instance==TIM5)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a21      	ldr	r2, [pc, #132]	; (8002b24 <HAL_TIM_Base_MspInit+0x27c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d142      	bne.n	8002b28 <HAL_TIM_Base_MspInit+0x280>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	4a19      	ldr	r2, [pc, #100]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 8002aa8:	f043 0308 	orr.w	r3, r3, #8
 8002aac:	6593      	str	r3, [r2, #88]	; 0x58
 8002aae:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	623b      	str	r3, [r7, #32]
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aba:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 8002abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abe:	4a13      	ldr	r2, [pc, #76]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ac6:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <HAL_TIM_Base_MspInit+0x264>)
 8002ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002aea:	4619      	mov	r1, r3
 8002aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002af0:	f001 ff30 	bl	8004954 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002af4:	2200      	movs	r2, #0
 8002af6:	2100      	movs	r1, #0
 8002af8:	2032      	movs	r0, #50	; 0x32
 8002afa:	f001 fcca 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002afe:	2032      	movs	r0, #50	; 0x32
 8002b00:	f001 fce3 	bl	80044ca <HAL_NVIC_EnableIRQ>
}
 8002b04:	e094      	b.n	8002c30 <HAL_TIM_Base_MspInit+0x388>
 8002b06:	bf00      	nop
 8002b08:	40012c00 	.word	0x40012c00
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	48001000 	.word	0x48001000
 8002b14:	48000400 	.word	0x48000400
 8002b18:	40000400 	.word	0x40000400
 8002b1c:	40000800 	.word	0x40000800
 8002b20:	48000c00 	.word	0x48000c00
 8002b24:	40000c00 	.word	0x40000c00
  else if(htim_base->Instance==TIM8)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a42      	ldr	r2, [pc, #264]	; (8002c38 <HAL_TIM_Base_MspInit+0x390>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d148      	bne.n	8002bc4 <HAL_TIM_Base_MspInit+0x31c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b32:	4b42      	ldr	r3, [pc, #264]	; (8002c3c <HAL_TIM_Base_MspInit+0x394>)
 8002b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b36:	4a41      	ldr	r2, [pc, #260]	; (8002c3c <HAL_TIM_Base_MspInit+0x394>)
 8002b38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b3c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b3e:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <HAL_TIM_Base_MspInit+0x394>)
 8002b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b46:	61bb      	str	r3, [r7, #24]
 8002b48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b4a:	4b3c      	ldr	r3, [pc, #240]	; (8002c3c <HAL_TIM_Base_MspInit+0x394>)
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4e:	4a3b      	ldr	r2, [pc, #236]	; (8002c3c <HAL_TIM_Base_MspInit+0x394>)
 8002b50:	f043 0304 	orr.w	r3, r3, #4
 8002b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b56:	4b39      	ldr	r3, [pc, #228]	; (8002c3c <HAL_TIM_Base_MspInit+0x394>)
 8002b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b62:	2340      	movs	r3, #64	; 0x40
 8002b64:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b72:	2303      	movs	r3, #3
 8002b74:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4830      	ldr	r0, [pc, #192]	; (8002c40 <HAL_TIM_Base_MspInit+0x398>)
 8002b7e:	f001 fee9 	bl	8004954 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	202b      	movs	r0, #43	; 0x2b
 8002b88:	f001 fc83 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 8002b8c:	202b      	movs	r0, #43	; 0x2b
 8002b8e:	f001 fc9c 	bl	80044ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2100      	movs	r1, #0
 8002b96:	202c      	movs	r0, #44	; 0x2c
 8002b98:	f001 fc7b 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8002b9c:	202c      	movs	r0, #44	; 0x2c
 8002b9e:	f001 fc94 	bl	80044ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_IRQn, 0, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	202d      	movs	r0, #45	; 0x2d
 8002ba8:	f001 fc73 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_IRQn);
 8002bac:	202d      	movs	r0, #45	; 0x2d
 8002bae:	f001 fc8c 	bl	80044ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	202e      	movs	r0, #46	; 0x2e
 8002bb8:	f001 fc6b 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002bbc:	202e      	movs	r0, #46	; 0x2e
 8002bbe:	f001 fc84 	bl	80044ca <HAL_NVIC_EnableIRQ>
}
 8002bc2:	e035      	b.n	8002c30 <HAL_TIM_Base_MspInit+0x388>
  else if(htim_base->Instance==TIM15)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1e      	ldr	r2, [pc, #120]	; (8002c44 <HAL_TIM_Base_MspInit+0x39c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d130      	bne.n	8002c30 <HAL_TIM_Base_MspInit+0x388>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002bce:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <HAL_TIM_Base_MspInit+0x394>)
 8002bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd2:	4a1a      	ldr	r2, [pc, #104]	; (8002c3c <HAL_TIM_Base_MspInit+0x394>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd8:	6613      	str	r3, [r2, #96]	; 0x60
 8002bda:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <HAL_TIM_Base_MspInit+0x394>)
 8002bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <HAL_TIM_Base_MspInit+0x394>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	4a14      	ldr	r2, [pc, #80]	; (8002c3c <HAL_TIM_Base_MspInit+0x394>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf2:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <HAL_TIM_Base_MspInit+0x394>)
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bfe:	2304      	movs	r3, #4
 8002c00:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002c0e:	230e      	movs	r3, #14
 8002c10:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c12:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c16:	4619      	mov	r1, r3
 8002c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c1c:	f001 fe9a 	bl	8004954 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002c20:	2200      	movs	r2, #0
 8002c22:	2100      	movs	r1, #0
 8002c24:	2018      	movs	r0, #24
 8002c26:	f001 fc34 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002c2a:	2018      	movs	r0, #24
 8002c2c:	f001 fc4d 	bl	80044ca <HAL_NVIC_EnableIRQ>
}
 8002c30:	bf00      	nop
 8002c32:	3758      	adds	r7, #88	; 0x58
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40013400 	.word	0x40013400
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	48000800 	.word	0x48000800
 8002c44:	40014000 	.word	0x40014000

08002c48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08c      	sub	sp, #48	; 0x30
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	f107 031c 	add.w	r3, r7, #28
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a53      	ldr	r2, [pc, #332]	; (8002db4 <HAL_TIM_MspPostInit+0x16c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d11d      	bne.n	8002ca6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c6a:	4b53      	ldr	r3, [pc, #332]	; (8002db8 <HAL_TIM_MspPostInit+0x170>)
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6e:	4a52      	ldr	r2, [pc, #328]	; (8002db8 <HAL_TIM_MspPostInit+0x170>)
 8002c70:	f043 0310 	orr.w	r3, r3, #16
 8002c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c76:	4b50      	ldr	r3, [pc, #320]	; (8002db8 <HAL_TIM_MspPostInit+0x170>)
 8002c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	61bb      	str	r3, [r7, #24]
 8002c80:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE10     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 8002c82:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8002c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c90:	2300      	movs	r3, #0
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c94:	2301      	movs	r3, #1
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c98:	f107 031c 	add.w	r3, r7, #28
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4847      	ldr	r0, [pc, #284]	; (8002dbc <HAL_TIM_MspPostInit+0x174>)
 8002ca0:	f001 fe58 	bl	8004954 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002ca4:	e082      	b.n	8002dac <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM2)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cae:	d11d      	bne.n	8002cec <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb0:	4b41      	ldr	r3, [pc, #260]	; (8002db8 <HAL_TIM_MspPostInit+0x170>)
 8002cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb4:	4a40      	ldr	r2, [pc, #256]	; (8002db8 <HAL_TIM_MspPostInit+0x170>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cbc:	4b3e      	ldr	r3, [pc, #248]	; (8002db8 <HAL_TIM_MspPostInit+0x170>)
 8002cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cdc:	f107 031c 	add.w	r3, r7, #28
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ce6:	f001 fe35 	bl	8004954 <HAL_GPIO_Init>
}
 8002cea:	e05f      	b.n	8002dac <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a33      	ldr	r2, [pc, #204]	; (8002dc0 <HAL_TIM_MspPostInit+0x178>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d138      	bne.n	8002d68 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cf6:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <HAL_TIM_MspPostInit+0x170>)
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfa:	4a2f      	ldr	r2, [pc, #188]	; (8002db8 <HAL_TIM_MspPostInit+0x170>)
 8002cfc:	f043 0310 	orr.w	r3, r3, #16
 8002d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d02:	4b2d      	ldr	r3, [pc, #180]	; (8002db8 <HAL_TIM_MspPostInit+0x170>)
 8002d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0e:	4b2a      	ldr	r3, [pc, #168]	; (8002db8 <HAL_TIM_MspPostInit+0x170>)
 8002d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d12:	4a29      	ldr	r2, [pc, #164]	; (8002db8 <HAL_TIM_MspPostInit+0x170>)
 8002d14:	f043 0302 	orr.w	r3, r3, #2
 8002d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d1a:	4b27      	ldr	r3, [pc, #156]	; (8002db8 <HAL_TIM_MspPostInit+0x170>)
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d26:	2340      	movs	r3, #64	; 0x40
 8002d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d32:	2300      	movs	r3, #0
 8002d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d36:	2302      	movs	r3, #2
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d3a:	f107 031c 	add.w	r3, r7, #28
 8002d3e:	4619      	mov	r1, r3
 8002d40:	481e      	ldr	r0, [pc, #120]	; (8002dbc <HAL_TIM_MspPostInit+0x174>)
 8002d42:	f001 fe07 	bl	8004954 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d46:	2301      	movs	r3, #1
 8002d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	2300      	movs	r3, #0
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d56:	2302      	movs	r3, #2
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d5a:	f107 031c 	add.w	r3, r7, #28
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4818      	ldr	r0, [pc, #96]	; (8002dc4 <HAL_TIM_MspPostInit+0x17c>)
 8002d62:	f001 fdf7 	bl	8004954 <HAL_GPIO_Init>
}
 8002d66:	e021      	b.n	8002dac <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <HAL_TIM_MspPostInit+0x180>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d11c      	bne.n	8002dac <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <HAL_TIM_MspPostInit+0x170>)
 8002d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d76:	4a10      	ldr	r2, [pc, #64]	; (8002db8 <HAL_TIM_MspPostInit+0x170>)
 8002d78:	f043 0308 	orr.w	r3, r3, #8
 8002d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <HAL_TIM_MspPostInit+0x170>)
 8002d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002d8a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d90:	2302      	movs	r3, #2
 8002d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002da0:	f107 031c 	add.w	r3, r7, #28
 8002da4:	4619      	mov	r1, r3
 8002da6:	4809      	ldr	r0, [pc, #36]	; (8002dcc <HAL_TIM_MspPostInit+0x184>)
 8002da8:	f001 fdd4 	bl	8004954 <HAL_GPIO_Init>
}
 8002dac:	bf00      	nop
 8002dae:	3730      	adds	r7, #48	; 0x30
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40012c00 	.word	0x40012c00
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	48001000 	.word	0x48001000
 8002dc0:	40000400 	.word	0x40000400
 8002dc4:	48000400 	.word	0x48000400
 8002dc8:	40000800 	.word	0x40000800
 8002dcc:	48000c00 	.word	0x48000c00

08002dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dd4:	e7fe      	b.n	8002dd4 <NMI_Handler+0x4>

08002dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dda:	e7fe      	b.n	8002dda <HardFault_Handler+0x4>

08002ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <MemManage_Handler+0x4>

08002de2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002de6:	e7fe      	b.n	8002de6 <BusFault_Handler+0x4>

08002de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dec:	e7fe      	b.n	8002dec <UsageFault_Handler+0x4>

08002dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e1c:	f000 fb38 	bl	8003490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	static int rising_edge = 0;
		extern int ePulse3;
		++rising_edge;
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <TIM1_BRK_TIM15_IRQHandler+0x64>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	4a16      	ldr	r2, [pc, #88]	; (8002e88 <TIM1_BRK_TIM15_IRQHandler+0x64>)
 8002e30:	6013      	str	r3, [r2, #0]
		rising_edge %= 2;
 8002e32:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <TIM1_BRK_TIM15_IRQHandler+0x64>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	bfb8      	it	lt
 8002e3e:	425b      	neglt	r3, r3
 8002e40:	4a11      	ldr	r2, [pc, #68]	; (8002e88 <TIM1_BRK_TIM15_IRQHandler+0x64>)
 8002e42:	6013      	str	r3, [r2, #0]

		if (rising_edge == 1) {
 8002e44:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <TIM1_BRK_TIM15_IRQHandler+0x64>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d109      	bne.n	8002e60 <TIM1_BRK_TIM15_IRQHandler+0x3c>
			TIM15->CNT = 0;
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <TIM1_BRK_TIM15_IRQHandler+0x68>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	625a      	str	r2, [r3, #36]	; 0x24
			TIM15->CCER |= 0b10;
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <TIM1_BRK_TIM15_IRQHandler+0x68>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4a0d      	ldr	r2, [pc, #52]	; (8002e8c <TIM1_BRK_TIM15_IRQHandler+0x68>)
 8002e58:	f043 0302 	orr.w	r3, r3, #2
 8002e5c:	6213      	str	r3, [r2, #32]
 8002e5e:	e00a      	b.n	8002e76 <TIM1_BRK_TIM15_IRQHandler+0x52>
		}

		else {
			ePulse3 = TIM15->CNT;
 8002e60:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <TIM1_BRK_TIM15_IRQHandler+0x68>)
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	461a      	mov	r2, r3
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <TIM1_BRK_TIM15_IRQHandler+0x6c>)
 8002e68:	601a      	str	r2, [r3, #0]
			TIM15->CCER &= 0b01;
 8002e6a:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <TIM1_BRK_TIM15_IRQHandler+0x68>)
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	4a07      	ldr	r2, [pc, #28]	; (8002e8c <TIM1_BRK_TIM15_IRQHandler+0x68>)
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	6213      	str	r3, [r2, #32]
//			HAL_TIM_IC_Stop_IT(&htim15, TIM_CHANNEL_1);
//			HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
		}

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e76:	4807      	ldr	r0, [pc, #28]	; (8002e94 <TIM1_BRK_TIM15_IRQHandler+0x70>)
 8002e78:	f003 ffae 	bl	8006dd8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002e7c:	4806      	ldr	r0, [pc, #24]	; (8002e98 <TIM1_BRK_TIM15_IRQHandler+0x74>)
 8002e7e:	f003 ffab 	bl	8006dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */


  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000688 	.word	0x20000688
 8002e8c:	40014000 	.word	0x40014000
 8002e90:	2000065c 	.word	0x2000065c
 8002e94:	20000430 	.word	0x20000430
 8002e98:	200005f8 	.word	0x200005f8

08002e9c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ea0:	4802      	ldr	r0, [pc, #8]	; (8002eac <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002ea2:	f003 ff99 	bl	8006dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000430 	.word	0x20000430

08002eb0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002eb4:	4802      	ldr	r0, [pc, #8]	; (8002ec0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002eb6:	f003 ff8f 	bl	8006dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000430 	.word	0x20000430

08002ec4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	static int rising_edge = 0;
	extern int ePulse;
	++rising_edge;
 8002ec8:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <TIM1_CC_IRQHandler+0x5c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	4a14      	ldr	r2, [pc, #80]	; (8002f20 <TIM1_CC_IRQHandler+0x5c>)
 8002ed0:	6013      	str	r3, [r2, #0]
	rising_edge %= 2;
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <TIM1_CC_IRQHandler+0x5c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	bfb8      	it	lt
 8002ede:	425b      	neglt	r3, r3
 8002ee0:	4a0f      	ldr	r2, [pc, #60]	; (8002f20 <TIM1_CC_IRQHandler+0x5c>)
 8002ee2:	6013      	str	r3, [r2, #0]

	if (rising_edge == 1) {
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <TIM1_CC_IRQHandler+0x5c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d109      	bne.n	8002f00 <TIM1_CC_IRQHandler+0x3c>
		TIM1->CNT = 0;
 8002eec:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <TIM1_CC_IRQHandler+0x60>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	625a      	str	r2, [r3, #36]	; 0x24
		TIM1->CCER |= 0b10;
 8002ef2:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <TIM1_CC_IRQHandler+0x60>)
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	4a0b      	ldr	r2, [pc, #44]	; (8002f24 <TIM1_CC_IRQHandler+0x60>)
 8002ef8:	f043 0302 	orr.w	r3, r3, #2
 8002efc:	6213      	str	r3, [r2, #32]
 8002efe:	e00a      	b.n	8002f16 <TIM1_CC_IRQHandler+0x52>
	}

	else {
		ePulse = TIM1->CNT;
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <TIM1_CC_IRQHandler+0x60>)
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <TIM1_CC_IRQHandler+0x64>)
 8002f08:	601a      	str	r2, [r3, #0]
		TIM1->CCER &= 0b01;
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <TIM1_CC_IRQHandler+0x60>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <TIM1_CC_IRQHandler+0x60>)
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	6213      	str	r3, [r2, #32]
//		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
	}


  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f16:	4805      	ldr	r0, [pc, #20]	; (8002f2c <TIM1_CC_IRQHandler+0x68>)
 8002f18:	f003 ff5e 	bl	8006dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	2000068c 	.word	0x2000068c
 8002f24:	40012c00 	.word	0x40012c00
 8002f28:	20000650 	.word	0x20000650
 8002f2c:	20000430 	.word	0x20000430

08002f30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f32:	b0a5      	sub	sp, #148	; 0x94
 8002f34:	af24      	add	r7, sp, #144	; 0x90
  extern TIM_HandleTypeDef htim4;
  if(buttonRec[0] == 0x01){
	  //right
  }

  switch(buttonRec[0]){
 8002f36:	4b46      	ldr	r3, [pc, #280]	; (8003050 <USART1_IRQHandler+0x120>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	2b1f      	cmp	r3, #31
 8002f3e:	d879      	bhi.n	8003034 <USART1_IRQHandler+0x104>
 8002f40:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <USART1_IRQHandler+0x18>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08002fc9 	.word	0x08002fc9
 8002f4c:	08003035 	.word	0x08003035
 8002f50:	08003035 	.word	0x08003035
 8002f54:	08002fd3 	.word	0x08002fd3
 8002f58:	08003035 	.word	0x08003035
 8002f5c:	08003035 	.word	0x08003035
 8002f60:	08003035 	.word	0x08003035
 8002f64:	08002fdd 	.word	0x08002fdd
 8002f68:	08003035 	.word	0x08003035
 8002f6c:	08003035 	.word	0x08003035
 8002f70:	08003035 	.word	0x08003035
 8002f74:	08003035 	.word	0x08003035
 8002f78:	08003035 	.word	0x08003035
 8002f7c:	08003035 	.word	0x08003035
 8002f80:	08003035 	.word	0x08003035
 8002f84:	08002fe7 	.word	0x08002fe7
 8002f88:	08003035 	.word	0x08003035
 8002f8c:	08003035 	.word	0x08003035
 8002f90:	08003035 	.word	0x08003035
 8002f94:	08003035 	.word	0x08003035
 8002f98:	08003035 	.word	0x08003035
 8002f9c:	08003035 	.word	0x08003035
 8002fa0:	08003035 	.word	0x08003035
 8002fa4:	08003035 	.word	0x08003035
 8002fa8:	08003035 	.word	0x08003035
 8002fac:	08003035 	.word	0x08003035
 8002fb0:	08003035 	.word	0x08003035
 8002fb4:	08003035 	.word	0x08003035
 8002fb8:	08003035 	.word	0x08003035
 8002fbc:	08003035 	.word	0x08003035
 8002fc0:	08003035 	.word	0x08003035
 8002fc4:	08002ff7 	.word	0x08002ff7
  //right
  case 0x01:
	  	  speed = 400;
 8002fc8:	4b22      	ldr	r3, [pc, #136]	; (8003054 <USART1_IRQHandler+0x124>)
 8002fca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002fce:	601a      	str	r2, [r3, #0]
	  	  break;
 8002fd0:	e031      	b.n	8003036 <USART1_IRQHandler+0x106>
  //down
  case 0x04:
	  speed = 300;
 8002fd2:	4b20      	ldr	r3, [pc, #128]	; (8003054 <USART1_IRQHandler+0x124>)
 8002fd4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fd8:	601a      	str	r2, [r3, #0]
	  break;
 8002fda:	e02c      	b.n	8003036 <USART1_IRQHandler+0x106>
  //left
 // case 0x02: break;

  //up
  case 0x08:
	  speed = 700;
 8002fdc:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <USART1_IRQHandler+0x124>)
 8002fde:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002fe2:	601a      	str	r2, [r3, #0]
	  break;
 8002fe4:	e027      	b.n	8003036 <USART1_IRQHandler+0x106>

  //start
  case 0x10:
	  started = 1;
 8002fe6:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <USART1_IRQHandler+0x128>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	701a      	strb	r2, [r3, #0]
	  speed = 300;
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <USART1_IRQHandler+0x124>)
 8002fee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ff2:	601a      	str	r2, [r3, #0]
	  break;
 8002ff4:	e01f      	b.n	8003036 <USART1_IRQHandler+0x106>

  //select

  case 0x20:
	  started = 0;
 8002ff6:	4b18      	ldr	r3, [pc, #96]	; (8003058 <USART1_IRQHandler+0x128>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
	  set_throttle(htim3, htim4, 0);
 8002ffc:	4e17      	ldr	r6, [pc, #92]	; (800305c <USART1_IRQHandler+0x12c>)
 8002ffe:	2300      	movs	r3, #0
 8003000:	9322      	str	r3, [sp, #136]	; 0x88
 8003002:	4a17      	ldr	r2, [pc, #92]	; (8003060 <USART1_IRQHandler+0x130>)
 8003004:	ab0f      	add	r3, sp, #60	; 0x3c
 8003006:	4611      	mov	r1, r2
 8003008:	224c      	movs	r2, #76	; 0x4c
 800300a:	4618      	mov	r0, r3
 800300c:	f008 f879 	bl	800b102 <memcpy>
 8003010:	466d      	mov	r5, sp
 8003012:	f106 0410 	add.w	r4, r6, #16
 8003016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003018:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800301a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800301c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800301e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003022:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003026:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800302a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800302e:	f7ff fa21 	bl	8002474 <set_throttle>
	  break;
 8003032:	e000      	b.n	8003036 <USART1_IRQHandler+0x106>
  //A
 // case 0x80: break;

  //B
 // case 0x40: break;
  default: break;
 8003034:	bf00      	nop



  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003036:	480b      	ldr	r0, [pc, #44]	; (8003064 <USART1_IRQHandler+0x134>)
 8003038:	f005 fa6a 	bl	8008510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, buttonRec, 1);
 800303c:	2201      	movs	r2, #1
 800303e:	4904      	ldr	r1, [pc, #16]	; (8003050 <USART1_IRQHandler+0x120>)
 8003040:	4808      	ldr	r0, [pc, #32]	; (8003064 <USART1_IRQHandler+0x134>)
 8003042:	f005 fa19 	bl	8008478 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	3704      	adds	r7, #4
 800304a:	46bd      	mov	sp, r7
 800304c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800304e:	bf00      	nop
 8003050:	20000680 	.word	0x20000680
 8003054:	20000648 	.word	0x20000648
 8003058:	2000064c 	.word	0x2000064c
 800305c:	200004c8 	.word	0x200004c8
 8003060:	20000514 	.word	0x20000514
 8003064:	20000308 	.word	0x20000308

08003068 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
//	static char mode = 0;
//
//	if (!mode) {
//		  mode = 1;
//		  HAL_UART_Receive_IT(&huart3, recvBuf, 20);
	  HAL_UART_Transmit(&huart3, getBlocks, 6, 1000);
 800306e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003072:	2206      	movs	r2, #6
 8003074:	4912      	ldr	r1, [pc, #72]	; (80030c0 <USART3_IRQHandler+0x58>)
 8003076:	4813      	ldr	r0, [pc, #76]	; (80030c4 <USART3_IRQHandler+0x5c>)
 8003078:	f005 f8a6 	bl	80081c8 <HAL_UART_Transmit>
	 HAL_UART_Receive(&huart3, recvBuf, 20,1000);
 800307c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003080:	2214      	movs	r2, #20
 8003082:	4911      	ldr	r1, [pc, #68]	; (80030c8 <USART3_IRQHandler+0x60>)
 8003084:	480f      	ldr	r0, [pc, #60]	; (80030c4 <USART3_IRQHandler+0x5c>)
 8003086:	f005 f92e 	bl	80082e6 <HAL_UART_Receive>

	 x = (((uint16_t)(recvBuf[9]) << 8) + recvBuf[8]);
 800308a:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <USART3_IRQHandler+0x60>)
 800308c:	7a5b      	ldrb	r3, [r3, #9]
 800308e:	b29b      	uxth	r3, r3
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	b29a      	uxth	r2, r3
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <USART3_IRQHandler+0x60>)
 8003096:	7a1b      	ldrb	r3, [r3, #8]
 8003098:	b29b      	uxth	r3, r3
 800309a:	4413      	add	r3, r2
 800309c:	b29a      	uxth	r2, r3
 800309e:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <USART3_IRQHandler+0x64>)
 80030a0:	801a      	strh	r2, [r3, #0]
	 uint16_t b = x;
 80030a2:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <USART3_IRQHandler+0x64>)
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	80fb      	strh	r3, [r7, #6]
		  //HAL_UART_Transmit(&huart3, getBlocks, 6, 1000);
//	  	  HAL_UART_IRQHandler(&huart3);
//	  	  return;
//	    }
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80030a8:	4806      	ldr	r0, [pc, #24]	; (80030c4 <USART3_IRQHandler+0x5c>)
 80030aa:	f005 fa31 	bl	8008510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, recvBuf, 20);
 80030ae:	2214      	movs	r2, #20
 80030b0:	4905      	ldr	r1, [pc, #20]	; (80030c8 <USART3_IRQHandler+0x60>)
 80030b2:	4804      	ldr	r0, [pc, #16]	; (80030c4 <USART3_IRQHandler+0x5c>)
 80030b4:	f005 f9e0 	bl	8008478 <HAL_UART_Receive_IT>

  /* USER CODE END USART3_IRQn 1 */
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20000000 	.word	0x20000000
 80030c4:	2000039c 	.word	0x2000039c
 80030c8:	20000660 	.word	0x20000660
 80030cc:	20000644 	.word	0x20000644

080030d0 <TIM8_BRK_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt.
  */
void TIM8_BRK_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_IRQn 0 */

  /* USER CODE END TIM8_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80030d4:	4802      	ldr	r0, [pc, #8]	; (80030e0 <TIM8_BRK_IRQHandler+0x10>)
 80030d6:	f003 fe7f 	bl	8006dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_IRQn 1 */

  /* USER CODE END TIM8_BRK_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	200005ac 	.word	0x200005ac

080030e4 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80030e8:	4802      	ldr	r0, [pc, #8]	; (80030f4 <TIM8_UP_IRQHandler+0x10>)
 80030ea:	f003 fe75 	bl	8006dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	200005ac 	.word	0x200005ac

080030f8 <TIM8_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts.
  */
void TIM8_TRG_COM_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80030fc:	4802      	ldr	r0, [pc, #8]	; (8003108 <TIM8_TRG_COM_IRQHandler+0x10>)
 80030fe:	f003 fe6b 	bl	8006dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	200005ac 	.word	0x200005ac

0800310c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */
	static int rising_edge = 0;
		extern int ePulse2;
		++rising_edge;
 8003110:	4b15      	ldr	r3, [pc, #84]	; (8003168 <TIM8_CC_IRQHandler+0x5c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3301      	adds	r3, #1
 8003116:	4a14      	ldr	r2, [pc, #80]	; (8003168 <TIM8_CC_IRQHandler+0x5c>)
 8003118:	6013      	str	r3, [r2, #0]
		rising_edge %= 2;
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <TIM8_CC_IRQHandler+0x5c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	bfb8      	it	lt
 8003126:	425b      	neglt	r3, r3
 8003128:	4a0f      	ldr	r2, [pc, #60]	; (8003168 <TIM8_CC_IRQHandler+0x5c>)
 800312a:	6013      	str	r3, [r2, #0]

		if (rising_edge == 1) {
 800312c:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <TIM8_CC_IRQHandler+0x5c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d109      	bne.n	8003148 <TIM8_CC_IRQHandler+0x3c>
			TIM8->CNT = 0;
 8003134:	4b0d      	ldr	r3, [pc, #52]	; (800316c <TIM8_CC_IRQHandler+0x60>)
 8003136:	2200      	movs	r2, #0
 8003138:	625a      	str	r2, [r3, #36]	; 0x24
			TIM8->CCER |= 0b10;
 800313a:	4b0c      	ldr	r3, [pc, #48]	; (800316c <TIM8_CC_IRQHandler+0x60>)
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	4a0b      	ldr	r2, [pc, #44]	; (800316c <TIM8_CC_IRQHandler+0x60>)
 8003140:	f043 0302 	orr.w	r3, r3, #2
 8003144:	6213      	str	r3, [r2, #32]
 8003146:	e00a      	b.n	800315e <TIM8_CC_IRQHandler+0x52>
		}

		else {
			ePulse2 = TIM8->CNT;
 8003148:	4b08      	ldr	r3, [pc, #32]	; (800316c <TIM8_CC_IRQHandler+0x60>)
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	461a      	mov	r2, r3
 800314e:	4b08      	ldr	r3, [pc, #32]	; (8003170 <TIM8_CC_IRQHandler+0x64>)
 8003150:	601a      	str	r2, [r3, #0]
			TIM8->CCER &= 0b01;
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <TIM8_CC_IRQHandler+0x60>)
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	4a05      	ldr	r2, [pc, #20]	; (800316c <TIM8_CC_IRQHandler+0x60>)
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	6213      	str	r3, [r2, #32]
//			HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);

		}

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800315e:	4805      	ldr	r0, [pc, #20]	; (8003174 <TIM8_CC_IRQHandler+0x68>)
 8003160:	f003 fe3a 	bl	8006dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */


  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003164:	bf00      	nop
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20000690 	.word	0x20000690
 800316c:	40013400 	.word	0x40013400
 8003170:	20000658 	.word	0x20000658
 8003174:	200005ac 	.word	0x200005ac

08003178 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	static int rising_edge = 0;
	extern int ePulse1;
	++rising_edge;
 800317c:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <TIM5_IRQHandler+0x5c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3301      	adds	r3, #1
 8003182:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <TIM5_IRQHandler+0x5c>)
 8003184:	6013      	str	r3, [r2, #0]
	rising_edge %= 2;
 8003186:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <TIM5_IRQHandler+0x5c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	bfb8      	it	lt
 8003192:	425b      	neglt	r3, r3
 8003194:	4a0f      	ldr	r2, [pc, #60]	; (80031d4 <TIM5_IRQHandler+0x5c>)
 8003196:	6013      	str	r3, [r2, #0]

	if (rising_edge == 1) {
 8003198:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <TIM5_IRQHandler+0x5c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d109      	bne.n	80031b4 <TIM5_IRQHandler+0x3c>
		TIM5->CNT = 0;
 80031a0:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <TIM5_IRQHandler+0x60>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24
		TIM5->CCER |= 0b10;
 80031a6:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <TIM5_IRQHandler+0x60>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	4a0b      	ldr	r2, [pc, #44]	; (80031d8 <TIM5_IRQHandler+0x60>)
 80031ac:	f043 0302 	orr.w	r3, r3, #2
 80031b0:	6213      	str	r3, [r2, #32]
 80031b2:	e00a      	b.n	80031ca <TIM5_IRQHandler+0x52>
	}

	else {
		ePulse1 = TIM5->CNT;
 80031b4:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <TIM5_IRQHandler+0x60>)
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b08      	ldr	r3, [pc, #32]	; (80031dc <TIM5_IRQHandler+0x64>)
 80031bc:	601a      	str	r2, [r3, #0]
		TIM5->CCER &= 0b01;
 80031be:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <TIM5_IRQHandler+0x60>)
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	4a05      	ldr	r2, [pc, #20]	; (80031d8 <TIM5_IRQHandler+0x60>)
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	6213      	str	r3, [r2, #32]
	}



  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80031ca:	4805      	ldr	r0, [pc, #20]	; (80031e0 <TIM5_IRQHandler+0x68>)
 80031cc:	f003 fe04 	bl	8006dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */


  /* USER CODE END TIM5_IRQn 1 */
}
 80031d0:	bf00      	nop
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20000694 	.word	0x20000694
 80031d8:	40000c00 	.word	0x40000c00
 80031dc:	20000654 	.word	0x20000654
 80031e0:	20000560 	.word	0x20000560

080031e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return 1;
 80031e8:	2301      	movs	r3, #1
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <_kill>:

int _kill(int pid, int sig)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031fe:	f007 ff53 	bl	800b0a8 <__errno>
 8003202:	4603      	mov	r3, r0
 8003204:	2216      	movs	r2, #22
 8003206:	601a      	str	r2, [r3, #0]
  return -1;
 8003208:	f04f 33ff 	mov.w	r3, #4294967295
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <_exit>:

void _exit (int status)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800321c:	f04f 31ff 	mov.w	r1, #4294967295
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff ffe7 	bl	80031f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003226:	e7fe      	b.n	8003226 <_exit+0x12>

08003228 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	e00a      	b.n	8003250 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800323a:	f3af 8000 	nop.w
 800323e:	4601      	mov	r1, r0
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	60ba      	str	r2, [r7, #8]
 8003246:	b2ca      	uxtb	r2, r1
 8003248:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	3301      	adds	r3, #1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	429a      	cmp	r2, r3
 8003256:	dbf0      	blt.n	800323a <_read+0x12>
  }

  return len;
 8003258:	687b      	ldr	r3, [r7, #4]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b086      	sub	sp, #24
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	e009      	b.n	8003288 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	60ba      	str	r2, [r7, #8]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7fe ffd3 	bl	8002228 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	3301      	adds	r3, #1
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	429a      	cmp	r2, r3
 800328e:	dbf1      	blt.n	8003274 <_write+0x12>
  }
  return len;
 8003290:	687b      	ldr	r3, [r7, #4]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <_close>:

int _close(int file)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032c2:	605a      	str	r2, [r3, #4]
  return 0;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <_isatty>:

int _isatty(int file)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032da:	2301      	movs	r3, #1
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800330c:	4a14      	ldr	r2, [pc, #80]	; (8003360 <_sbrk+0x5c>)
 800330e:	4b15      	ldr	r3, [pc, #84]	; (8003364 <_sbrk+0x60>)
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003318:	4b13      	ldr	r3, [pc, #76]	; (8003368 <_sbrk+0x64>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <_sbrk+0x64>)
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <_sbrk+0x68>)
 8003324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <_sbrk+0x64>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	429a      	cmp	r2, r3
 8003332:	d207      	bcs.n	8003344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003334:	f007 feb8 	bl	800b0a8 <__errno>
 8003338:	4603      	mov	r3, r0
 800333a:	220c      	movs	r2, #12
 800333c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295
 8003342:	e009      	b.n	8003358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003344:	4b08      	ldr	r3, [pc, #32]	; (8003368 <_sbrk+0x64>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800334a:	4b07      	ldr	r3, [pc, #28]	; (8003368 <_sbrk+0x64>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	4a05      	ldr	r2, [pc, #20]	; (8003368 <_sbrk+0x64>)
 8003354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003356:	68fb      	ldr	r3, [r7, #12]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	200a0000 	.word	0x200a0000
 8003364:	00000400 	.word	0x00000400
 8003368:	20000698 	.word	0x20000698
 800336c:	200007f0 	.word	0x200007f0

08003370 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <SystemInit+0x20>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	4a05      	ldr	r2, [pc, #20]	; (8003390 <SystemInit+0x20>)
 800337c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003394:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003398:	f7ff ffea 	bl	8003370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800339c:	480c      	ldr	r0, [pc, #48]	; (80033d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800339e:	490d      	ldr	r1, [pc, #52]	; (80033d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033a0:	4a0d      	ldr	r2, [pc, #52]	; (80033d8 <LoopForever+0xe>)
  movs r3, #0
 80033a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033a4:	e002      	b.n	80033ac <LoopCopyDataInit>

080033a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033aa:	3304      	adds	r3, #4

080033ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033b0:	d3f9      	bcc.n	80033a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033b2:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80033b4:	4c0a      	ldr	r4, [pc, #40]	; (80033e0 <LoopForever+0x16>)
  movs r3, #0
 80033b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033b8:	e001      	b.n	80033be <LoopFillZerobss>

080033ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033bc:	3204      	adds	r2, #4

080033be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033c0:	d3fb      	bcc.n	80033ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033c2:	f007 fe77 	bl	800b0b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033c6:	f7fd fd85 	bl	8000ed4 <main>

080033ca <LoopForever>:

LoopForever:
    b LoopForever
 80033ca:	e7fe      	b.n	80033ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80033cc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80033d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033d4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80033d8:	0800d2bc 	.word	0x0800d2bc
  ldr r2, =_sbss
 80033dc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80033e0:	200007ec 	.word	0x200007ec

080033e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033e4:	e7fe      	b.n	80033e4 <ADC1_IRQHandler>

080033e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033f0:	2003      	movs	r0, #3
 80033f2:	f001 f843 	bl	800447c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033f6:	2000      	movs	r0, #0
 80033f8:	f000 f80e 	bl	8003418 <HAL_InitTick>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	71fb      	strb	r3, [r7, #7]
 8003406:	e001      	b.n	800340c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003408:	f7ff f84e 	bl	80024a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800340c:	79fb      	ldrb	r3, [r7, #7]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003424:	4b17      	ldr	r3, [pc, #92]	; (8003484 <HAL_InitTick+0x6c>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d023      	beq.n	8003474 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800342c:	4b16      	ldr	r3, [pc, #88]	; (8003488 <HAL_InitTick+0x70>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4b14      	ldr	r3, [pc, #80]	; (8003484 <HAL_InitTick+0x6c>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	4619      	mov	r1, r3
 8003436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800343a:	fbb3 f3f1 	udiv	r3, r3, r1
 800343e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003442:	4618      	mov	r0, r3
 8003444:	f001 f84f 	bl	80044e6 <HAL_SYSTICK_Config>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10f      	bne.n	800346e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b0f      	cmp	r3, #15
 8003452:	d809      	bhi.n	8003468 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003454:	2200      	movs	r2, #0
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	f04f 30ff 	mov.w	r0, #4294967295
 800345c:	f001 f819 	bl	8004492 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003460:	4a0a      	ldr	r2, [pc, #40]	; (800348c <HAL_InitTick+0x74>)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e007      	b.n	8003478 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
 800346c:	e004      	b.n	8003478 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]
 8003472:	e001      	b.n	8003478 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003478:	7bfb      	ldrb	r3, [r7, #15]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000010 	.word	0x20000010
 8003488:	20000008 	.word	0x20000008
 800348c:	2000000c 	.word	0x2000000c

08003490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_IncTick+0x20>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_IncTick+0x24>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4413      	add	r3, r2
 80034a0:	4a04      	ldr	r2, [pc, #16]	; (80034b4 <HAL_IncTick+0x24>)
 80034a2:	6013      	str	r3, [r2, #0]
}
 80034a4:	bf00      	nop
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	20000010 	.word	0x20000010
 80034b4:	2000069c 	.word	0x2000069c

080034b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return uwTick;
 80034bc:	4b03      	ldr	r3, [pc, #12]	; (80034cc <HAL_GetTick+0x14>)
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	2000069c 	.word	0x2000069c

080034d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034d8:	f7ff ffee 	bl	80034b8 <HAL_GetTick>
 80034dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e8:	d005      	beq.n	80034f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80034ea:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <HAL_Delay+0x44>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4413      	add	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034f6:	bf00      	nop
 80034f8:	f7ff ffde 	bl	80034b8 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	429a      	cmp	r2, r3
 8003506:	d8f7      	bhi.n	80034f8 <HAL_Delay+0x28>
  {
  }
}
 8003508:	bf00      	nop
 800350a:	bf00      	nop
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000010 	.word	0x20000010

08003518 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	609a      	str	r2, [r3, #8]
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	609a      	str	r2, [r3, #8]
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	3360      	adds	r3, #96	; 0x60
 8003592:	461a      	mov	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <LL_ADC_SetOffset+0x44>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80035b8:	bf00      	nop
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	03fff000 	.word	0x03fff000

080035c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3360      	adds	r3, #96	; 0x60
 80035d6:	461a      	mov	r2, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	3360      	adds	r3, #96	; 0x60
 8003604:	461a      	mov	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	431a      	orrs	r2, r3
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	615a      	str	r2, [r3, #20]
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	3330      	adds	r3, #48	; 0x30
 8003660:	461a      	mov	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	0a1b      	lsrs	r3, r3, #8
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	f003 030c 	and.w	r3, r3, #12
 800366c:	4413      	add	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 031f 	and.w	r3, r3, #31
 800367a:	211f      	movs	r1, #31
 800367c:	fa01 f303 	lsl.w	r3, r1, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	401a      	ands	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	0e9b      	lsrs	r3, r3, #26
 8003688:	f003 011f 	and.w	r1, r3, #31
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	431a      	orrs	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800369c:	bf00      	nop
 800369e:	371c      	adds	r7, #28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	3314      	adds	r3, #20
 80036b8:	461a      	mov	r2, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	0e5b      	lsrs	r3, r3, #25
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	4413      	add	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	0d1b      	lsrs	r3, r3, #20
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	2107      	movs	r1, #7
 80036d6:	fa01 f303 	lsl.w	r3, r1, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	401a      	ands	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	0d1b      	lsrs	r3, r3, #20
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ec:	431a      	orrs	r2, r3
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003718:	43db      	mvns	r3, r3
 800371a:	401a      	ands	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f003 0318 	and.w	r3, r3, #24
 8003722:	4908      	ldr	r1, [pc, #32]	; (8003744 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003724:	40d9      	lsrs	r1, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	400b      	ands	r3, r1
 800372a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372e:	431a      	orrs	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	0007ffff 	.word	0x0007ffff

08003748 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003758:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6093      	str	r3, [r2, #8]
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800377c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003780:	d101      	bne.n	8003786 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80037a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037d0:	d101      	bne.n	80037d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <LL_ADC_IsEnabled+0x18>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <LL_ADC_IsEnabled+0x1a>
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b04      	cmp	r3, #4
 800381c:	d101      	bne.n	8003822 <LL_ADC_REG_IsConversionOngoing+0x18>
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b08      	cmp	r3, #8
 8003842:	d101      	bne.n	8003848 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
	...

08003858 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e129      	b.n	8003ac6 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	2b00      	cmp	r3, #0
 800387e:	d109      	bne.n	8003894 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7fe fe35 	bl	80024f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff ff67 	bl	800376c <LL_ADC_IsDeepPowerDownEnabled>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d004      	beq.n	80038ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff ff4d 	bl	8003748 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff ff82 	bl	80037bc <LL_ADC_IsInternalRegulatorEnabled>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d115      	bne.n	80038ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff ff66 	bl	8003794 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038c8:	4b81      	ldr	r3, [pc, #516]	; (8003ad0 <HAL_ADC_Init+0x278>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	099b      	lsrs	r3, r3, #6
 80038ce:	4a81      	ldr	r2, [pc, #516]	; (8003ad4 <HAL_ADC_Init+0x27c>)
 80038d0:	fba2 2303 	umull	r2, r3, r2, r3
 80038d4:	099b      	lsrs	r3, r3, #6
 80038d6:	3301      	adds	r3, #1
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80038dc:	e002      	b.n	80038e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f9      	bne.n	80038de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff ff64 	bl	80037bc <LL_ADC_IsInternalRegulatorEnabled>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10d      	bne.n	8003916 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fe:	f043 0210 	orr.w	r2, r3, #16
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390a:	f043 0201 	orr.w	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff ff75 	bl	800380a <LL_ADC_REG_IsConversionOngoing>
 8003920:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	f040 80c2 	bne.w	8003ab4 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f040 80be 	bne.w	8003ab4 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003940:	f043 0202 	orr.w	r2, r3, #2
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff ff49 	bl	80037e4 <LL_ADC_IsEnabled>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10b      	bne.n	8003970 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003958:	485f      	ldr	r0, [pc, #380]	; (8003ad8 <HAL_ADC_Init+0x280>)
 800395a:	f7ff ff43 	bl	80037e4 <LL_ADC_IsEnabled>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d105      	bne.n	8003970 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	4619      	mov	r1, r3
 800396a:	485c      	ldr	r0, [pc, #368]	; (8003adc <HAL_ADC_Init+0x284>)
 800396c:	f7ff fdd4 	bl	8003518 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	7e5b      	ldrb	r3, [r3, #25]
 8003974:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800397a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003980:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003986:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800398e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003990:	4313      	orrs	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d106      	bne.n	80039ac <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	3b01      	subs	r3, #1
 80039a4:	045b      	lsls	r3, r3, #17
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d009      	beq.n	80039c8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	4b44      	ldr	r3, [pc, #272]	; (8003ae0 <HAL_ADC_Init+0x288>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	69b9      	ldr	r1, [r7, #24]
 80039d8:	430b      	orrs	r3, r1
 80039da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff25 	bl	8003830 <LL_ADC_INJ_IsConversionOngoing>
 80039e6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d140      	bne.n	8003a70 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d13d      	bne.n	8003a70 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	7e1b      	ldrb	r3, [r3, #24]
 80039fc:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80039fe:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a06:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a16:	f023 0306 	bic.w	r3, r3, #6
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6812      	ldr	r2, [r2, #0]
 8003a1e:	69b9      	ldr	r1, [r7, #24]
 8003a20:	430b      	orrs	r3, r1
 8003a22:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d118      	bne.n	8003a60 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003a38:	f023 0304 	bic.w	r3, r3, #4
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a44:	4311      	orrs	r1, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a4a:	4311      	orrs	r1, r2
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a50:	430a      	orrs	r2, r1
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0201 	orr.w	r2, r2, #1
 8003a5c:	611a      	str	r2, [r3, #16]
 8003a5e:	e007      	b.n	8003a70 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d10c      	bne.n	8003a92 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	f023 010f 	bic.w	r1, r3, #15
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	1e5a      	subs	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a90:	e007      	b.n	8003aa2 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 020f 	bic.w	r2, r2, #15
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa6:	f023 0303 	bic.w	r3, r3, #3
 8003aaa:	f043 0201 	orr.w	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	659a      	str	r2, [r3, #88]	; 0x58
 8003ab2:	e007      	b.n	8003ac4 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	f043 0210 	orr.w	r2, r3, #16
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ac4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000008 	.word	0x20000008
 8003ad4:	053e2d63 	.word	0x053e2d63
 8003ad8:	50040000 	.word	0x50040000
 8003adc:	50040300 	.word	0x50040300
 8003ae0:	fff0c007 	.word	0xfff0c007

08003ae4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b0b6      	sub	sp, #216	; 0xd8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x22>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e3d5      	b.n	80042b2 <HAL_ADC_ConfigChannel+0x7ce>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff fe79 	bl	800380a <LL_ADC_REG_IsConversionOngoing>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f040 83ba 	bne.w	8004294 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b05      	cmp	r3, #5
 8003b2e:	d824      	bhi.n	8003b7a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	3b02      	subs	r3, #2
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d81b      	bhi.n	8003b72 <HAL_ADC_ConfigChannel+0x8e>
 8003b3a:	a201      	add	r2, pc, #4	; (adr r2, 8003b40 <HAL_ADC_ConfigChannel+0x5c>)
 8003b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b40:	08003b51 	.word	0x08003b51
 8003b44:	08003b59 	.word	0x08003b59
 8003b48:	08003b61 	.word	0x08003b61
 8003b4c:	08003b69 	.word	0x08003b69
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003b50:	230c      	movs	r3, #12
 8003b52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003b56:	e010      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003b58:	2312      	movs	r3, #18
 8003b5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003b5e:	e00c      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003b60:	2318      	movs	r3, #24
 8003b62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003b66:	e008      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003b70:	e003      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003b72:	2306      	movs	r3, #6
 8003b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003b78:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003b88:	f7ff fd62 	bl	8003650 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fe3a 	bl	800380a <LL_ADC_REG_IsConversionOngoing>
 8003b96:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fe46 	bl	8003830 <LL_ADC_INJ_IsConversionOngoing>
 8003ba4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ba8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f040 81bf 	bne.w	8003f30 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f040 81ba 	bne.w	8003f30 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bc4:	d10f      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	f7ff fd69 	bl	80036a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff fd23 	bl	800362a <LL_ADC_SetSamplingTimeCommonConfig>
 8003be4:	e00e      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6819      	ldr	r1, [r3, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f7ff fd58 	bl	80036a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fd13 	bl	800362a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	695a      	ldr	r2, [r3, #20]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	08db      	lsrs	r3, r3, #3
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d00a      	beq.n	8003c3c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	6919      	ldr	r1, [r3, #16]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c36:	f7ff fca3 	bl	8003580 <LL_ADC_SetOffset>
 8003c3a:	e179      	b.n	8003f30 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2100      	movs	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff fcc0 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10a      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x184>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2100      	movs	r1, #0
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff fcb5 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	0e9b      	lsrs	r3, r3, #26
 8003c62:	f003 021f 	and.w	r2, r3, #31
 8003c66:	e01e      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x1c2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff fcaa 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c7e:	fa93 f3a3 	rbit	r3, r3
 8003c82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003c96:	2320      	movs	r3, #32
 8003c98:	e004      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003c9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d105      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x1da>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	0e9b      	lsrs	r3, r3, #26
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	e018      	b.n	8003cf0 <HAL_ADC_ConfigChannel+0x20c>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cca:	fa93 f3a3 	rbit	r3, r3
 8003cce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003cd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003cda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003ce2:	2320      	movs	r3, #32
 8003ce4:	e004      	b.n	8003cf0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003ce6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003cea:	fab3 f383 	clz	r3, r3
 8003cee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d106      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fc79 	bl	80035f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2101      	movs	r1, #1
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff fc5d 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10a      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x24a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff fc52 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003d24:	4603      	mov	r3, r0
 8003d26:	0e9b      	lsrs	r3, r3, #26
 8003d28:	f003 021f 	and.w	r2, r3, #31
 8003d2c:	e01e      	b.n	8003d6c <HAL_ADC_ConfigChannel+0x288>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2101      	movs	r1, #1
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fc47 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d44:	fa93 f3a3 	rbit	r3, r3
 8003d48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003d54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003d5c:	2320      	movs	r3, #32
 8003d5e:	e004      	b.n	8003d6a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003d60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d64:	fab3 f383 	clz	r3, r3
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d105      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x2a0>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	0e9b      	lsrs	r3, r3, #26
 8003d7e:	f003 031f 	and.w	r3, r3, #31
 8003d82:	e018      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x2d2>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d90:	fa93 f3a3 	rbit	r3, r3
 8003d94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003d98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003da0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003da8:	2320      	movs	r3, #32
 8003daa:	e004      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003db0:	fab3 f383 	clz	r3, r3
 8003db4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d106      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff fc16 	bl	80035f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2102      	movs	r1, #2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fbfa 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x310>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2102      	movs	r1, #2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff fbef 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003dea:	4603      	mov	r3, r0
 8003dec:	0e9b      	lsrs	r3, r3, #26
 8003dee:	f003 021f 	and.w	r2, r3, #31
 8003df2:	e01e      	b.n	8003e32 <HAL_ADC_ConfigChannel+0x34e>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2102      	movs	r1, #2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff fbe4 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e0a:	fa93 f3a3 	rbit	r3, r3
 8003e0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003e12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003e1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003e22:	2320      	movs	r3, #32
 8003e24:	e004      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e2a:	fab3 f383 	clz	r3, r3
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d105      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0x366>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	0e9b      	lsrs	r3, r3, #26
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	e014      	b.n	8003e74 <HAL_ADC_ConfigChannel+0x390>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e52:	fa93 f3a3 	rbit	r3, r3
 8003e56:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003e5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003e66:	2320      	movs	r3, #32
 8003e68:	e004      	b.n	8003e74 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003e6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e6e:	fab3 f383 	clz	r3, r3
 8003e72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d106      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2102      	movs	r1, #2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff fbb7 	bl	80035f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2103      	movs	r1, #3
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fb9b 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <HAL_ADC_ConfigChannel+0x3ce>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2103      	movs	r1, #3
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff fb90 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	0e9b      	lsrs	r3, r3, #26
 8003eac:	f003 021f 	and.w	r2, r3, #31
 8003eb0:	e017      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x3fe>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2103      	movs	r1, #3
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff fb85 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ec4:	fa93 f3a3 	rbit	r3, r3
 8003ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ecc:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003ed4:	2320      	movs	r3, #32
 8003ed6:	e003      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eda:	fab3 f383 	clz	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d105      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x416>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	0e9b      	lsrs	r3, r3, #26
 8003ef4:	f003 031f 	and.w	r3, r3, #31
 8003ef8:	e011      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x43a>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f02:	fa93 f3a3 	rbit	r3, r3
 8003f06:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003f08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f0a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003f0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003f12:	2320      	movs	r3, #32
 8003f14:	e003      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f18:	fab3 f383 	clz	r3, r3
 8003f1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d106      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2200      	movs	r2, #0
 8003f28:	2103      	movs	r1, #3
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff fb62 	bl	80035f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff fc55 	bl	80037e4 <LL_ADC_IsEnabled>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f040 813f 	bne.w	80041c0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	6819      	ldr	r1, [r3, #0]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f7ff fbd6 	bl	8003700 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4a8e      	ldr	r2, [pc, #568]	; (8004194 <HAL_ADC_ConfigChannel+0x6b0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	f040 8130 	bne.w	80041c0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10b      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x4a4>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	0e9b      	lsrs	r3, r3, #26
 8003f76:	3301      	adds	r3, #1
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	2b09      	cmp	r3, #9
 8003f7e:	bf94      	ite	ls
 8003f80:	2301      	movls	r3, #1
 8003f82:	2300      	movhi	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	e019      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x4d8>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f90:	fa93 f3a3 	rbit	r3, r3
 8003f94:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f98:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	e003      	b.n	8003fac <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fa6:	fab3 f383 	clz	r3, r3
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	3301      	adds	r3, #1
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	2b09      	cmp	r3, #9
 8003fb4:	bf94      	ite	ls
 8003fb6:	2301      	movls	r3, #1
 8003fb8:	2300      	movhi	r3, #0
 8003fba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d079      	beq.n	80040b4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d107      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x4f8>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	0e9b      	lsrs	r3, r3, #26
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	069b      	lsls	r3, r3, #26
 8003fd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fda:	e015      	b.n	8004008 <HAL_ADC_ConfigChannel+0x524>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe4:	fa93 f3a3 	rbit	r3, r3
 8003fe8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fec:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003ff4:	2320      	movs	r3, #32
 8003ff6:	e003      	b.n	8004000 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ffa:	fab3 f383 	clz	r3, r3
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	3301      	adds	r3, #1
 8004002:	069b      	lsls	r3, r3, #26
 8004004:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004010:	2b00      	cmp	r3, #0
 8004012:	d109      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x544>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	0e9b      	lsrs	r3, r3, #26
 800401a:	3301      	adds	r3, #1
 800401c:	f003 031f 	and.w	r3, r3, #31
 8004020:	2101      	movs	r1, #1
 8004022:	fa01 f303 	lsl.w	r3, r1, r3
 8004026:	e017      	b.n	8004058 <HAL_ADC_ConfigChannel+0x574>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004030:	fa93 f3a3 	rbit	r3, r3
 8004034:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004038:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800403a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004040:	2320      	movs	r3, #32
 8004042:	e003      	b.n	800404c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004046:	fab3 f383 	clz	r3, r3
 800404a:	b2db      	uxtb	r3, r3
 800404c:	3301      	adds	r3, #1
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	2101      	movs	r1, #1
 8004054:	fa01 f303 	lsl.w	r3, r1, r3
 8004058:	ea42 0103 	orr.w	r1, r2, r3
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <HAL_ADC_ConfigChannel+0x59a>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	0e9b      	lsrs	r3, r3, #26
 800406e:	3301      	adds	r3, #1
 8004070:	f003 021f 	and.w	r2, r3, #31
 8004074:	4613      	mov	r3, r2
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	4413      	add	r3, r2
 800407a:	051b      	lsls	r3, r3, #20
 800407c:	e018      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x5cc>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004086:	fa93 f3a3 	rbit	r3, r3
 800408a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004096:	2320      	movs	r3, #32
 8004098:	e003      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409c:	fab3 f383 	clz	r3, r3
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	3301      	adds	r3, #1
 80040a4:	f003 021f 	and.w	r2, r3, #31
 80040a8:	4613      	mov	r3, r2
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	4413      	add	r3, r2
 80040ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040b0:	430b      	orrs	r3, r1
 80040b2:	e080      	b.n	80041b6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d107      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x5ec>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	0e9b      	lsrs	r3, r3, #26
 80040c6:	3301      	adds	r3, #1
 80040c8:	069b      	lsls	r3, r3, #26
 80040ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040ce:	e015      	b.n	80040fc <HAL_ADC_ConfigChannel+0x618>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d8:	fa93 f3a3 	rbit	r3, r3
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80040e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80040e8:	2320      	movs	r3, #32
 80040ea:	e003      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	fab3 f383 	clz	r3, r3
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	3301      	adds	r3, #1
 80040f6:	069b      	lsls	r3, r3, #26
 80040f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004104:	2b00      	cmp	r3, #0
 8004106:	d109      	bne.n	800411c <HAL_ADC_ConfigChannel+0x638>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	0e9b      	lsrs	r3, r3, #26
 800410e:	3301      	adds	r3, #1
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	2101      	movs	r1, #1
 8004116:	fa01 f303 	lsl.w	r3, r1, r3
 800411a:	e017      	b.n	800414c <HAL_ADC_ConfigChannel+0x668>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	fa93 f3a3 	rbit	r3, r3
 8004128:	61bb      	str	r3, [r7, #24]
  return result;
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004134:	2320      	movs	r3, #32
 8004136:	e003      	b.n	8004140 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	3301      	adds	r3, #1
 8004142:	f003 031f 	and.w	r3, r3, #31
 8004146:	2101      	movs	r1, #1
 8004148:	fa01 f303 	lsl.w	r3, r1, r3
 800414c:	ea42 0103 	orr.w	r1, r2, r3
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10d      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x694>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	0e9b      	lsrs	r3, r3, #26
 8004162:	3301      	adds	r3, #1
 8004164:	f003 021f 	and.w	r2, r3, #31
 8004168:	4613      	mov	r3, r2
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	4413      	add	r3, r2
 800416e:	3b1e      	subs	r3, #30
 8004170:	051b      	lsls	r3, r3, #20
 8004172:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004176:	e01d      	b.n	80041b4 <HAL_ADC_ConfigChannel+0x6d0>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	fa93 f3a3 	rbit	r3, r3
 8004184:	60fb      	str	r3, [r7, #12]
  return result;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d103      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004190:	2320      	movs	r3, #32
 8004192:	e005      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x6bc>
 8004194:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	fab3 f383 	clz	r3, r3
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	3301      	adds	r3, #1
 80041a2:	f003 021f 	and.w	r2, r3, #31
 80041a6:	4613      	mov	r3, r2
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	4413      	add	r3, r2
 80041ac:	3b1e      	subs	r3, #30
 80041ae:	051b      	lsls	r3, r3, #20
 80041b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041ba:	4619      	mov	r1, r3
 80041bc:	f7ff fa74 	bl	80036a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	4b3d      	ldr	r3, [pc, #244]	; (80042bc <HAL_ADC_ConfigChannel+0x7d8>)
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d06c      	beq.n	80042a6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041cc:	483c      	ldr	r0, [pc, #240]	; (80042c0 <HAL_ADC_ConfigChannel+0x7dc>)
 80041ce:	f7ff f9c9 	bl	8003564 <LL_ADC_GetCommonPathInternalCh>
 80041d2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a3a      	ldr	r2, [pc, #232]	; (80042c4 <HAL_ADC_ConfigChannel+0x7e0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d127      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d121      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a35      	ldr	r2, [pc, #212]	; (80042c8 <HAL_ADC_ConfigChannel+0x7e4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d157      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041fe:	4619      	mov	r1, r3
 8004200:	482f      	ldr	r0, [pc, #188]	; (80042c0 <HAL_ADC_ConfigChannel+0x7dc>)
 8004202:	f7ff f99c 	bl	800353e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004206:	4b31      	ldr	r3, [pc, #196]	; (80042cc <HAL_ADC_ConfigChannel+0x7e8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	099b      	lsrs	r3, r3, #6
 800420c:	4a30      	ldr	r2, [pc, #192]	; (80042d0 <HAL_ADC_ConfigChannel+0x7ec>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	099b      	lsrs	r3, r3, #6
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	4613      	mov	r3, r2
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004220:	e002      	b.n	8004228 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	3b01      	subs	r3, #1
 8004226:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f9      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800422e:	e03a      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a27      	ldr	r2, [pc, #156]	; (80042d4 <HAL_ADC_ConfigChannel+0x7f0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d113      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800423a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800423e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10d      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1f      	ldr	r2, [pc, #124]	; (80042c8 <HAL_ADC_ConfigChannel+0x7e4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d12a      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004250:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004254:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004258:	4619      	mov	r1, r3
 800425a:	4819      	ldr	r0, [pc, #100]	; (80042c0 <HAL_ADC_ConfigChannel+0x7dc>)
 800425c:	f7ff f96f 	bl	800353e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004260:	e021      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a1c      	ldr	r2, [pc, #112]	; (80042d8 <HAL_ADC_ConfigChannel+0x7f4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d11c      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800426c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d116      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a12      	ldr	r2, [pc, #72]	; (80042c8 <HAL_ADC_ConfigChannel+0x7e4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d111      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004282:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004286:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800428a:	4619      	mov	r1, r3
 800428c:	480c      	ldr	r0, [pc, #48]	; (80042c0 <HAL_ADC_ConfigChannel+0x7dc>)
 800428e:	f7ff f956 	bl	800353e <LL_ADC_SetCommonPathInternalCh>
 8004292:	e008      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004298:	f043 0220 	orr.w	r2, r3, #32
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80042ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	37d8      	adds	r7, #216	; 0xd8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	80080000 	.word	0x80080000
 80042c0:	50040300 	.word	0x50040300
 80042c4:	c7520000 	.word	0xc7520000
 80042c8:	50040000 	.word	0x50040000
 80042cc:	20000008 	.word	0x20000008
 80042d0:	053e2d63 	.word	0x053e2d63
 80042d4:	cb840000 	.word	0xcb840000
 80042d8:	80000001 	.word	0x80000001

080042dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042ec:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <__NVIC_SetPriorityGrouping+0x44>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042f8:	4013      	ands	r3, r2
 80042fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800430c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800430e:	4a04      	ldr	r2, [pc, #16]	; (8004320 <__NVIC_SetPriorityGrouping+0x44>)
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	60d3      	str	r3, [r2, #12]
}
 8004314:	bf00      	nop
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	e000ed00 	.word	0xe000ed00

08004324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004328:	4b04      	ldr	r3, [pc, #16]	; (800433c <__NVIC_GetPriorityGrouping+0x18>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	0a1b      	lsrs	r3, r3, #8
 800432e:	f003 0307 	and.w	r3, r3, #7
}
 8004332:	4618      	mov	r0, r3
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	e000ed00 	.word	0xe000ed00

08004340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800434a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434e:	2b00      	cmp	r3, #0
 8004350:	db0b      	blt.n	800436a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	f003 021f 	and.w	r2, r3, #31
 8004358:	4907      	ldr	r1, [pc, #28]	; (8004378 <__NVIC_EnableIRQ+0x38>)
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	2001      	movs	r0, #1
 8004362:	fa00 f202 	lsl.w	r2, r0, r2
 8004366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	e000e100 	.word	0xe000e100

0800437c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	6039      	str	r1, [r7, #0]
 8004386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438c:	2b00      	cmp	r3, #0
 800438e:	db0a      	blt.n	80043a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	b2da      	uxtb	r2, r3
 8004394:	490c      	ldr	r1, [pc, #48]	; (80043c8 <__NVIC_SetPriority+0x4c>)
 8004396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439a:	0112      	lsls	r2, r2, #4
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	440b      	add	r3, r1
 80043a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043a4:	e00a      	b.n	80043bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	4908      	ldr	r1, [pc, #32]	; (80043cc <__NVIC_SetPriority+0x50>)
 80043ac:	79fb      	ldrb	r3, [r7, #7]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	3b04      	subs	r3, #4
 80043b4:	0112      	lsls	r2, r2, #4
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	440b      	add	r3, r1
 80043ba:	761a      	strb	r2, [r3, #24]
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	e000e100 	.word	0xe000e100
 80043cc:	e000ed00 	.word	0xe000ed00

080043d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b089      	sub	sp, #36	; 0x24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f1c3 0307 	rsb	r3, r3, #7
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	bf28      	it	cs
 80043ee:	2304      	movcs	r3, #4
 80043f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	3304      	adds	r3, #4
 80043f6:	2b06      	cmp	r3, #6
 80043f8:	d902      	bls.n	8004400 <NVIC_EncodePriority+0x30>
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	3b03      	subs	r3, #3
 80043fe:	e000      	b.n	8004402 <NVIC_EncodePriority+0x32>
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004404:	f04f 32ff 	mov.w	r2, #4294967295
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	43da      	mvns	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	401a      	ands	r2, r3
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004418:	f04f 31ff 	mov.w	r1, #4294967295
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	fa01 f303 	lsl.w	r3, r1, r3
 8004422:	43d9      	mvns	r1, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004428:	4313      	orrs	r3, r2
         );
}
 800442a:	4618      	mov	r0, r3
 800442c:	3724      	adds	r7, #36	; 0x24
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
	...

08004438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3b01      	subs	r3, #1
 8004444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004448:	d301      	bcc.n	800444e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800444a:	2301      	movs	r3, #1
 800444c:	e00f      	b.n	800446e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800444e:	4a0a      	ldr	r2, [pc, #40]	; (8004478 <SysTick_Config+0x40>)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3b01      	subs	r3, #1
 8004454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004456:	210f      	movs	r1, #15
 8004458:	f04f 30ff 	mov.w	r0, #4294967295
 800445c:	f7ff ff8e 	bl	800437c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <SysTick_Config+0x40>)
 8004462:	2200      	movs	r2, #0
 8004464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004466:	4b04      	ldr	r3, [pc, #16]	; (8004478 <SysTick_Config+0x40>)
 8004468:	2207      	movs	r2, #7
 800446a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	e000e010 	.word	0xe000e010

0800447c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff ff29 	bl	80042dc <__NVIC_SetPriorityGrouping>
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b086      	sub	sp, #24
 8004496:	af00      	add	r7, sp, #0
 8004498:	4603      	mov	r3, r0
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80044a0:	2300      	movs	r3, #0
 80044a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044a4:	f7ff ff3e 	bl	8004324 <__NVIC_GetPriorityGrouping>
 80044a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	68b9      	ldr	r1, [r7, #8]
 80044ae:	6978      	ldr	r0, [r7, #20]
 80044b0:	f7ff ff8e 	bl	80043d0 <NVIC_EncodePriority>
 80044b4:	4602      	mov	r2, r0
 80044b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ba:	4611      	mov	r1, r2
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff ff5d 	bl	800437c <__NVIC_SetPriority>
}
 80044c2:	bf00      	nop
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	4603      	mov	r3, r0
 80044d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff ff31 	bl	8004340 <__NVIC_EnableIRQ>
}
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b082      	sub	sp, #8
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff ffa2 	bl	8004438 <SysTick_Config>
 80044f4:	4603      	mov	r3, r0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e014      	b.n	800453a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	791b      	ldrb	r3, [r3, #4]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d105      	bne.n	8004526 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7fe f887 	bl	8002634 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2202      	movs	r2, #2
 800452a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	795b      	ldrb	r3, [r3, #5]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_DAC_ConfigChannel+0x1c>
 800455c:	2302      	movs	r3, #2
 800455e:	e137      	b.n	80047d0 <HAL_DAC_ConfigChannel+0x28c>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2202      	movs	r2, #2
 800456a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b04      	cmp	r3, #4
 8004572:	f040 8081 	bne.w	8004678 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004576:	f7fe ff9f 	bl	80034b8 <HAL_GetTick>
 800457a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d140      	bne.n	8004604 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004582:	e018      	b.n	80045b6 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004584:	f7fe ff98 	bl	80034b8 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b01      	cmp	r3, #1
 8004590:	d911      	bls.n	80045b6 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f043 0208 	orr.w	r2, r3, #8
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2203      	movs	r2, #3
 80045b0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e10c      	b.n	80047d0 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1df      	bne.n	8004584 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80045c4:	2001      	movs	r0, #1
 80045c6:	f7fe ff83 	bl	80034d0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	69d2      	ldr	r2, [r2, #28]
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40
 80045d4:	e023      	b.n	800461e <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80045d6:	f7fe ff6f 	bl	80034b8 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d90f      	bls.n	8004604 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	da0a      	bge.n	8004604 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f043 0208 	orr.w	r2, r3, #8
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2203      	movs	r2, #3
 80045fe:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e0e5      	b.n	80047d0 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	2b00      	cmp	r3, #0
 800460c:	dbe3      	blt.n	80045d6 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800460e:	2001      	movs	r0, #1
 8004610:	f7fe ff5e 	bl	80034d0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	69d2      	ldr	r2, [r2, #28]
 800461c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f003 0310 	and.w	r3, r3, #16
 800462a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800462e:	fa01 f303 	lsl.w	r3, r1, r3
 8004632:	43db      	mvns	r3, r3
 8004634:	ea02 0103 	and.w	r1, r2, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	6a1a      	ldr	r2, [r3, #32]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	409a      	lsls	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	21ff      	movs	r1, #255	; 0xff
 800465a:	fa01 f303 	lsl.w	r3, r1, r3
 800465e:	43db      	mvns	r3, r3
 8004660:	ea02 0103 	and.w	r1, r2, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f003 0310 	and.w	r3, r3, #16
 800466e:	409a      	lsls	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d11d      	bne.n	80046bc <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	221f      	movs	r2, #31
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	43db      	mvns	r3, r3
 8004696:	69fa      	ldr	r2, [r7, #28]
 8004698:	4013      	ands	r3, r2
 800469a:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f003 0310 	and.w	r3, r3, #16
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	69fa      	ldr	r2, [r7, #28]
 80046ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c2:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f003 0310 	and.w	r3, r3, #16
 80046ca:	2207      	movs	r2, #7
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	43db      	mvns	r3, r3
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	4013      	ands	r3, r2
 80046d6:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	431a      	orrs	r2, r3
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	69fa      	ldr	r2, [r7, #28]
 8004702:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6819      	ldr	r1, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	43da      	mvns	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	400a      	ands	r2, r1
 8004720:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43db      	mvns	r3, r3
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	4013      	ands	r3, r2
 800473e:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	69fa      	ldr	r2, [r7, #28]
 8004754:	4313      	orrs	r3, r2
 8004756:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004760:	d104      	bne.n	800476c <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004768:	61fb      	str	r3, [r7, #28]
 800476a:	e018      	b.n	800479e <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d104      	bne.n	800477e <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	e00f      	b.n	800479e <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 800477e:	f001 f947 	bl	8005a10 <HAL_RCC_GetHCLKFreq>
 8004782:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4a14      	ldr	r2, [pc, #80]	; (80047d8 <HAL_DAC_ConfigChannel+0x294>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d904      	bls.n	8004796 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004792:	61fb      	str	r3, [r7, #28]
 8004794:	e003      	b.n	800479e <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800479c:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6819      	ldr	r1, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	22c0      	movs	r2, #192	; 0xc0
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	43da      	mvns	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	400a      	ands	r2, r1
 80047c0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3720      	adds	r7, #32
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	04c4b400 	.word	0x04c4b400

080047dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d008      	beq.n	8004806 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2204      	movs	r2, #4
 80047f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e040      	b.n	8004888 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 020e 	bic.w	r2, r2, #14
 8004814:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004820:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004824:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0201 	bic.w	r2, r2, #1
 8004834:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	f003 021c 	and.w	r2, r3, #28
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	2101      	movs	r1, #1
 8004844:	fa01 f202 	lsl.w	r2, r1, r2
 8004848:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004852:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00c      	beq.n	8004876 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004866:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800486a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004874:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004886:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d005      	beq.n	80048b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2204      	movs	r2, #4
 80048b0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	73fb      	strb	r3, [r7, #15]
 80048b6:	e047      	b.n	8004948 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 020e 	bic.w	r2, r2, #14
 80048c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0201 	bic.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ec:	f003 021c 	and.w	r2, r3, #28
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	2101      	movs	r1, #1
 80048f6:	fa01 f202 	lsl.w	r2, r1, r2
 80048fa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004904:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00c      	beq.n	8004928 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004918:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800491c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004926:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	4798      	blx	r3
    }
  }
  return status;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800495e:	2300      	movs	r3, #0
 8004960:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004962:	e166      	b.n	8004c32 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	2101      	movs	r1, #1
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	fa01 f303 	lsl.w	r3, r1, r3
 8004970:	4013      	ands	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 8158 	beq.w	8004c2c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d005      	beq.n	8004994 <HAL_GPIO_Init+0x40>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d130      	bne.n	80049f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	2203      	movs	r2, #3
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4013      	ands	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049ca:	2201      	movs	r2, #1
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4013      	ands	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	091b      	lsrs	r3, r3, #4
 80049e0:	f003 0201 	and.w	r2, r3, #1
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d017      	beq.n	8004a32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	2203      	movs	r2, #3
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	43db      	mvns	r3, r3
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4013      	ands	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	fa02 f303 	lsl.w	r3, r2, r3
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d123      	bne.n	8004a86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	08da      	lsrs	r2, r3, #3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	3208      	adds	r2, #8
 8004a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	220f      	movs	r2, #15
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	691a      	ldr	r2, [r3, #16]
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	08da      	lsrs	r2, r3, #3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3208      	adds	r2, #8
 8004a80:	6939      	ldr	r1, [r7, #16]
 8004a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	2203      	movs	r2, #3
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	43db      	mvns	r3, r3
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f003 0203 	and.w	r2, r3, #3
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 80b2 	beq.w	8004c2c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ac8:	4b61      	ldr	r3, [pc, #388]	; (8004c50 <HAL_GPIO_Init+0x2fc>)
 8004aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004acc:	4a60      	ldr	r2, [pc, #384]	; (8004c50 <HAL_GPIO_Init+0x2fc>)
 8004ace:	f043 0301 	orr.w	r3, r3, #1
 8004ad2:	6613      	str	r3, [r2, #96]	; 0x60
 8004ad4:	4b5e      	ldr	r3, [pc, #376]	; (8004c50 <HAL_GPIO_Init+0x2fc>)
 8004ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004ae0:	4a5c      	ldr	r2, [pc, #368]	; (8004c54 <HAL_GPIO_Init+0x300>)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	089b      	lsrs	r3, r3, #2
 8004ae6:	3302      	adds	r3, #2
 8004ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f003 0303 	and.w	r3, r3, #3
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	220f      	movs	r2, #15
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	43db      	mvns	r3, r3
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4013      	ands	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b0a:	d02b      	beq.n	8004b64 <HAL_GPIO_Init+0x210>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a52      	ldr	r2, [pc, #328]	; (8004c58 <HAL_GPIO_Init+0x304>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d025      	beq.n	8004b60 <HAL_GPIO_Init+0x20c>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a51      	ldr	r2, [pc, #324]	; (8004c5c <HAL_GPIO_Init+0x308>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d01f      	beq.n	8004b5c <HAL_GPIO_Init+0x208>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a50      	ldr	r2, [pc, #320]	; (8004c60 <HAL_GPIO_Init+0x30c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d019      	beq.n	8004b58 <HAL_GPIO_Init+0x204>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a4f      	ldr	r2, [pc, #316]	; (8004c64 <HAL_GPIO_Init+0x310>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d013      	beq.n	8004b54 <HAL_GPIO_Init+0x200>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a4e      	ldr	r2, [pc, #312]	; (8004c68 <HAL_GPIO_Init+0x314>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00d      	beq.n	8004b50 <HAL_GPIO_Init+0x1fc>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a4d      	ldr	r2, [pc, #308]	; (8004c6c <HAL_GPIO_Init+0x318>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d007      	beq.n	8004b4c <HAL_GPIO_Init+0x1f8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a4c      	ldr	r2, [pc, #304]	; (8004c70 <HAL_GPIO_Init+0x31c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d101      	bne.n	8004b48 <HAL_GPIO_Init+0x1f4>
 8004b44:	2307      	movs	r3, #7
 8004b46:	e00e      	b.n	8004b66 <HAL_GPIO_Init+0x212>
 8004b48:	2308      	movs	r3, #8
 8004b4a:	e00c      	b.n	8004b66 <HAL_GPIO_Init+0x212>
 8004b4c:	2306      	movs	r3, #6
 8004b4e:	e00a      	b.n	8004b66 <HAL_GPIO_Init+0x212>
 8004b50:	2305      	movs	r3, #5
 8004b52:	e008      	b.n	8004b66 <HAL_GPIO_Init+0x212>
 8004b54:	2304      	movs	r3, #4
 8004b56:	e006      	b.n	8004b66 <HAL_GPIO_Init+0x212>
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e004      	b.n	8004b66 <HAL_GPIO_Init+0x212>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e002      	b.n	8004b66 <HAL_GPIO_Init+0x212>
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <HAL_GPIO_Init+0x212>
 8004b64:	2300      	movs	r3, #0
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	f002 0203 	and.w	r2, r2, #3
 8004b6c:	0092      	lsls	r2, r2, #2
 8004b6e:	4093      	lsls	r3, r2
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004b76:	4937      	ldr	r1, [pc, #220]	; (8004c54 <HAL_GPIO_Init+0x300>)
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	089b      	lsrs	r3, r3, #2
 8004b7c:	3302      	adds	r3, #2
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b84:	4b3b      	ldr	r3, [pc, #236]	; (8004c74 <HAL_GPIO_Init+0x320>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4013      	ands	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ba8:	4a32      	ldr	r2, [pc, #200]	; (8004c74 <HAL_GPIO_Init+0x320>)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004bae:	4b31      	ldr	r3, [pc, #196]	; (8004c74 <HAL_GPIO_Init+0x320>)
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004bd2:	4a28      	ldr	r2, [pc, #160]	; (8004c74 <HAL_GPIO_Init+0x320>)
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004bd8:	4b26      	ldr	r3, [pc, #152]	; (8004c74 <HAL_GPIO_Init+0x320>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	43db      	mvns	r3, r3
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4013      	ands	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004bfc:	4a1d      	ldr	r2, [pc, #116]	; (8004c74 <HAL_GPIO_Init+0x320>)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004c02:	4b1c      	ldr	r3, [pc, #112]	; (8004c74 <HAL_GPIO_Init+0x320>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c26:	4a13      	ldr	r2, [pc, #76]	; (8004c74 <HAL_GPIO_Init+0x320>)
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f47f ae91 	bne.w	8004964 <HAL_GPIO_Init+0x10>
  }
}
 8004c42:	bf00      	nop
 8004c44:	bf00      	nop
 8004c46:	371c      	adds	r7, #28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	40021000 	.word	0x40021000
 8004c54:	40010000 	.word	0x40010000
 8004c58:	48000400 	.word	0x48000400
 8004c5c:	48000800 	.word	0x48000800
 8004c60:	48000c00 	.word	0x48000c00
 8004c64:	48001000 	.word	0x48001000
 8004c68:	48001400 	.word	0x48001400
 8004c6c:	48001800 	.word	0x48001800
 8004c70:	48001c00 	.word	0x48001c00
 8004c74:	40010400 	.word	0x40010400

08004c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	807b      	strh	r3, [r7, #2]
 8004c84:	4613      	mov	r3, r2
 8004c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c88:	787b      	ldrb	r3, [r7, #1]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c8e:	887a      	ldrh	r2, [r7, #2]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c94:	e002      	b.n	8004c9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c96:	887a      	ldrh	r2, [r7, #2]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cac:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb8:	d102      	bne.n	8004cc0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cbe:	e00b      	b.n	8004cd8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004cc0:	4b08      	ldr	r3, [pc, #32]	; (8004ce4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cce:	d102      	bne.n	8004cd6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cd4:	e000      	b.n	8004cd8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004cd6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40007000 	.word	0x40007000

08004ce8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d141      	bne.n	8004d7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cf6:	4b4b      	ldr	r3, [pc, #300]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d02:	d131      	bne.n	8004d68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d04:	4b47      	ldr	r3, [pc, #284]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d0a:	4a46      	ldr	r2, [pc, #280]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d14:	4b43      	ldr	r3, [pc, #268]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d1c:	4a41      	ldr	r2, [pc, #260]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004d24:	4b40      	ldr	r3, [pc, #256]	; (8004e28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2232      	movs	r2, #50	; 0x32
 8004d2a:	fb02 f303 	mul.w	r3, r2, r3
 8004d2e:	4a3f      	ldr	r2, [pc, #252]	; (8004e2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d30:	fba2 2303 	umull	r2, r3, r2, r3
 8004d34:	0c9b      	lsrs	r3, r3, #18
 8004d36:	3301      	adds	r3, #1
 8004d38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d3a:	e002      	b.n	8004d42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d42:	4b38      	ldr	r3, [pc, #224]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4e:	d102      	bne.n	8004d56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1f2      	bne.n	8004d3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d56:	4b33      	ldr	r3, [pc, #204]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d62:	d158      	bne.n	8004e16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e057      	b.n	8004e18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d68:	4b2e      	ldr	r3, [pc, #184]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d6e:	4a2d      	ldr	r2, [pc, #180]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d78:	e04d      	b.n	8004e16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d80:	d141      	bne.n	8004e06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d82:	4b28      	ldr	r3, [pc, #160]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8e:	d131      	bne.n	8004df4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d90:	4b24      	ldr	r3, [pc, #144]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d96:	4a23      	ldr	r2, [pc, #140]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004da0:	4b20      	ldr	r3, [pc, #128]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004da8:	4a1e      	ldr	r2, [pc, #120]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004db0:	4b1d      	ldr	r3, [pc, #116]	; (8004e28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2232      	movs	r2, #50	; 0x32
 8004db6:	fb02 f303 	mul.w	r3, r2, r3
 8004dba:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc0:	0c9b      	lsrs	r3, r3, #18
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dc6:	e002      	b.n	8004dce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dce:	4b15      	ldr	r3, [pc, #84]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dda:	d102      	bne.n	8004de2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f2      	bne.n	8004dc8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004de2:	4b10      	ldr	r3, [pc, #64]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dee:	d112      	bne.n	8004e16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e011      	b.n	8004e18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dfa:	4a0a      	ldr	r2, [pc, #40]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004e04:	e007      	b.n	8004e16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e06:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e0e:	4a05      	ldr	r2, [pc, #20]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e14:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	40007000 	.word	0x40007000
 8004e28:	20000008 	.word	0x20000008
 8004e2c:	431bde83 	.word	0x431bde83

08004e30 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e3e:	6053      	str	r3, [r2, #4]
}
 8004e40:	bf00      	nop
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40007000 	.word	0x40007000

08004e50 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d102      	bne.n	8004e64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f000 bc08 	b.w	8005674 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e64:	4b96      	ldr	r3, [pc, #600]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 030c 	and.w	r3, r3, #12
 8004e6c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e6e:	4b94      	ldr	r3, [pc, #592]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0310 	and.w	r3, r3, #16
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80e4 	beq.w	800504e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d007      	beq.n	8004e9c <HAL_RCC_OscConfig+0x4c>
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	2b0c      	cmp	r3, #12
 8004e90:	f040 808b 	bne.w	8004faa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	f040 8087 	bne.w	8004faa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e9c:	4b88      	ldr	r3, [pc, #544]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x64>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e3df      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1a      	ldr	r2, [r3, #32]
 8004eb8:	4b81      	ldr	r3, [pc, #516]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d004      	beq.n	8004ece <HAL_RCC_OscConfig+0x7e>
 8004ec4:	4b7e      	ldr	r3, [pc, #504]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ecc:	e005      	b.n	8004eda <HAL_RCC_OscConfig+0x8a>
 8004ece:	4b7c      	ldr	r3, [pc, #496]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ed4:	091b      	lsrs	r3, r3, #4
 8004ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d223      	bcs.n	8004f26 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fdcc 	bl	8005a80 <RCC_SetFlashLatencyFromMSIRange>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e3c0      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ef2:	4b73      	ldr	r3, [pc, #460]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a72      	ldr	r2, [pc, #456]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004ef8:	f043 0308 	orr.w	r3, r3, #8
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	4b70      	ldr	r3, [pc, #448]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	496d      	ldr	r1, [pc, #436]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f10:	4b6b      	ldr	r3, [pc, #428]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	4968      	ldr	r1, [pc, #416]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	604b      	str	r3, [r1, #4]
 8004f24:	e025      	b.n	8004f72 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f26:	4b66      	ldr	r3, [pc, #408]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a65      	ldr	r2, [pc, #404]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f2c:	f043 0308 	orr.w	r3, r3, #8
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	4b63      	ldr	r3, [pc, #396]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	4960      	ldr	r1, [pc, #384]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f44:	4b5e      	ldr	r3, [pc, #376]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	495b      	ldr	r1, [pc, #364]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d109      	bne.n	8004f72 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fd8c 	bl	8005a80 <RCC_SetFlashLatencyFromMSIRange>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e380      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f72:	f000 fcc1 	bl	80058f8 <HAL_RCC_GetSysClockFreq>
 8004f76:	4602      	mov	r2, r0
 8004f78:	4b51      	ldr	r3, [pc, #324]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	4950      	ldr	r1, [pc, #320]	; (80050c4 <HAL_RCC_OscConfig+0x274>)
 8004f84:	5ccb      	ldrb	r3, [r1, r3]
 8004f86:	f003 031f 	and.w	r3, r3, #31
 8004f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f8e:	4a4e      	ldr	r2, [pc, #312]	; (80050c8 <HAL_RCC_OscConfig+0x278>)
 8004f90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f92:	4b4e      	ldr	r3, [pc, #312]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fe fa3e 	bl	8003418 <HAL_InitTick>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d052      	beq.n	800504c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	e364      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d032      	beq.n	8005018 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004fb2:	4b43      	ldr	r3, [pc, #268]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a42      	ldr	r2, [pc, #264]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004fb8:	f043 0301 	orr.w	r3, r3, #1
 8004fbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004fbe:	f7fe fa7b 	bl	80034b8 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fc6:	f7fe fa77 	bl	80034b8 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e34d      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fd8:	4b39      	ldr	r3, [pc, #228]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0f0      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fe4:	4b36      	ldr	r3, [pc, #216]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a35      	ldr	r2, [pc, #212]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004fea:	f043 0308 	orr.w	r3, r3, #8
 8004fee:	6013      	str	r3, [r2, #0]
 8004ff0:	4b33      	ldr	r3, [pc, #204]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	4930      	ldr	r1, [pc, #192]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005002:	4b2f      	ldr	r3, [pc, #188]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	021b      	lsls	r3, r3, #8
 8005010:	492b      	ldr	r1, [pc, #172]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8005012:	4313      	orrs	r3, r2
 8005014:	604b      	str	r3, [r1, #4]
 8005016:	e01a      	b.n	800504e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005018:	4b29      	ldr	r3, [pc, #164]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a28      	ldr	r2, [pc, #160]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 800501e:	f023 0301 	bic.w	r3, r3, #1
 8005022:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005024:	f7fe fa48 	bl	80034b8 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800502c:	f7fe fa44 	bl	80034b8 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e31a      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800503e:	4b20      	ldr	r3, [pc, #128]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <HAL_RCC_OscConfig+0x1dc>
 800504a:	e000      	b.n	800504e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800504c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d073      	beq.n	8005142 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	2b08      	cmp	r3, #8
 800505e:	d005      	beq.n	800506c <HAL_RCC_OscConfig+0x21c>
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	2b0c      	cmp	r3, #12
 8005064:	d10e      	bne.n	8005084 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b03      	cmp	r3, #3
 800506a:	d10b      	bne.n	8005084 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800506c:	4b14      	ldr	r3, [pc, #80]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d063      	beq.n	8005140 <HAL_RCC_OscConfig+0x2f0>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d15f      	bne.n	8005140 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e2f7      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508c:	d106      	bne.n	800509c <HAL_RCC_OscConfig+0x24c>
 800508e:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a0b      	ldr	r2, [pc, #44]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8005094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	e025      	b.n	80050e8 <HAL_RCC_OscConfig+0x298>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050a4:	d114      	bne.n	80050d0 <HAL_RCC_OscConfig+0x280>
 80050a6:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a05      	ldr	r2, [pc, #20]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 80050ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	4b03      	ldr	r3, [pc, #12]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a02      	ldr	r2, [pc, #8]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 80050b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	e013      	b.n	80050e8 <HAL_RCC_OscConfig+0x298>
 80050c0:	40021000 	.word	0x40021000
 80050c4:	0800cec8 	.word	0x0800cec8
 80050c8:	20000008 	.word	0x20000008
 80050cc:	2000000c 	.word	0x2000000c
 80050d0:	4ba0      	ldr	r3, [pc, #640]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a9f      	ldr	r2, [pc, #636]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 80050d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	4b9d      	ldr	r3, [pc, #628]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a9c      	ldr	r2, [pc, #624]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 80050e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d013      	beq.n	8005118 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f0:	f7fe f9e2 	bl	80034b8 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f8:	f7fe f9de 	bl	80034b8 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b64      	cmp	r3, #100	; 0x64
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e2b4      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800510a:	4b92      	ldr	r3, [pc, #584]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCC_OscConfig+0x2a8>
 8005116:	e014      	b.n	8005142 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005118:	f7fe f9ce 	bl	80034b8 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005120:	f7fe f9ca 	bl	80034b8 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b64      	cmp	r3, #100	; 0x64
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e2a0      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005132:	4b88      	ldr	r3, [pc, #544]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0x2d0>
 800513e:	e000      	b.n	8005142 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d060      	beq.n	8005210 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	2b04      	cmp	r3, #4
 8005152:	d005      	beq.n	8005160 <HAL_RCC_OscConfig+0x310>
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	2b0c      	cmp	r3, #12
 8005158:	d119      	bne.n	800518e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2b02      	cmp	r3, #2
 800515e:	d116      	bne.n	800518e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005160:	4b7c      	ldr	r3, [pc, #496]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_RCC_OscConfig+0x328>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e27d      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005178:	4b76      	ldr	r3, [pc, #472]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	061b      	lsls	r3, r3, #24
 8005186:	4973      	ldr	r1, [pc, #460]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 8005188:	4313      	orrs	r3, r2
 800518a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800518c:	e040      	b.n	8005210 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d023      	beq.n	80051de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005196:	4b6f      	ldr	r3, [pc, #444]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a6e      	ldr	r2, [pc, #440]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 800519c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a2:	f7fe f989 	bl	80034b8 <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051aa:	f7fe f985 	bl	80034b8 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e25b      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051bc:	4b65      	ldr	r3, [pc, #404]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0f0      	beq.n	80051aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c8:	4b62      	ldr	r3, [pc, #392]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	061b      	lsls	r3, r3, #24
 80051d6:	495f      	ldr	r1, [pc, #380]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	604b      	str	r3, [r1, #4]
 80051dc:	e018      	b.n	8005210 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051de:	4b5d      	ldr	r3, [pc, #372]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a5c      	ldr	r2, [pc, #368]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 80051e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ea:	f7fe f965 	bl	80034b8 <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f2:	f7fe f961 	bl	80034b8 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e237      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005204:	4b53      	ldr	r3, [pc, #332]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f0      	bne.n	80051f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b00      	cmp	r3, #0
 800521a:	d03c      	beq.n	8005296 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d01c      	beq.n	800525e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005224:	4b4b      	ldr	r3, [pc, #300]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 8005226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800522a:	4a4a      	ldr	r2, [pc, #296]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 800522c:	f043 0301 	orr.w	r3, r3, #1
 8005230:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005234:	f7fe f940 	bl	80034b8 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800523c:	f7fe f93c 	bl	80034b8 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e212      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800524e:	4b41      	ldr	r3, [pc, #260]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 8005250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0ef      	beq.n	800523c <HAL_RCC_OscConfig+0x3ec>
 800525c:	e01b      	b.n	8005296 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800525e:	4b3d      	ldr	r3, [pc, #244]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 8005260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005264:	4a3b      	ldr	r2, [pc, #236]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 8005266:	f023 0301 	bic.w	r3, r3, #1
 800526a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526e:	f7fe f923 	bl	80034b8 <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005276:	f7fe f91f 	bl	80034b8 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e1f5      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005288:	4b32      	ldr	r3, [pc, #200]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 800528a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1ef      	bne.n	8005276 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0304 	and.w	r3, r3, #4
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 80a6 	beq.w	80053f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052a4:	2300      	movs	r3, #0
 80052a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80052a8:	4b2a      	ldr	r3, [pc, #168]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 80052aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10d      	bne.n	80052d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b4:	4b27      	ldr	r3, [pc, #156]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 80052b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b8:	4a26      	ldr	r2, [pc, #152]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 80052ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052be:	6593      	str	r3, [r2, #88]	; 0x58
 80052c0:	4b24      	ldr	r3, [pc, #144]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 80052c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052cc:	2301      	movs	r3, #1
 80052ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052d0:	4b21      	ldr	r3, [pc, #132]	; (8005358 <HAL_RCC_OscConfig+0x508>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d118      	bne.n	800530e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052dc:	4b1e      	ldr	r3, [pc, #120]	; (8005358 <HAL_RCC_OscConfig+0x508>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1d      	ldr	r2, [pc, #116]	; (8005358 <HAL_RCC_OscConfig+0x508>)
 80052e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052e8:	f7fe f8e6 	bl	80034b8 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f0:	f7fe f8e2 	bl	80034b8 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e1b8      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005302:	4b15      	ldr	r3, [pc, #84]	; (8005358 <HAL_RCC_OscConfig+0x508>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f0      	beq.n	80052f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d108      	bne.n	8005328 <HAL_RCC_OscConfig+0x4d8>
 8005316:	4b0f      	ldr	r3, [pc, #60]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 8005318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531c:	4a0d      	ldr	r2, [pc, #52]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005326:	e029      	b.n	800537c <HAL_RCC_OscConfig+0x52c>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b05      	cmp	r3, #5
 800532e:	d115      	bne.n	800535c <HAL_RCC_OscConfig+0x50c>
 8005330:	4b08      	ldr	r3, [pc, #32]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 8005332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005336:	4a07      	ldr	r2, [pc, #28]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 8005338:	f043 0304 	orr.w	r3, r3, #4
 800533c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005340:	4b04      	ldr	r3, [pc, #16]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 8005342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005346:	4a03      	ldr	r2, [pc, #12]	; (8005354 <HAL_RCC_OscConfig+0x504>)
 8005348:	f043 0301 	orr.w	r3, r3, #1
 800534c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005350:	e014      	b.n	800537c <HAL_RCC_OscConfig+0x52c>
 8005352:	bf00      	nop
 8005354:	40021000 	.word	0x40021000
 8005358:	40007000 	.word	0x40007000
 800535c:	4b9d      	ldr	r3, [pc, #628]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005362:	4a9c      	ldr	r2, [pc, #624]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005364:	f023 0301 	bic.w	r3, r3, #1
 8005368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800536c:	4b99      	ldr	r3, [pc, #612]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005372:	4a98      	ldr	r2, [pc, #608]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005374:	f023 0304 	bic.w	r3, r3, #4
 8005378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d016      	beq.n	80053b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005384:	f7fe f898 	bl	80034b8 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800538a:	e00a      	b.n	80053a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800538c:	f7fe f894 	bl	80034b8 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	f241 3288 	movw	r2, #5000	; 0x1388
 800539a:	4293      	cmp	r3, r2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e168      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053a2:	4b8c      	ldr	r3, [pc, #560]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 80053a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0ed      	beq.n	800538c <HAL_RCC_OscConfig+0x53c>
 80053b0:	e015      	b.n	80053de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b2:	f7fe f881 	bl	80034b8 <HAL_GetTick>
 80053b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053b8:	e00a      	b.n	80053d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ba:	f7fe f87d 	bl	80034b8 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e151      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053d0:	4b80      	ldr	r3, [pc, #512]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1ed      	bne.n	80053ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053de:	7ffb      	ldrb	r3, [r7, #31]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d105      	bne.n	80053f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053e4:	4b7b      	ldr	r3, [pc, #492]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 80053e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e8:	4a7a      	ldr	r2, [pc, #488]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 80053ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0320 	and.w	r3, r3, #32
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d03c      	beq.n	8005476 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	2b00      	cmp	r3, #0
 8005402:	d01c      	beq.n	800543e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005404:	4b73      	ldr	r3, [pc, #460]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005406:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800540a:	4a72      	ldr	r2, [pc, #456]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005414:	f7fe f850 	bl	80034b8 <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800541c:	f7fe f84c 	bl	80034b8 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e122      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800542e:	4b69      	ldr	r3, [pc, #420]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005430:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0ef      	beq.n	800541c <HAL_RCC_OscConfig+0x5cc>
 800543c:	e01b      	b.n	8005476 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800543e:	4b65      	ldr	r3, [pc, #404]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005440:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005444:	4a63      	ldr	r2, [pc, #396]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005446:	f023 0301 	bic.w	r3, r3, #1
 800544a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800544e:	f7fe f833 	bl	80034b8 <HAL_GetTick>
 8005452:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005456:	f7fe f82f 	bl	80034b8 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e105      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005468:	4b5a      	ldr	r3, [pc, #360]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 800546a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1ef      	bne.n	8005456 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 80f9 	beq.w	8005672 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005484:	2b02      	cmp	r3, #2
 8005486:	f040 80cf 	bne.w	8005628 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800548a:	4b52      	ldr	r3, [pc, #328]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f003 0203 	and.w	r2, r3, #3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549a:	429a      	cmp	r2, r3
 800549c:	d12c      	bne.n	80054f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	3b01      	subs	r3, #1
 80054aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d123      	bne.n	80054f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054bc:	429a      	cmp	r2, r3
 80054be:	d11b      	bne.n	80054f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d113      	bne.n	80054f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054da:	085b      	lsrs	r3, r3, #1
 80054dc:	3b01      	subs	r3, #1
 80054de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d109      	bne.n	80054f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	3b01      	subs	r3, #1
 80054f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d071      	beq.n	80055dc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	2b0c      	cmp	r3, #12
 80054fc:	d068      	beq.n	80055d0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80054fe:	4b35      	ldr	r3, [pc, #212]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d105      	bne.n	8005516 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800550a:	4b32      	ldr	r3, [pc, #200]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e0ac      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800551a:	4b2e      	ldr	r3, [pc, #184]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2d      	ldr	r2, [pc, #180]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005520:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005524:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005526:	f7fd ffc7 	bl	80034b8 <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800552e:	f7fd ffc3 	bl	80034b8 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e099      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005540:	4b24      	ldr	r3, [pc, #144]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f0      	bne.n	800552e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800554c:	4b21      	ldr	r3, [pc, #132]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	4b21      	ldr	r3, [pc, #132]	; (80055d8 <HAL_RCC_OscConfig+0x788>)
 8005552:	4013      	ands	r3, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800555c:	3a01      	subs	r2, #1
 800555e:	0112      	lsls	r2, r2, #4
 8005560:	4311      	orrs	r1, r2
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005566:	0212      	lsls	r2, r2, #8
 8005568:	4311      	orrs	r1, r2
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800556e:	0852      	lsrs	r2, r2, #1
 8005570:	3a01      	subs	r2, #1
 8005572:	0552      	lsls	r2, r2, #21
 8005574:	4311      	orrs	r1, r2
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800557a:	0852      	lsrs	r2, r2, #1
 800557c:	3a01      	subs	r2, #1
 800557e:	0652      	lsls	r2, r2, #25
 8005580:	4311      	orrs	r1, r2
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005586:	06d2      	lsls	r2, r2, #27
 8005588:	430a      	orrs	r2, r1
 800558a:	4912      	ldr	r1, [pc, #72]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 800558c:	4313      	orrs	r3, r2
 800558e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005590:	4b10      	ldr	r3, [pc, #64]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a0f      	ldr	r2, [pc, #60]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800559a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800559c:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	4a0c      	ldr	r2, [pc, #48]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 80055a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055a8:	f7fd ff86 	bl	80034b8 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b0:	f7fd ff82 	bl	80034b8 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e058      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055c2:	4b04      	ldr	r3, [pc, #16]	; (80055d4 <HAL_RCC_OscConfig+0x784>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0f0      	beq.n	80055b0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055ce:	e050      	b.n	8005672 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e04f      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
 80055d4:	40021000 	.word	0x40021000
 80055d8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055dc:	4b27      	ldr	r3, [pc, #156]	; (800567c <HAL_RCC_OscConfig+0x82c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d144      	bne.n	8005672 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80055e8:	4b24      	ldr	r3, [pc, #144]	; (800567c <HAL_RCC_OscConfig+0x82c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a23      	ldr	r2, [pc, #140]	; (800567c <HAL_RCC_OscConfig+0x82c>)
 80055ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055f4:	4b21      	ldr	r3, [pc, #132]	; (800567c <HAL_RCC_OscConfig+0x82c>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	4a20      	ldr	r2, [pc, #128]	; (800567c <HAL_RCC_OscConfig+0x82c>)
 80055fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005600:	f7fd ff5a 	bl	80034b8 <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005608:	f7fd ff56 	bl	80034b8 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e02c      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800561a:	4b18      	ldr	r3, [pc, #96]	; (800567c <HAL_RCC_OscConfig+0x82c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0f0      	beq.n	8005608 <HAL_RCC_OscConfig+0x7b8>
 8005626:	e024      	b.n	8005672 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	2b0c      	cmp	r3, #12
 800562c:	d01f      	beq.n	800566e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800562e:	4b13      	ldr	r3, [pc, #76]	; (800567c <HAL_RCC_OscConfig+0x82c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a12      	ldr	r2, [pc, #72]	; (800567c <HAL_RCC_OscConfig+0x82c>)
 8005634:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563a:	f7fd ff3d 	bl	80034b8 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005640:	e008      	b.n	8005654 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005642:	f7fd ff39 	bl	80034b8 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e00f      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005654:	4b09      	ldr	r3, [pc, #36]	; (800567c <HAL_RCC_OscConfig+0x82c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1f0      	bne.n	8005642 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005660:	4b06      	ldr	r3, [pc, #24]	; (800567c <HAL_RCC_OscConfig+0x82c>)
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	4905      	ldr	r1, [pc, #20]	; (800567c <HAL_RCC_OscConfig+0x82c>)
 8005666:	4b06      	ldr	r3, [pc, #24]	; (8005680 <HAL_RCC_OscConfig+0x830>)
 8005668:	4013      	ands	r3, r2
 800566a:	60cb      	str	r3, [r1, #12]
 800566c:	e001      	b.n	8005672 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3720      	adds	r7, #32
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40021000 	.word	0x40021000
 8005680:	feeefffc 	.word	0xfeeefffc

08005684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800568e:	2300      	movs	r3, #0
 8005690:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e11d      	b.n	80058d8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800569c:	4b90      	ldr	r3, [pc, #576]	; (80058e0 <HAL_RCC_ClockConfig+0x25c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d910      	bls.n	80056cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056aa:	4b8d      	ldr	r3, [pc, #564]	; (80058e0 <HAL_RCC_ClockConfig+0x25c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f023 020f 	bic.w	r2, r3, #15
 80056b2:	498b      	ldr	r1, [pc, #556]	; (80058e0 <HAL_RCC_ClockConfig+0x25c>)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ba:	4b89      	ldr	r3, [pc, #548]	; (80058e0 <HAL_RCC_ClockConfig+0x25c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d001      	beq.n	80056cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e105      	b.n	80058d8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d010      	beq.n	80056fa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	4b81      	ldr	r3, [pc, #516]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d908      	bls.n	80056fa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056e8:	4b7e      	ldr	r3, [pc, #504]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	497b      	ldr	r1, [pc, #492]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d079      	beq.n	80057fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b03      	cmp	r3, #3
 800570c:	d11e      	bne.n	800574c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800570e:	4b75      	ldr	r3, [pc, #468]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e0dc      	b.n	80058d8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800571e:	f000 fa09 	bl	8005b34 <RCC_GetSysClockFreqFromPLLSource>
 8005722:	4603      	mov	r3, r0
 8005724:	4a70      	ldr	r2, [pc, #448]	; (80058e8 <HAL_RCC_ClockConfig+0x264>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d946      	bls.n	80057b8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800572a:	4b6e      	ldr	r3, [pc, #440]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d140      	bne.n	80057b8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005736:	4b6b      	ldr	r3, [pc, #428]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800573e:	4a69      	ldr	r2, [pc, #420]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 8005740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005744:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005746:	2380      	movs	r3, #128	; 0x80
 8005748:	617b      	str	r3, [r7, #20]
 800574a:	e035      	b.n	80057b8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b02      	cmp	r3, #2
 8005752:	d107      	bne.n	8005764 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005754:	4b63      	ldr	r3, [pc, #396]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d115      	bne.n	800578c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e0b9      	b.n	80058d8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d107      	bne.n	800577c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800576c:	4b5d      	ldr	r3, [pc, #372]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d109      	bne.n	800578c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e0ad      	b.n	80058d8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800577c:	4b59      	ldr	r3, [pc, #356]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e0a5      	b.n	80058d8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800578c:	f000 f8b4 	bl	80058f8 <HAL_RCC_GetSysClockFreq>
 8005790:	4603      	mov	r3, r0
 8005792:	4a55      	ldr	r2, [pc, #340]	; (80058e8 <HAL_RCC_ClockConfig+0x264>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d90f      	bls.n	80057b8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005798:	4b52      	ldr	r3, [pc, #328]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d109      	bne.n	80057b8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057a4:	4b4f      	ldr	r3, [pc, #316]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ac:	4a4d      	ldr	r2, [pc, #308]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 80057ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057b4:	2380      	movs	r3, #128	; 0x80
 80057b6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057b8:	4b4a      	ldr	r3, [pc, #296]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f023 0203 	bic.w	r2, r3, #3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	4947      	ldr	r1, [pc, #284]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ca:	f7fd fe75 	bl	80034b8 <HAL_GetTick>
 80057ce:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057d0:	e00a      	b.n	80057e8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057d2:	f7fd fe71 	bl	80034b8 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e077      	b.n	80058d8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057e8:	4b3e      	ldr	r3, [pc, #248]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f003 020c 	and.w	r2, r3, #12
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d1eb      	bne.n	80057d2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b80      	cmp	r3, #128	; 0x80
 80057fe:	d105      	bne.n	800580c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005800:	4b38      	ldr	r3, [pc, #224]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	4a37      	ldr	r2, [pc, #220]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 8005806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800580a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d010      	beq.n	800583a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	4b31      	ldr	r3, [pc, #196]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005824:	429a      	cmp	r2, r3
 8005826:	d208      	bcs.n	800583a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005828:	4b2e      	ldr	r3, [pc, #184]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	492b      	ldr	r1, [pc, #172]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 8005836:	4313      	orrs	r3, r2
 8005838:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800583a:	4b29      	ldr	r3, [pc, #164]	; (80058e0 <HAL_RCC_ClockConfig+0x25c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d210      	bcs.n	800586a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005848:	4b25      	ldr	r3, [pc, #148]	; (80058e0 <HAL_RCC_ClockConfig+0x25c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f023 020f 	bic.w	r2, r3, #15
 8005850:	4923      	ldr	r1, [pc, #140]	; (80058e0 <HAL_RCC_ClockConfig+0x25c>)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	4313      	orrs	r3, r2
 8005856:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005858:	4b21      	ldr	r3, [pc, #132]	; (80058e0 <HAL_RCC_ClockConfig+0x25c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d001      	beq.n	800586a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e036      	b.n	80058d8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0304 	and.w	r3, r3, #4
 8005872:	2b00      	cmp	r3, #0
 8005874:	d008      	beq.n	8005888 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005876:	4b1b      	ldr	r3, [pc, #108]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	4918      	ldr	r1, [pc, #96]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 8005884:	4313      	orrs	r3, r2
 8005886:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0308 	and.w	r3, r3, #8
 8005890:	2b00      	cmp	r3, #0
 8005892:	d009      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005894:	4b13      	ldr	r3, [pc, #76]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	4910      	ldr	r1, [pc, #64]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058a8:	f000 f826 	bl	80058f8 <HAL_RCC_GetSysClockFreq>
 80058ac:	4602      	mov	r2, r0
 80058ae:	4b0d      	ldr	r3, [pc, #52]	; (80058e4 <HAL_RCC_ClockConfig+0x260>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	091b      	lsrs	r3, r3, #4
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	490c      	ldr	r1, [pc, #48]	; (80058ec <HAL_RCC_ClockConfig+0x268>)
 80058ba:	5ccb      	ldrb	r3, [r1, r3]
 80058bc:	f003 031f 	and.w	r3, r3, #31
 80058c0:	fa22 f303 	lsr.w	r3, r2, r3
 80058c4:	4a0a      	ldr	r2, [pc, #40]	; (80058f0 <HAL_RCC_ClockConfig+0x26c>)
 80058c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80058c8:	4b0a      	ldr	r3, [pc, #40]	; (80058f4 <HAL_RCC_ClockConfig+0x270>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fd fda3 	bl	8003418 <HAL_InitTick>
 80058d2:	4603      	mov	r3, r0
 80058d4:	73fb      	strb	r3, [r7, #15]

  return status;
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40022000 	.word	0x40022000
 80058e4:	40021000 	.word	0x40021000
 80058e8:	04c4b400 	.word	0x04c4b400
 80058ec:	0800cec8 	.word	0x0800cec8
 80058f0:	20000008 	.word	0x20000008
 80058f4:	2000000c 	.word	0x2000000c

080058f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b089      	sub	sp, #36	; 0x24
 80058fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	2300      	movs	r3, #0
 8005904:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005906:	4b3e      	ldr	r3, [pc, #248]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 030c 	and.w	r3, r3, #12
 800590e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005910:	4b3b      	ldr	r3, [pc, #236]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f003 0303 	and.w	r3, r3, #3
 8005918:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <HAL_RCC_GetSysClockFreq+0x34>
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	2b0c      	cmp	r3, #12
 8005924:	d121      	bne.n	800596a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d11e      	bne.n	800596a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800592c:	4b34      	ldr	r3, [pc, #208]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d107      	bne.n	8005948 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005938:	4b31      	ldr	r3, [pc, #196]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800593a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800593e:	0a1b      	lsrs	r3, r3, #8
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	61fb      	str	r3, [r7, #28]
 8005946:	e005      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005948:	4b2d      	ldr	r3, [pc, #180]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	091b      	lsrs	r3, r3, #4
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005954:	4a2b      	ldr	r2, [pc, #172]	; (8005a04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800595c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10d      	bne.n	8005980 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005968:	e00a      	b.n	8005980 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	2b04      	cmp	r3, #4
 800596e:	d102      	bne.n	8005976 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005970:	4b25      	ldr	r3, [pc, #148]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x110>)
 8005972:	61bb      	str	r3, [r7, #24]
 8005974:	e004      	b.n	8005980 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b08      	cmp	r3, #8
 800597a:	d101      	bne.n	8005980 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800597c:	4b23      	ldr	r3, [pc, #140]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x114>)
 800597e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	2b0c      	cmp	r3, #12
 8005984:	d134      	bne.n	80059f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005986:	4b1e      	ldr	r3, [pc, #120]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d003      	beq.n	800599e <HAL_RCC_GetSysClockFreq+0xa6>
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b03      	cmp	r3, #3
 800599a:	d003      	beq.n	80059a4 <HAL_RCC_GetSysClockFreq+0xac>
 800599c:	e005      	b.n	80059aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800599e:	4b1a      	ldr	r3, [pc, #104]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x110>)
 80059a0:	617b      	str	r3, [r7, #20]
      break;
 80059a2:	e005      	b.n	80059b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80059a4:	4b19      	ldr	r3, [pc, #100]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x114>)
 80059a6:	617b      	str	r3, [r7, #20]
      break;
 80059a8:	e002      	b.n	80059b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	617b      	str	r3, [r7, #20]
      break;
 80059ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059b0:	4b13      	ldr	r3, [pc, #76]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	091b      	lsrs	r3, r3, #4
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	3301      	adds	r3, #1
 80059bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80059be:	4b10      	ldr	r3, [pc, #64]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	0a1b      	lsrs	r3, r3, #8
 80059c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	fb03 f202 	mul.w	r2, r3, r2
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059d6:	4b0a      	ldr	r3, [pc, #40]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	0e5b      	lsrs	r3, r3, #25
 80059dc:	f003 0303 	and.w	r3, r3, #3
 80059e0:	3301      	adds	r3, #1
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80059f0:	69bb      	ldr	r3, [r7, #24]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3724      	adds	r7, #36	; 0x24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	40021000 	.word	0x40021000
 8005a04:	0800cee0 	.word	0x0800cee0
 8005a08:	00f42400 	.word	0x00f42400
 8005a0c:	007a1200 	.word	0x007a1200

08005a10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a14:	4b03      	ldr	r3, [pc, #12]	; (8005a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a16:	681b      	ldr	r3, [r3, #0]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20000008 	.word	0x20000008

08005a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a2c:	f7ff fff0 	bl	8005a10 <HAL_RCC_GetHCLKFreq>
 8005a30:	4602      	mov	r2, r0
 8005a32:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	0a1b      	lsrs	r3, r3, #8
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	4904      	ldr	r1, [pc, #16]	; (8005a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a3e:	5ccb      	ldrb	r3, [r1, r3]
 8005a40:	f003 031f 	and.w	r3, r3, #31
 8005a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	0800ced8 	.word	0x0800ced8

08005a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a58:	f7ff ffda 	bl	8005a10 <HAL_RCC_GetHCLKFreq>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	0adb      	lsrs	r3, r3, #11
 8005a64:	f003 0307 	and.w	r3, r3, #7
 8005a68:	4904      	ldr	r1, [pc, #16]	; (8005a7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a6a:	5ccb      	ldrb	r3, [r1, r3]
 8005a6c:	f003 031f 	and.w	r3, r3, #31
 8005a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	0800ced8 	.word	0x0800ced8

08005a80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005a88:	2300      	movs	r3, #0
 8005a8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005a8c:	4b27      	ldr	r3, [pc, #156]	; (8005b2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005a98:	f7ff f906 	bl	8004ca8 <HAL_PWREx_GetVoltageRange>
 8005a9c:	6178      	str	r0, [r7, #20]
 8005a9e:	e014      	b.n	8005aca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005aa0:	4b22      	ldr	r3, [pc, #136]	; (8005b2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa4:	4a21      	ldr	r2, [pc, #132]	; (8005b2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8005aac:	4b1f      	ldr	r3, [pc, #124]	; (8005b2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ab8:	f7ff f8f6 	bl	8004ca8 <HAL_PWREx_GetVoltageRange>
 8005abc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005abe:	4b1b      	ldr	r3, [pc, #108]	; (8005b2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac2:	4a1a      	ldr	r2, [pc, #104]	; (8005b2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ac8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad0:	d10b      	bne.n	8005aea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b80      	cmp	r3, #128	; 0x80
 8005ad6:	d913      	bls.n	8005b00 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2ba0      	cmp	r3, #160	; 0xa0
 8005adc:	d902      	bls.n	8005ae4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ade:	2302      	movs	r3, #2
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	e00d      	b.n	8005b00 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	613b      	str	r3, [r7, #16]
 8005ae8:	e00a      	b.n	8005b00 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b7f      	cmp	r3, #127	; 0x7f
 8005aee:	d902      	bls.n	8005af6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005af0:	2302      	movs	r3, #2
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	e004      	b.n	8005b00 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b70      	cmp	r3, #112	; 0x70
 8005afa:	d101      	bne.n	8005b00 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005afc:	2301      	movs	r3, #1
 8005afe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005b00:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f023 020f 	bic.w	r2, r3, #15
 8005b08:	4909      	ldr	r1, [pc, #36]	; (8005b30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005b10:	4b07      	ldr	r3, [pc, #28]	; (8005b30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d001      	beq.n	8005b22 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e000      	b.n	8005b24 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	40022000 	.word	0x40022000

08005b34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b3a:	4b2d      	ldr	r3, [pc, #180]	; (8005bf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d00b      	beq.n	8005b62 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d825      	bhi.n	8005b9c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d008      	beq.n	8005b68 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d11f      	bne.n	8005b9c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005b5c:	4b25      	ldr	r3, [pc, #148]	; (8005bf4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005b5e:	613b      	str	r3, [r7, #16]
    break;
 8005b60:	e01f      	b.n	8005ba2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005b62:	4b25      	ldr	r3, [pc, #148]	; (8005bf8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005b64:	613b      	str	r3, [r7, #16]
    break;
 8005b66:	e01c      	b.n	8005ba2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005b68:	4b21      	ldr	r3, [pc, #132]	; (8005bf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0308 	and.w	r3, r3, #8
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d107      	bne.n	8005b84 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b74:	4b1e      	ldr	r3, [pc, #120]	; (8005bf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b7a:	0a1b      	lsrs	r3, r3, #8
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	617b      	str	r3, [r7, #20]
 8005b82:	e005      	b.n	8005b90 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b84:	4b1a      	ldr	r3, [pc, #104]	; (8005bf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	091b      	lsrs	r3, r3, #4
 8005b8a:	f003 030f 	and.w	r3, r3, #15
 8005b8e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005b90:	4a1a      	ldr	r2, [pc, #104]	; (8005bfc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b98:	613b      	str	r3, [r7, #16]
    break;
 8005b9a:	e002      	b.n	8005ba2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	613b      	str	r3, [r7, #16]
    break;
 8005ba0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ba2:	4b13      	ldr	r3, [pc, #76]	; (8005bf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	091b      	lsrs	r3, r3, #4
 8005ba8:	f003 030f 	and.w	r3, r3, #15
 8005bac:	3301      	adds	r3, #1
 8005bae:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005bb0:	4b0f      	ldr	r3, [pc, #60]	; (8005bf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	0a1b      	lsrs	r3, r3, #8
 8005bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	fb03 f202 	mul.w	r2, r3, r2
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005bc8:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	0e5b      	lsrs	r3, r3, #25
 8005bce:	f003 0303 	and.w	r3, r3, #3
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005be2:	683b      	ldr	r3, [r7, #0]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	371c      	adds	r7, #28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	00f42400 	.word	0x00f42400
 8005bf8:	007a1200 	.word	0x007a1200
 8005bfc:	0800cee0 	.word	0x0800cee0

08005c00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c08:	2300      	movs	r3, #0
 8005c0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d040      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c20:	2b80      	cmp	r3, #128	; 0x80
 8005c22:	d02a      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c24:	2b80      	cmp	r3, #128	; 0x80
 8005c26:	d825      	bhi.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005c28:	2b60      	cmp	r3, #96	; 0x60
 8005c2a:	d026      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c2c:	2b60      	cmp	r3, #96	; 0x60
 8005c2e:	d821      	bhi.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d006      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005c34:	2b40      	cmp	r3, #64	; 0x40
 8005c36:	d81d      	bhi.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d009      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	d010      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005c40:	e018      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c42:	4b89      	ldr	r3, [pc, #548]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	4a88      	ldr	r2, [pc, #544]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c4c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c4e:	e015      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3304      	adds	r3, #4
 8005c54:	2100      	movs	r1, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fb02 	bl	8006260 <RCCEx_PLLSAI1_Config>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c60:	e00c      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	3320      	adds	r3, #32
 8005c66:	2100      	movs	r1, #0
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fbed 	bl	8006448 <RCCEx_PLLSAI2_Config>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c72:	e003      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	74fb      	strb	r3, [r7, #19]
      break;
 8005c78:	e000      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c7c:	7cfb      	ldrb	r3, [r7, #19]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10b      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c82:	4b79      	ldr	r3, [pc, #484]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c88:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c90:	4975      	ldr	r1, [pc, #468]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005c98:	e001      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c9a:	7cfb      	ldrb	r3, [r7, #19]
 8005c9c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d047      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cb2:	d030      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cb8:	d82a      	bhi.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cbe:	d02a      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005cc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cc4:	d824      	bhi.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cca:	d008      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cd0:	d81e      	bhi.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cda:	d010      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005cdc:	e018      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005cde:	4b62      	ldr	r3, [pc, #392]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	4a61      	ldr	r2, [pc, #388]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005cea:	e015      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3304      	adds	r3, #4
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fab4 	bl	8006260 <RCCEx_PLLSAI1_Config>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005cfc:	e00c      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	3320      	adds	r3, #32
 8005d02:	2100      	movs	r1, #0
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fb9f 	bl	8006448 <RCCEx_PLLSAI2_Config>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d0e:	e003      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	74fb      	strb	r3, [r7, #19]
      break;
 8005d14:	e000      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005d16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d18:	7cfb      	ldrb	r3, [r7, #19]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10b      	bne.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d1e:	4b52      	ldr	r3, [pc, #328]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2c:	494e      	ldr	r1, [pc, #312]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005d34:	e001      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d36:	7cfb      	ldrb	r3, [r7, #19]
 8005d38:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 809f 	beq.w	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d4c:	4b46      	ldr	r3, [pc, #280]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e000      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00d      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d62:	4b41      	ldr	r3, [pc, #260]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d66:	4a40      	ldr	r2, [pc, #256]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8005d6e:	4b3e      	ldr	r3, [pc, #248]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d76:	60bb      	str	r3, [r7, #8]
 8005d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d7e:	4b3b      	ldr	r3, [pc, #236]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a3a      	ldr	r2, [pc, #232]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d8a:	f7fd fb95 	bl	80034b8 <HAL_GetTick>
 8005d8e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d90:	e009      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d92:	f7fd fb91 	bl	80034b8 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d902      	bls.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	74fb      	strb	r3, [r7, #19]
        break;
 8005da4:	e005      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005da6:	4b31      	ldr	r3, [pc, #196]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0ef      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005db2:	7cfb      	ldrb	r3, [r7, #19]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d15b      	bne.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005db8:	4b2b      	ldr	r3, [pc, #172]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d01f      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d019      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005dd6:	4b24      	ldr	r3, [pc, #144]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005de2:	4b21      	ldr	r3, [pc, #132]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de8:	4a1f      	ldr	r2, [pc, #124]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005df2:	4b1d      	ldr	r3, [pc, #116]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df8:	4a1b      	ldr	r2, [pc, #108]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e02:	4a19      	ldr	r2, [pc, #100]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d016      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e14:	f7fd fb50 	bl	80034b8 <HAL_GetTick>
 8005e18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e1a:	e00b      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e1c:	f7fd fb4c 	bl	80034b8 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d902      	bls.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	74fb      	strb	r3, [r7, #19]
            break;
 8005e32:	e006      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e34:	4b0c      	ldr	r3, [pc, #48]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0ec      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005e42:	7cfb      	ldrb	r3, [r7, #19]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10c      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e48:	4b07      	ldr	r3, [pc, #28]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e58:	4903      	ldr	r1, [pc, #12]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e60:	e008      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e62:	7cfb      	ldrb	r3, [r7, #19]
 8005e64:	74bb      	strb	r3, [r7, #18]
 8005e66:	e005      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005e68:	40021000 	.word	0x40021000
 8005e6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e70:	7cfb      	ldrb	r3, [r7, #19]
 8005e72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e74:	7c7b      	ldrb	r3, [r7, #17]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d105      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e7a:	4ba0      	ldr	r3, [pc, #640]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7e:	4a9f      	ldr	r2, [pc, #636]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e92:	4b9a      	ldr	r3, [pc, #616]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e98:	f023 0203 	bic.w	r2, r3, #3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea0:	4996      	ldr	r1, [pc, #600]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00a      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005eb4:	4b91      	ldr	r3, [pc, #580]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eba:	f023 020c 	bic.w	r2, r3, #12
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	498e      	ldr	r1, [pc, #568]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0304 	and.w	r3, r3, #4
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ed6:	4b89      	ldr	r3, [pc, #548]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005edc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee4:	4985      	ldr	r1, [pc, #532]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0308 	and.w	r3, r3, #8
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ef8:	4b80      	ldr	r3, [pc, #512]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f06:	497d      	ldr	r1, [pc, #500]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0310 	and.w	r3, r3, #16
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f1a:	4b78      	ldr	r3, [pc, #480]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f28:	4974      	ldr	r1, [pc, #464]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00a      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f3c:	4b6f      	ldr	r3, [pc, #444]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f4a:	496c      	ldr	r1, [pc, #432]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f5e:	4b67      	ldr	r3, [pc, #412]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f6c:	4963      	ldr	r1, [pc, #396]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f80:	4b5e      	ldr	r3, [pc, #376]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f8e:	495b      	ldr	r1, [pc, #364]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fa2:	4b56      	ldr	r3, [pc, #344]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb0:	4952      	ldr	r1, [pc, #328]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fc4:	4b4d      	ldr	r3, [pc, #308]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd2:	494a      	ldr	r1, [pc, #296]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005fe6:	4b45      	ldr	r3, [pc, #276]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff4:	4941      	ldr	r1, [pc, #260]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00a      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006008:	4b3c      	ldr	r3, [pc, #240]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800600a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800600e:	f023 0203 	bic.w	r2, r3, #3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006016:	4939      	ldr	r1, [pc, #228]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006018:	4313      	orrs	r3, r2
 800601a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d028      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800602a:	4b34      	ldr	r3, [pc, #208]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800602c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006030:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006038:	4930      	ldr	r1, [pc, #192]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800603a:	4313      	orrs	r3, r2
 800603c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006044:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006048:	d106      	bne.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800604a:	4b2c      	ldr	r3, [pc, #176]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	4a2b      	ldr	r2, [pc, #172]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006050:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006054:	60d3      	str	r3, [r2, #12]
 8006056:	e011      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800605c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006060:	d10c      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3304      	adds	r3, #4
 8006066:	2101      	movs	r1, #1
 8006068:	4618      	mov	r0, r3
 800606a:	f000 f8f9 	bl	8006260 <RCCEx_PLLSAI1_Config>
 800606e:	4603      	mov	r3, r0
 8006070:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006072:	7cfb      	ldrb	r3, [r7, #19]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006078:	7cfb      	ldrb	r3, [r7, #19]
 800607a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d04d      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800608c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006090:	d108      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006092:	4b1a      	ldr	r3, [pc, #104]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006094:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006098:	4a18      	ldr	r2, [pc, #96]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800609a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800609e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80060a2:	e012      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80060a4:	4b15      	ldr	r3, [pc, #84]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060aa:	4a14      	ldr	r2, [pc, #80]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060b0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80060b4:	4b11      	ldr	r3, [pc, #68]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060c2:	490e      	ldr	r1, [pc, #56]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060d2:	d106      	bne.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060d4:	4b09      	ldr	r3, [pc, #36]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	4a08      	ldr	r2, [pc, #32]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060de:	60d3      	str	r3, [r2, #12]
 80060e0:	e020      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060ea:	d109      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80060ec:	4b03      	ldr	r3, [pc, #12]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	4a02      	ldr	r2, [pc, #8]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f6:	60d3      	str	r3, [r2, #12]
 80060f8:	e014      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80060fa:	bf00      	nop
 80060fc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006104:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006108:	d10c      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3304      	adds	r3, #4
 800610e:	2101      	movs	r1, #1
 8006110:	4618      	mov	r0, r3
 8006112:	f000 f8a5 	bl	8006260 <RCCEx_PLLSAI1_Config>
 8006116:	4603      	mov	r3, r0
 8006118:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800611a:	7cfb      	ldrb	r3, [r7, #19]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006120:	7cfb      	ldrb	r3, [r7, #19]
 8006122:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d028      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006130:	4b4a      	ldr	r3, [pc, #296]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006136:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800613e:	4947      	ldr	r1, [pc, #284]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006140:	4313      	orrs	r3, r2
 8006142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800614a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800614e:	d106      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006150:	4b42      	ldr	r3, [pc, #264]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	4a41      	ldr	r2, [pc, #260]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800615a:	60d3      	str	r3, [r2, #12]
 800615c:	e011      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006162:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006166:	d10c      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3304      	adds	r3, #4
 800616c:	2101      	movs	r1, #1
 800616e:	4618      	mov	r0, r3
 8006170:	f000 f876 	bl	8006260 <RCCEx_PLLSAI1_Config>
 8006174:	4603      	mov	r3, r0
 8006176:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006178:	7cfb      	ldrb	r3, [r7, #19]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800617e:	7cfb      	ldrb	r3, [r7, #19]
 8006180:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d01e      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800618e:	4b33      	ldr	r3, [pc, #204]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006194:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800619e:	492f      	ldr	r1, [pc, #188]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061b0:	d10c      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	3304      	adds	r3, #4
 80061b6:	2102      	movs	r1, #2
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 f851 	bl	8006260 <RCCEx_PLLSAI1_Config>
 80061be:	4603      	mov	r3, r0
 80061c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061c2:	7cfb      	ldrb	r3, [r7, #19]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80061c8:	7cfb      	ldrb	r3, [r7, #19]
 80061ca:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00b      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80061d8:	4b20      	ldr	r3, [pc, #128]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061de:	f023 0204 	bic.w	r2, r3, #4
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061e8:	491c      	ldr	r1, [pc, #112]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00b      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80061fc:	4b17      	ldr	r3, [pc, #92]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006202:	f023 0218 	bic.w	r2, r3, #24
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620c:	4913      	ldr	r1, [pc, #76]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800620e:	4313      	orrs	r3, r2
 8006210:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d017      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006220:	4b0e      	ldr	r3, [pc, #56]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006222:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006226:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006230:	490a      	ldr	r1, [pc, #40]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006232:	4313      	orrs	r3, r2
 8006234:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800623e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006242:	d105      	bne.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006244:	4b05      	ldr	r3, [pc, #20]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	4a04      	ldr	r2, [pc, #16]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800624a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800624e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006250:	7cbb      	ldrb	r3, [r7, #18]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	40021000 	.word	0x40021000

08006260 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800626e:	4b72      	ldr	r3, [pc, #456]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00e      	beq.n	8006298 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800627a:	4b6f      	ldr	r3, [pc, #444]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0203 	and.w	r2, r3, #3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d103      	bne.n	8006292 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
       ||
 800628e:	2b00      	cmp	r3, #0
 8006290:	d142      	bne.n	8006318 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	73fb      	strb	r3, [r7, #15]
 8006296:	e03f      	b.n	8006318 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b03      	cmp	r3, #3
 800629e:	d018      	beq.n	80062d2 <RCCEx_PLLSAI1_Config+0x72>
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	d825      	bhi.n	80062f0 <RCCEx_PLLSAI1_Config+0x90>
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d002      	beq.n	80062ae <RCCEx_PLLSAI1_Config+0x4e>
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d009      	beq.n	80062c0 <RCCEx_PLLSAI1_Config+0x60>
 80062ac:	e020      	b.n	80062f0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062ae:	4b62      	ldr	r3, [pc, #392]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d11d      	bne.n	80062f6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062be:	e01a      	b.n	80062f6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062c0:	4b5d      	ldr	r3, [pc, #372]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d116      	bne.n	80062fa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062d0:	e013      	b.n	80062fa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062d2:	4b59      	ldr	r3, [pc, #356]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10f      	bne.n	80062fe <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062de:	4b56      	ldr	r3, [pc, #344]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d109      	bne.n	80062fe <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062ee:	e006      	b.n	80062fe <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	73fb      	strb	r3, [r7, #15]
      break;
 80062f4:	e004      	b.n	8006300 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80062f6:	bf00      	nop
 80062f8:	e002      	b.n	8006300 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80062fa:	bf00      	nop
 80062fc:	e000      	b.n	8006300 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80062fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d108      	bne.n	8006318 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006306:	4b4c      	ldr	r3, [pc, #304]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f023 0203 	bic.w	r2, r3, #3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4949      	ldr	r1, [pc, #292]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006314:	4313      	orrs	r3, r2
 8006316:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006318:	7bfb      	ldrb	r3, [r7, #15]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f040 8086 	bne.w	800642c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006320:	4b45      	ldr	r3, [pc, #276]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a44      	ldr	r2, [pc, #272]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006326:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800632a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800632c:	f7fd f8c4 	bl	80034b8 <HAL_GetTick>
 8006330:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006332:	e009      	b.n	8006348 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006334:	f7fd f8c0 	bl	80034b8 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d902      	bls.n	8006348 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	73fb      	strb	r3, [r7, #15]
        break;
 8006346:	e005      	b.n	8006354 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006348:	4b3b      	ldr	r3, [pc, #236]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1ef      	bne.n	8006334 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d168      	bne.n	800642c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d113      	bne.n	8006388 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006360:	4b35      	ldr	r3, [pc, #212]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006362:	691a      	ldr	r2, [r3, #16]
 8006364:	4b35      	ldr	r3, [pc, #212]	; (800643c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006366:	4013      	ands	r3, r2
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	6892      	ldr	r2, [r2, #8]
 800636c:	0211      	lsls	r1, r2, #8
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	68d2      	ldr	r2, [r2, #12]
 8006372:	06d2      	lsls	r2, r2, #27
 8006374:	4311      	orrs	r1, r2
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	6852      	ldr	r2, [r2, #4]
 800637a:	3a01      	subs	r2, #1
 800637c:	0112      	lsls	r2, r2, #4
 800637e:	430a      	orrs	r2, r1
 8006380:	492d      	ldr	r1, [pc, #180]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006382:	4313      	orrs	r3, r2
 8006384:	610b      	str	r3, [r1, #16]
 8006386:	e02d      	b.n	80063e4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d115      	bne.n	80063ba <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800638e:	4b2a      	ldr	r3, [pc, #168]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006390:	691a      	ldr	r2, [r3, #16]
 8006392:	4b2b      	ldr	r3, [pc, #172]	; (8006440 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006394:	4013      	ands	r3, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6892      	ldr	r2, [r2, #8]
 800639a:	0211      	lsls	r1, r2, #8
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6912      	ldr	r2, [r2, #16]
 80063a0:	0852      	lsrs	r2, r2, #1
 80063a2:	3a01      	subs	r2, #1
 80063a4:	0552      	lsls	r2, r2, #21
 80063a6:	4311      	orrs	r1, r2
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6852      	ldr	r2, [r2, #4]
 80063ac:	3a01      	subs	r2, #1
 80063ae:	0112      	lsls	r2, r2, #4
 80063b0:	430a      	orrs	r2, r1
 80063b2:	4921      	ldr	r1, [pc, #132]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	610b      	str	r3, [r1, #16]
 80063b8:	e014      	b.n	80063e4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063ba:	4b1f      	ldr	r3, [pc, #124]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063bc:	691a      	ldr	r2, [r3, #16]
 80063be:	4b21      	ldr	r3, [pc, #132]	; (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	6892      	ldr	r2, [r2, #8]
 80063c6:	0211      	lsls	r1, r2, #8
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	6952      	ldr	r2, [r2, #20]
 80063cc:	0852      	lsrs	r2, r2, #1
 80063ce:	3a01      	subs	r2, #1
 80063d0:	0652      	lsls	r2, r2, #25
 80063d2:	4311      	orrs	r1, r2
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6852      	ldr	r2, [r2, #4]
 80063d8:	3a01      	subs	r2, #1
 80063da:	0112      	lsls	r2, r2, #4
 80063dc:	430a      	orrs	r2, r1
 80063de:	4916      	ldr	r1, [pc, #88]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80063e4:	4b14      	ldr	r3, [pc, #80]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a13      	ldr	r2, [pc, #76]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f0:	f7fd f862 	bl	80034b8 <HAL_GetTick>
 80063f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063f6:	e009      	b.n	800640c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063f8:	f7fd f85e 	bl	80034b8 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d902      	bls.n	800640c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	73fb      	strb	r3, [r7, #15]
          break;
 800640a:	e005      	b.n	8006418 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800640c:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0ef      	beq.n	80063f8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d106      	bne.n	800642c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800641e:	4b06      	ldr	r3, [pc, #24]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006420:	691a      	ldr	r2, [r3, #16]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	4904      	ldr	r1, [pc, #16]	; (8006438 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006428:	4313      	orrs	r3, r2
 800642a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800642c:	7bfb      	ldrb	r3, [r7, #15]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40021000 	.word	0x40021000
 800643c:	07ff800f 	.word	0x07ff800f
 8006440:	ff9f800f 	.word	0xff9f800f
 8006444:	f9ff800f 	.word	0xf9ff800f

08006448 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006456:	4b72      	ldr	r3, [pc, #456]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00e      	beq.n	8006480 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006462:	4b6f      	ldr	r3, [pc, #444]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f003 0203 	and.w	r2, r3, #3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d103      	bne.n	800647a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
       ||
 8006476:	2b00      	cmp	r3, #0
 8006478:	d142      	bne.n	8006500 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	73fb      	strb	r3, [r7, #15]
 800647e:	e03f      	b.n	8006500 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b03      	cmp	r3, #3
 8006486:	d018      	beq.n	80064ba <RCCEx_PLLSAI2_Config+0x72>
 8006488:	2b03      	cmp	r3, #3
 800648a:	d825      	bhi.n	80064d8 <RCCEx_PLLSAI2_Config+0x90>
 800648c:	2b01      	cmp	r3, #1
 800648e:	d002      	beq.n	8006496 <RCCEx_PLLSAI2_Config+0x4e>
 8006490:	2b02      	cmp	r3, #2
 8006492:	d009      	beq.n	80064a8 <RCCEx_PLLSAI2_Config+0x60>
 8006494:	e020      	b.n	80064d8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006496:	4b62      	ldr	r3, [pc, #392]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d11d      	bne.n	80064de <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064a6:	e01a      	b.n	80064de <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064a8:	4b5d      	ldr	r3, [pc, #372]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d116      	bne.n	80064e2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064b8:	e013      	b.n	80064e2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80064ba:	4b59      	ldr	r3, [pc, #356]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10f      	bne.n	80064e6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064c6:	4b56      	ldr	r3, [pc, #344]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d109      	bne.n	80064e6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064d6:	e006      	b.n	80064e6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	73fb      	strb	r3, [r7, #15]
      break;
 80064dc:	e004      	b.n	80064e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80064de:	bf00      	nop
 80064e0:	e002      	b.n	80064e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80064e2:	bf00      	nop
 80064e4:	e000      	b.n	80064e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80064e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d108      	bne.n	8006500 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80064ee:	4b4c      	ldr	r3, [pc, #304]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f023 0203 	bic.w	r2, r3, #3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4949      	ldr	r1, [pc, #292]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	2b00      	cmp	r3, #0
 8006504:	f040 8086 	bne.w	8006614 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006508:	4b45      	ldr	r3, [pc, #276]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a44      	ldr	r2, [pc, #272]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 800650e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006512:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006514:	f7fc ffd0 	bl	80034b8 <HAL_GetTick>
 8006518:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800651a:	e009      	b.n	8006530 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800651c:	f7fc ffcc 	bl	80034b8 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d902      	bls.n	8006530 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	73fb      	strb	r3, [r7, #15]
        break;
 800652e:	e005      	b.n	800653c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006530:	4b3b      	ldr	r3, [pc, #236]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1ef      	bne.n	800651c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d168      	bne.n	8006614 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d113      	bne.n	8006570 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006548:	4b35      	ldr	r3, [pc, #212]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 800654a:	695a      	ldr	r2, [r3, #20]
 800654c:	4b35      	ldr	r3, [pc, #212]	; (8006624 <RCCEx_PLLSAI2_Config+0x1dc>)
 800654e:	4013      	ands	r3, r2
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	6892      	ldr	r2, [r2, #8]
 8006554:	0211      	lsls	r1, r2, #8
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	68d2      	ldr	r2, [r2, #12]
 800655a:	06d2      	lsls	r2, r2, #27
 800655c:	4311      	orrs	r1, r2
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6852      	ldr	r2, [r2, #4]
 8006562:	3a01      	subs	r2, #1
 8006564:	0112      	lsls	r2, r2, #4
 8006566:	430a      	orrs	r2, r1
 8006568:	492d      	ldr	r1, [pc, #180]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 800656a:	4313      	orrs	r3, r2
 800656c:	614b      	str	r3, [r1, #20]
 800656e:	e02d      	b.n	80065cc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d115      	bne.n	80065a2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006576:	4b2a      	ldr	r3, [pc, #168]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006578:	695a      	ldr	r2, [r3, #20]
 800657a:	4b2b      	ldr	r3, [pc, #172]	; (8006628 <RCCEx_PLLSAI2_Config+0x1e0>)
 800657c:	4013      	ands	r3, r2
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6892      	ldr	r2, [r2, #8]
 8006582:	0211      	lsls	r1, r2, #8
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6912      	ldr	r2, [r2, #16]
 8006588:	0852      	lsrs	r2, r2, #1
 800658a:	3a01      	subs	r2, #1
 800658c:	0552      	lsls	r2, r2, #21
 800658e:	4311      	orrs	r1, r2
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6852      	ldr	r2, [r2, #4]
 8006594:	3a01      	subs	r2, #1
 8006596:	0112      	lsls	r2, r2, #4
 8006598:	430a      	orrs	r2, r1
 800659a:	4921      	ldr	r1, [pc, #132]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 800659c:	4313      	orrs	r3, r2
 800659e:	614b      	str	r3, [r1, #20]
 80065a0:	e014      	b.n	80065cc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065a2:	4b1f      	ldr	r3, [pc, #124]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065a4:	695a      	ldr	r2, [r3, #20]
 80065a6:	4b21      	ldr	r3, [pc, #132]	; (800662c <RCCEx_PLLSAI2_Config+0x1e4>)
 80065a8:	4013      	ands	r3, r2
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6892      	ldr	r2, [r2, #8]
 80065ae:	0211      	lsls	r1, r2, #8
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6952      	ldr	r2, [r2, #20]
 80065b4:	0852      	lsrs	r2, r2, #1
 80065b6:	3a01      	subs	r2, #1
 80065b8:	0652      	lsls	r2, r2, #25
 80065ba:	4311      	orrs	r1, r2
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6852      	ldr	r2, [r2, #4]
 80065c0:	3a01      	subs	r2, #1
 80065c2:	0112      	lsls	r2, r2, #4
 80065c4:	430a      	orrs	r2, r1
 80065c6:	4916      	ldr	r1, [pc, #88]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80065cc:	4b14      	ldr	r3, [pc, #80]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a13      	ldr	r2, [pc, #76]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d8:	f7fc ff6e 	bl	80034b8 <HAL_GetTick>
 80065dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065de:	e009      	b.n	80065f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80065e0:	f7fc ff6a 	bl	80034b8 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d902      	bls.n	80065f4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	73fb      	strb	r3, [r7, #15]
          break;
 80065f2:	e005      	b.n	8006600 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065f4:	4b0a      	ldr	r3, [pc, #40]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d0ef      	beq.n	80065e0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d106      	bne.n	8006614 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006606:	4b06      	ldr	r3, [pc, #24]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006608:	695a      	ldr	r2, [r3, #20]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	4904      	ldr	r1, [pc, #16]	; (8006620 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006610:	4313      	orrs	r3, r2
 8006612:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006614:	7bfb      	ldrb	r3, [r7, #15]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	40021000 	.word	0x40021000
 8006624:	07ff800f 	.word	0x07ff800f
 8006628:	ff9f800f 	.word	0xff9f800f
 800662c:	f9ff800f 	.word	0xf9ff800f

08006630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e049      	b.n	80066d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d106      	bne.n	800665c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fc f926 	bl	80028a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3304      	adds	r3, #4
 800666c:	4619      	mov	r1, r3
 800666e:	4610      	mov	r0, r2
 8006670:	f000 ff60 	bl	8007534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
	...

080066e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d001      	beq.n	80066f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e047      	b.n	8006788 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a23      	ldr	r2, [pc, #140]	; (8006794 <HAL_TIM_Base_Start+0xb4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d01d      	beq.n	8006746 <HAL_TIM_Base_Start+0x66>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006712:	d018      	beq.n	8006746 <HAL_TIM_Base_Start+0x66>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1f      	ldr	r2, [pc, #124]	; (8006798 <HAL_TIM_Base_Start+0xb8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d013      	beq.n	8006746 <HAL_TIM_Base_Start+0x66>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a1e      	ldr	r2, [pc, #120]	; (800679c <HAL_TIM_Base_Start+0xbc>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00e      	beq.n	8006746 <HAL_TIM_Base_Start+0x66>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a1c      	ldr	r2, [pc, #112]	; (80067a0 <HAL_TIM_Base_Start+0xc0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d009      	beq.n	8006746 <HAL_TIM_Base_Start+0x66>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a1b      	ldr	r2, [pc, #108]	; (80067a4 <HAL_TIM_Base_Start+0xc4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d004      	beq.n	8006746 <HAL_TIM_Base_Start+0x66>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a19      	ldr	r2, [pc, #100]	; (80067a8 <HAL_TIM_Base_Start+0xc8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d115      	bne.n	8006772 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	4b17      	ldr	r3, [pc, #92]	; (80067ac <HAL_TIM_Base_Start+0xcc>)
 800674e:	4013      	ands	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2b06      	cmp	r3, #6
 8006756:	d015      	beq.n	8006784 <HAL_TIM_Base_Start+0xa4>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800675e:	d011      	beq.n	8006784 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006770:	e008      	b.n	8006784 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f042 0201 	orr.w	r2, r2, #1
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	e000      	b.n	8006786 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006784:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	40012c00 	.word	0x40012c00
 8006798:	40000400 	.word	0x40000400
 800679c:	40000800 	.word	0x40000800
 80067a0:	40000c00 	.word	0x40000c00
 80067a4:	40013400 	.word	0x40013400
 80067a8:	40014000 	.word	0x40014000
 80067ac:	00010007 	.word	0x00010007

080067b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e049      	b.n	8006856 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d106      	bne.n	80067dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f841 	bl	800685e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	3304      	adds	r3, #4
 80067ec:	4619      	mov	r1, r3
 80067ee:	4610      	mov	r0, r2
 80067f0:	f000 fea0 	bl	8007534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
	...

08006874 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d109      	bne.n	8006898 <HAL_TIM_PWM_Start+0x24>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b01      	cmp	r3, #1
 800688e:	bf14      	ite	ne
 8006890:	2301      	movne	r3, #1
 8006892:	2300      	moveq	r3, #0
 8006894:	b2db      	uxtb	r3, r3
 8006896:	e03c      	b.n	8006912 <HAL_TIM_PWM_Start+0x9e>
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	2b04      	cmp	r3, #4
 800689c:	d109      	bne.n	80068b2 <HAL_TIM_PWM_Start+0x3e>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	bf14      	ite	ne
 80068aa:	2301      	movne	r3, #1
 80068ac:	2300      	moveq	r3, #0
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	e02f      	b.n	8006912 <HAL_TIM_PWM_Start+0x9e>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d109      	bne.n	80068cc <HAL_TIM_PWM_Start+0x58>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	bf14      	ite	ne
 80068c4:	2301      	movne	r3, #1
 80068c6:	2300      	moveq	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	e022      	b.n	8006912 <HAL_TIM_PWM_Start+0x9e>
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2b0c      	cmp	r3, #12
 80068d0:	d109      	bne.n	80068e6 <HAL_TIM_PWM_Start+0x72>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b01      	cmp	r3, #1
 80068dc:	bf14      	ite	ne
 80068de:	2301      	movne	r3, #1
 80068e0:	2300      	moveq	r3, #0
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	e015      	b.n	8006912 <HAL_TIM_PWM_Start+0x9e>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b10      	cmp	r3, #16
 80068ea:	d109      	bne.n	8006900 <HAL_TIM_PWM_Start+0x8c>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	bf14      	ite	ne
 80068f8:	2301      	movne	r3, #1
 80068fa:	2300      	moveq	r3, #0
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	e008      	b.n	8006912 <HAL_TIM_PWM_Start+0x9e>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b01      	cmp	r3, #1
 800690a:	bf14      	ite	ne
 800690c:	2301      	movne	r3, #1
 800690e:	2300      	moveq	r3, #0
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e09c      	b.n	8006a54 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d104      	bne.n	800692a <HAL_TIM_PWM_Start+0xb6>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006928:	e023      	b.n	8006972 <HAL_TIM_PWM_Start+0xfe>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b04      	cmp	r3, #4
 800692e:	d104      	bne.n	800693a <HAL_TIM_PWM_Start+0xc6>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006938:	e01b      	b.n	8006972 <HAL_TIM_PWM_Start+0xfe>
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b08      	cmp	r3, #8
 800693e:	d104      	bne.n	800694a <HAL_TIM_PWM_Start+0xd6>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006948:	e013      	b.n	8006972 <HAL_TIM_PWM_Start+0xfe>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b0c      	cmp	r3, #12
 800694e:	d104      	bne.n	800695a <HAL_TIM_PWM_Start+0xe6>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006958:	e00b      	b.n	8006972 <HAL_TIM_PWM_Start+0xfe>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b10      	cmp	r3, #16
 800695e:	d104      	bne.n	800696a <HAL_TIM_PWM_Start+0xf6>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006968:	e003      	b.n	8006972 <HAL_TIM_PWM_Start+0xfe>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2202      	movs	r2, #2
 800696e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2201      	movs	r2, #1
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f001 fb08 	bl	8007f90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a35      	ldr	r2, [pc, #212]	; (8006a5c <HAL_TIM_PWM_Start+0x1e8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d013      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x13e>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a34      	ldr	r2, [pc, #208]	; (8006a60 <HAL_TIM_PWM_Start+0x1ec>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00e      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x13e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a32      	ldr	r2, [pc, #200]	; (8006a64 <HAL_TIM_PWM_Start+0x1f0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d009      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x13e>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a31      	ldr	r2, [pc, #196]	; (8006a68 <HAL_TIM_PWM_Start+0x1f4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d004      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x13e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a2f      	ldr	r2, [pc, #188]	; (8006a6c <HAL_TIM_PWM_Start+0x1f8>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d101      	bne.n	80069b6 <HAL_TIM_PWM_Start+0x142>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e000      	b.n	80069b8 <HAL_TIM_PWM_Start+0x144>
 80069b6:	2300      	movs	r3, #0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d007      	beq.n	80069cc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a22      	ldr	r2, [pc, #136]	; (8006a5c <HAL_TIM_PWM_Start+0x1e8>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d01d      	beq.n	8006a12 <HAL_TIM_PWM_Start+0x19e>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069de:	d018      	beq.n	8006a12 <HAL_TIM_PWM_Start+0x19e>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a22      	ldr	r2, [pc, #136]	; (8006a70 <HAL_TIM_PWM_Start+0x1fc>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d013      	beq.n	8006a12 <HAL_TIM_PWM_Start+0x19e>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a21      	ldr	r2, [pc, #132]	; (8006a74 <HAL_TIM_PWM_Start+0x200>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00e      	beq.n	8006a12 <HAL_TIM_PWM_Start+0x19e>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a1f      	ldr	r2, [pc, #124]	; (8006a78 <HAL_TIM_PWM_Start+0x204>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d009      	beq.n	8006a12 <HAL_TIM_PWM_Start+0x19e>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a17      	ldr	r2, [pc, #92]	; (8006a60 <HAL_TIM_PWM_Start+0x1ec>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d004      	beq.n	8006a12 <HAL_TIM_PWM_Start+0x19e>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a15      	ldr	r2, [pc, #84]	; (8006a64 <HAL_TIM_PWM_Start+0x1f0>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d115      	bne.n	8006a3e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	4b18      	ldr	r3, [pc, #96]	; (8006a7c <HAL_TIM_PWM_Start+0x208>)
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b06      	cmp	r3, #6
 8006a22:	d015      	beq.n	8006a50 <HAL_TIM_PWM_Start+0x1dc>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a2a:	d011      	beq.n	8006a50 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0201 	orr.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a3c:	e008      	b.n	8006a50 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0201 	orr.w	r2, r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	e000      	b.n	8006a52 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	40012c00 	.word	0x40012c00
 8006a60:	40013400 	.word	0x40013400
 8006a64:	40014000 	.word	0x40014000
 8006a68:	40014400 	.word	0x40014400
 8006a6c:	40014800 	.word	0x40014800
 8006a70:	40000400 	.word	0x40000400
 8006a74:	40000800 	.word	0x40000800
 8006a78:	40000c00 	.word	0x40000c00
 8006a7c:	00010007 	.word	0x00010007

08006a80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e049      	b.n	8006b26 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d106      	bne.n	8006aac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f841 	bl	8006b2e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	3304      	adds	r3, #4
 8006abc:	4619      	mov	r1, r3
 8006abe:	4610      	mov	r0, r2
 8006ac0:	f000 fd38 	bl	8007534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b083      	sub	sp, #12
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006b36:	bf00      	nop
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
	...

08006b44 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d104      	bne.n	8006b62 <HAL_TIM_IC_Start_IT+0x1e>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	e023      	b.n	8006baa <HAL_TIM_IC_Start_IT+0x66>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d104      	bne.n	8006b72 <HAL_TIM_IC_Start_IT+0x2e>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	e01b      	b.n	8006baa <HAL_TIM_IC_Start_IT+0x66>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d104      	bne.n	8006b82 <HAL_TIM_IC_Start_IT+0x3e>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	e013      	b.n	8006baa <HAL_TIM_IC_Start_IT+0x66>
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b0c      	cmp	r3, #12
 8006b86:	d104      	bne.n	8006b92 <HAL_TIM_IC_Start_IT+0x4e>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	e00b      	b.n	8006baa <HAL_TIM_IC_Start_IT+0x66>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b10      	cmp	r3, #16
 8006b96:	d104      	bne.n	8006ba2 <HAL_TIM_IC_Start_IT+0x5e>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	e003      	b.n	8006baa <HAL_TIM_IC_Start_IT+0x66>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d104      	bne.n	8006bbc <HAL_TIM_IC_Start_IT+0x78>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	e013      	b.n	8006be4 <HAL_TIM_IC_Start_IT+0xa0>
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d104      	bne.n	8006bcc <HAL_TIM_IC_Start_IT+0x88>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	e00b      	b.n	8006be4 <HAL_TIM_IC_Start_IT+0xa0>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2b08      	cmp	r3, #8
 8006bd0:	d104      	bne.n	8006bdc <HAL_TIM_IC_Start_IT+0x98>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	e003      	b.n	8006be4 <HAL_TIM_IC_Start_IT+0xa0>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006be6:	7bbb      	ldrb	r3, [r7, #14]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d102      	bne.n	8006bf2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bec:	7b7b      	ldrb	r3, [r7, #13]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d001      	beq.n	8006bf6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e0dd      	b.n	8006db2 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d104      	bne.n	8006c06 <HAL_TIM_IC_Start_IT+0xc2>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c04:	e023      	b.n	8006c4e <HAL_TIM_IC_Start_IT+0x10a>
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b04      	cmp	r3, #4
 8006c0a:	d104      	bne.n	8006c16 <HAL_TIM_IC_Start_IT+0xd2>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c14:	e01b      	b.n	8006c4e <HAL_TIM_IC_Start_IT+0x10a>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b08      	cmp	r3, #8
 8006c1a:	d104      	bne.n	8006c26 <HAL_TIM_IC_Start_IT+0xe2>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c24:	e013      	b.n	8006c4e <HAL_TIM_IC_Start_IT+0x10a>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b0c      	cmp	r3, #12
 8006c2a:	d104      	bne.n	8006c36 <HAL_TIM_IC_Start_IT+0xf2>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c34:	e00b      	b.n	8006c4e <HAL_TIM_IC_Start_IT+0x10a>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b10      	cmp	r3, #16
 8006c3a:	d104      	bne.n	8006c46 <HAL_TIM_IC_Start_IT+0x102>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c44:	e003      	b.n	8006c4e <HAL_TIM_IC_Start_IT+0x10a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2202      	movs	r2, #2
 8006c4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d104      	bne.n	8006c5e <HAL_TIM_IC_Start_IT+0x11a>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c5c:	e013      	b.n	8006c86 <HAL_TIM_IC_Start_IT+0x142>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b04      	cmp	r3, #4
 8006c62:	d104      	bne.n	8006c6e <HAL_TIM_IC_Start_IT+0x12a>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c6c:	e00b      	b.n	8006c86 <HAL_TIM_IC_Start_IT+0x142>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	d104      	bne.n	8006c7e <HAL_TIM_IC_Start_IT+0x13a>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c7c:	e003      	b.n	8006c86 <HAL_TIM_IC_Start_IT+0x142>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2202      	movs	r2, #2
 8006c82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b0c      	cmp	r3, #12
 8006c8a:	d841      	bhi.n	8006d10 <HAL_TIM_IC_Start_IT+0x1cc>
 8006c8c:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <HAL_TIM_IC_Start_IT+0x150>)
 8006c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c92:	bf00      	nop
 8006c94:	08006cc9 	.word	0x08006cc9
 8006c98:	08006d11 	.word	0x08006d11
 8006c9c:	08006d11 	.word	0x08006d11
 8006ca0:	08006d11 	.word	0x08006d11
 8006ca4:	08006cdb 	.word	0x08006cdb
 8006ca8:	08006d11 	.word	0x08006d11
 8006cac:	08006d11 	.word	0x08006d11
 8006cb0:	08006d11 	.word	0x08006d11
 8006cb4:	08006ced 	.word	0x08006ced
 8006cb8:	08006d11 	.word	0x08006d11
 8006cbc:	08006d11 	.word	0x08006d11
 8006cc0:	08006d11 	.word	0x08006d11
 8006cc4:	08006cff 	.word	0x08006cff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0202 	orr.w	r2, r2, #2
 8006cd6:	60da      	str	r2, [r3, #12]
      break;
 8006cd8:	e01d      	b.n	8006d16 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68da      	ldr	r2, [r3, #12]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f042 0204 	orr.w	r2, r2, #4
 8006ce8:	60da      	str	r2, [r3, #12]
      break;
 8006cea:	e014      	b.n	8006d16 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68da      	ldr	r2, [r3, #12]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0208 	orr.w	r2, r2, #8
 8006cfa:	60da      	str	r2, [r3, #12]
      break;
 8006cfc:	e00b      	b.n	8006d16 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68da      	ldr	r2, [r3, #12]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f042 0210 	orr.w	r2, r2, #16
 8006d0c:	60da      	str	r2, [r3, #12]
      break;
 8006d0e:	e002      	b.n	8006d16 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	73fb      	strb	r3, [r7, #15]
      break;
 8006d14:	bf00      	nop
  }

  if (status == HAL_OK)
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d149      	bne.n	8006db0 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2201      	movs	r2, #1
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f001 f933 	bl	8007f90 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a23      	ldr	r2, [pc, #140]	; (8006dbc <HAL_TIM_IC_Start_IT+0x278>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d01d      	beq.n	8006d70 <HAL_TIM_IC_Start_IT+0x22c>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d3c:	d018      	beq.n	8006d70 <HAL_TIM_IC_Start_IT+0x22c>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a1f      	ldr	r2, [pc, #124]	; (8006dc0 <HAL_TIM_IC_Start_IT+0x27c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d013      	beq.n	8006d70 <HAL_TIM_IC_Start_IT+0x22c>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a1d      	ldr	r2, [pc, #116]	; (8006dc4 <HAL_TIM_IC_Start_IT+0x280>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00e      	beq.n	8006d70 <HAL_TIM_IC_Start_IT+0x22c>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a1c      	ldr	r2, [pc, #112]	; (8006dc8 <HAL_TIM_IC_Start_IT+0x284>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d009      	beq.n	8006d70 <HAL_TIM_IC_Start_IT+0x22c>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a1a      	ldr	r2, [pc, #104]	; (8006dcc <HAL_TIM_IC_Start_IT+0x288>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d004      	beq.n	8006d70 <HAL_TIM_IC_Start_IT+0x22c>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a19      	ldr	r2, [pc, #100]	; (8006dd0 <HAL_TIM_IC_Start_IT+0x28c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d115      	bne.n	8006d9c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689a      	ldr	r2, [r3, #8]
 8006d76:	4b17      	ldr	r3, [pc, #92]	; (8006dd4 <HAL_TIM_IC_Start_IT+0x290>)
 8006d78:	4013      	ands	r3, r2
 8006d7a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2b06      	cmp	r3, #6
 8006d80:	d015      	beq.n	8006dae <HAL_TIM_IC_Start_IT+0x26a>
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d88:	d011      	beq.n	8006dae <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f042 0201 	orr.w	r2, r2, #1
 8006d98:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d9a:	e008      	b.n	8006dae <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f042 0201 	orr.w	r2, r2, #1
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	e000      	b.n	8006db0 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dae:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	40012c00 	.word	0x40012c00
 8006dc0:	40000400 	.word	0x40000400
 8006dc4:	40000800 	.word	0x40000800
 8006dc8:	40000c00 	.word	0x40000c00
 8006dcc:	40013400 	.word	0x40013400
 8006dd0:	40014000 	.word	0x40014000
 8006dd4:	00010007 	.word	0x00010007

08006dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d020      	beq.n	8006e3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d01b      	beq.n	8006e3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f06f 0202 	mvn.w	r2, #2
 8006e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fb67 	bl	80074f6 <HAL_TIM_IC_CaptureCallback>
 8006e28:	e005      	b.n	8006e36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fb59 	bl	80074e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fb6a 	bl	800750a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f003 0304 	and.w	r3, r3, #4
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d020      	beq.n	8006e88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f003 0304 	and.w	r3, r3, #4
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d01b      	beq.n	8006e88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f06f 0204 	mvn.w	r2, #4
 8006e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fb41 	bl	80074f6 <HAL_TIM_IC_CaptureCallback>
 8006e74:	e005      	b.n	8006e82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fb33 	bl	80074e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fb44 	bl	800750a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f003 0308 	and.w	r3, r3, #8
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d020      	beq.n	8006ed4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01b      	beq.n	8006ed4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f06f 0208 	mvn.w	r2, #8
 8006ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2204      	movs	r2, #4
 8006eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f003 0303 	and.w	r3, r3, #3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fb1b 	bl	80074f6 <HAL_TIM_IC_CaptureCallback>
 8006ec0:	e005      	b.n	8006ece <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fb0d 	bl	80074e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fb1e 	bl	800750a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f003 0310 	and.w	r3, r3, #16
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d020      	beq.n	8006f20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f003 0310 	and.w	r3, r3, #16
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01b      	beq.n	8006f20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0210 	mvn.w	r2, #16
 8006ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2208      	movs	r2, #8
 8006ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 faf5 	bl	80074f6 <HAL_TIM_IC_CaptureCallback>
 8006f0c:	e005      	b.n	8006f1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fae7 	bl	80074e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 faf8 	bl	800750a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00c      	beq.n	8006f44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d007      	beq.n	8006f44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0201 	mvn.w	r2, #1
 8006f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fac5 	bl	80074ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00c      	beq.n	8006f68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d007      	beq.n	8006f68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f001 f8cc 	bl	8008100 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00c      	beq.n	8006f8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d007      	beq.n	8006f8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 f8c4 	bl	8008114 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00c      	beq.n	8006fb0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d007      	beq.n	8006fb0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fab7 	bl	800751e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f003 0320 	and.w	r3, r3, #32
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00c      	beq.n	8006fd4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f003 0320 	and.w	r3, r3, #32
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d007      	beq.n	8006fd4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f06f 0220 	mvn.w	r2, #32
 8006fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f001 f88c 	bl	80080ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fd4:	bf00      	nop
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d101      	bne.n	8006ffa <HAL_TIM_IC_ConfigChannel+0x1e>
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	e088      	b.n	800710c <HAL_TIM_IC_ConfigChannel+0x130>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d11b      	bne.n	8007040 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007018:	f000 fdfc 	bl	8007c14 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	699a      	ldr	r2, [r3, #24]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 020c 	bic.w	r2, r2, #12
 800702a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6999      	ldr	r1, [r3, #24]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	689a      	ldr	r2, [r3, #8]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	619a      	str	r2, [r3, #24]
 800703e:	e060      	b.n	8007102 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b04      	cmp	r3, #4
 8007044:	d11c      	bne.n	8007080 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007056:	f000 fe7a 	bl	8007d4e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	699a      	ldr	r2, [r3, #24]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007068:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6999      	ldr	r1, [r3, #24]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	021a      	lsls	r2, r3, #8
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	619a      	str	r2, [r3, #24]
 800707e:	e040      	b.n	8007102 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b08      	cmp	r3, #8
 8007084:	d11b      	bne.n	80070be <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007096:	f000 fec7 	bl	8007e28 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	69da      	ldr	r2, [r3, #28]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 020c 	bic.w	r2, r2, #12
 80070a8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69d9      	ldr	r1, [r3, #28]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	61da      	str	r2, [r3, #28]
 80070bc:	e021      	b.n	8007102 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b0c      	cmp	r3, #12
 80070c2:	d11c      	bne.n	80070fe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80070d4:	f000 fee4 	bl	8007ea0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	69da      	ldr	r2, [r3, #28]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80070e6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	69d9      	ldr	r1, [r3, #28]
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	021a      	lsls	r2, r3, #8
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	61da      	str	r2, [r3, #28]
 80070fc:	e001      	b.n	8007102 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800710a:	7dfb      	ldrb	r3, [r7, #23]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3718      	adds	r7, #24
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800712a:	2b01      	cmp	r3, #1
 800712c:	d101      	bne.n	8007132 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800712e:	2302      	movs	r3, #2
 8007130:	e0ff      	b.n	8007332 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b14      	cmp	r3, #20
 800713e:	f200 80f0 	bhi.w	8007322 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007142:	a201      	add	r2, pc, #4	; (adr r2, 8007148 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007148:	0800719d 	.word	0x0800719d
 800714c:	08007323 	.word	0x08007323
 8007150:	08007323 	.word	0x08007323
 8007154:	08007323 	.word	0x08007323
 8007158:	080071dd 	.word	0x080071dd
 800715c:	08007323 	.word	0x08007323
 8007160:	08007323 	.word	0x08007323
 8007164:	08007323 	.word	0x08007323
 8007168:	0800721f 	.word	0x0800721f
 800716c:	08007323 	.word	0x08007323
 8007170:	08007323 	.word	0x08007323
 8007174:	08007323 	.word	0x08007323
 8007178:	0800725f 	.word	0x0800725f
 800717c:	08007323 	.word	0x08007323
 8007180:	08007323 	.word	0x08007323
 8007184:	08007323 	.word	0x08007323
 8007188:	080072a1 	.word	0x080072a1
 800718c:	08007323 	.word	0x08007323
 8007190:	08007323 	.word	0x08007323
 8007194:	08007323 	.word	0x08007323
 8007198:	080072e1 	.word	0x080072e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68b9      	ldr	r1, [r7, #8]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 fa60 	bl	8007668 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	699a      	ldr	r2, [r3, #24]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f042 0208 	orr.w	r2, r2, #8
 80071b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	699a      	ldr	r2, [r3, #24]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 0204 	bic.w	r2, r2, #4
 80071c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6999      	ldr	r1, [r3, #24]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	691a      	ldr	r2, [r3, #16]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	619a      	str	r2, [r3, #24]
      break;
 80071da:	e0a5      	b.n	8007328 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68b9      	ldr	r1, [r7, #8]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 fad0 	bl	8007788 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	699a      	ldr	r2, [r3, #24]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699a      	ldr	r2, [r3, #24]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6999      	ldr	r1, [r3, #24]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	021a      	lsls	r2, r3, #8
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	619a      	str	r2, [r3, #24]
      break;
 800721c:	e084      	b.n	8007328 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	4618      	mov	r0, r3
 8007226:	f000 fb39 	bl	800789c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69da      	ldr	r2, [r3, #28]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f042 0208 	orr.w	r2, r2, #8
 8007238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	69da      	ldr	r2, [r3, #28]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 0204 	bic.w	r2, r2, #4
 8007248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69d9      	ldr	r1, [r3, #28]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	691a      	ldr	r2, [r3, #16]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	61da      	str	r2, [r3, #28]
      break;
 800725c:	e064      	b.n	8007328 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68b9      	ldr	r1, [r7, #8]
 8007264:	4618      	mov	r0, r3
 8007266:	f000 fba1 	bl	80079ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69da      	ldr	r2, [r3, #28]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	69da      	ldr	r2, [r3, #28]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	69d9      	ldr	r1, [r3, #28]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	021a      	lsls	r2, r3, #8
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	61da      	str	r2, [r3, #28]
      break;
 800729e:	e043      	b.n	8007328 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68b9      	ldr	r1, [r7, #8]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 fbea 	bl	8007a80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0208 	orr.w	r2, r2, #8
 80072ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0204 	bic.w	r2, r2, #4
 80072ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	691a      	ldr	r2, [r3, #16]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	430a      	orrs	r2, r1
 80072dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80072de:	e023      	b.n	8007328 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68b9      	ldr	r1, [r7, #8]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fc2e 	bl	8007b48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800730a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	021a      	lsls	r2, r3, #8
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007320:	e002      	b.n	8007328 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	75fb      	strb	r3, [r7, #23]
      break;
 8007326:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007330:	7dfb      	ldrb	r3, [r7, #23]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3718      	adds	r7, #24
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop

0800733c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007350:	2b01      	cmp	r3, #1
 8007352:	d101      	bne.n	8007358 <HAL_TIM_ConfigClockSource+0x1c>
 8007354:	2302      	movs	r3, #2
 8007356:	e0b6      	b.n	80074c6 <HAL_TIM_ConfigClockSource+0x18a>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2202      	movs	r2, #2
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007376:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800737a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007382:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007394:	d03e      	beq.n	8007414 <HAL_TIM_ConfigClockSource+0xd8>
 8007396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800739a:	f200 8087 	bhi.w	80074ac <HAL_TIM_ConfigClockSource+0x170>
 800739e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a2:	f000 8086 	beq.w	80074b2 <HAL_TIM_ConfigClockSource+0x176>
 80073a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073aa:	d87f      	bhi.n	80074ac <HAL_TIM_ConfigClockSource+0x170>
 80073ac:	2b70      	cmp	r3, #112	; 0x70
 80073ae:	d01a      	beq.n	80073e6 <HAL_TIM_ConfigClockSource+0xaa>
 80073b0:	2b70      	cmp	r3, #112	; 0x70
 80073b2:	d87b      	bhi.n	80074ac <HAL_TIM_ConfigClockSource+0x170>
 80073b4:	2b60      	cmp	r3, #96	; 0x60
 80073b6:	d050      	beq.n	800745a <HAL_TIM_ConfigClockSource+0x11e>
 80073b8:	2b60      	cmp	r3, #96	; 0x60
 80073ba:	d877      	bhi.n	80074ac <HAL_TIM_ConfigClockSource+0x170>
 80073bc:	2b50      	cmp	r3, #80	; 0x50
 80073be:	d03c      	beq.n	800743a <HAL_TIM_ConfigClockSource+0xfe>
 80073c0:	2b50      	cmp	r3, #80	; 0x50
 80073c2:	d873      	bhi.n	80074ac <HAL_TIM_ConfigClockSource+0x170>
 80073c4:	2b40      	cmp	r3, #64	; 0x40
 80073c6:	d058      	beq.n	800747a <HAL_TIM_ConfigClockSource+0x13e>
 80073c8:	2b40      	cmp	r3, #64	; 0x40
 80073ca:	d86f      	bhi.n	80074ac <HAL_TIM_ConfigClockSource+0x170>
 80073cc:	2b30      	cmp	r3, #48	; 0x30
 80073ce:	d064      	beq.n	800749a <HAL_TIM_ConfigClockSource+0x15e>
 80073d0:	2b30      	cmp	r3, #48	; 0x30
 80073d2:	d86b      	bhi.n	80074ac <HAL_TIM_ConfigClockSource+0x170>
 80073d4:	2b20      	cmp	r3, #32
 80073d6:	d060      	beq.n	800749a <HAL_TIM_ConfigClockSource+0x15e>
 80073d8:	2b20      	cmp	r3, #32
 80073da:	d867      	bhi.n	80074ac <HAL_TIM_ConfigClockSource+0x170>
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d05c      	beq.n	800749a <HAL_TIM_ConfigClockSource+0x15e>
 80073e0:	2b10      	cmp	r3, #16
 80073e2:	d05a      	beq.n	800749a <HAL_TIM_ConfigClockSource+0x15e>
 80073e4:	e062      	b.n	80074ac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073f6:	f000 fdab 	bl	8007f50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007408:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	609a      	str	r2, [r3, #8]
      break;
 8007412:	e04f      	b.n	80074b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007424:	f000 fd94 	bl	8007f50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689a      	ldr	r2, [r3, #8]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007436:	609a      	str	r2, [r3, #8]
      break;
 8007438:	e03c      	b.n	80074b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007446:	461a      	mov	r2, r3
 8007448:	f000 fc52 	bl	8007cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2150      	movs	r1, #80	; 0x50
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fd61 	bl	8007f1a <TIM_ITRx_SetConfig>
      break;
 8007458:	e02c      	b.n	80074b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007466:	461a      	mov	r2, r3
 8007468:	f000 fcae 	bl	8007dc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2160      	movs	r1, #96	; 0x60
 8007472:	4618      	mov	r0, r3
 8007474:	f000 fd51 	bl	8007f1a <TIM_ITRx_SetConfig>
      break;
 8007478:	e01c      	b.n	80074b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007486:	461a      	mov	r2, r3
 8007488:	f000 fc32 	bl	8007cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2140      	movs	r1, #64	; 0x40
 8007492:	4618      	mov	r0, r3
 8007494:	f000 fd41 	bl	8007f1a <TIM_ITRx_SetConfig>
      break;
 8007498:	e00c      	b.n	80074b4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4619      	mov	r1, r3
 80074a4:	4610      	mov	r0, r2
 80074a6:	f000 fd38 	bl	8007f1a <TIM_ITRx_SetConfig>
      break;
 80074aa:	e003      	b.n	80074b4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	73fb      	strb	r3, [r7, #15]
      break;
 80074b0:	e000      	b.n	80074b4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80074b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b083      	sub	sp, #12
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074ea:	bf00      	nop
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074fe:	bf00      	nop
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800750a:	b480      	push	{r7}
 800750c:	b083      	sub	sp, #12
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007526:	bf00      	nop
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
	...

08007534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a40      	ldr	r2, [pc, #256]	; (8007648 <TIM_Base_SetConfig+0x114>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d013      	beq.n	8007574 <TIM_Base_SetConfig+0x40>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007552:	d00f      	beq.n	8007574 <TIM_Base_SetConfig+0x40>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a3d      	ldr	r2, [pc, #244]	; (800764c <TIM_Base_SetConfig+0x118>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d00b      	beq.n	8007574 <TIM_Base_SetConfig+0x40>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a3c      	ldr	r2, [pc, #240]	; (8007650 <TIM_Base_SetConfig+0x11c>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d007      	beq.n	8007574 <TIM_Base_SetConfig+0x40>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a3b      	ldr	r2, [pc, #236]	; (8007654 <TIM_Base_SetConfig+0x120>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d003      	beq.n	8007574 <TIM_Base_SetConfig+0x40>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a3a      	ldr	r2, [pc, #232]	; (8007658 <TIM_Base_SetConfig+0x124>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d108      	bne.n	8007586 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	4313      	orrs	r3, r2
 8007584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a2f      	ldr	r2, [pc, #188]	; (8007648 <TIM_Base_SetConfig+0x114>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d01f      	beq.n	80075ce <TIM_Base_SetConfig+0x9a>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007594:	d01b      	beq.n	80075ce <TIM_Base_SetConfig+0x9a>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a2c      	ldr	r2, [pc, #176]	; (800764c <TIM_Base_SetConfig+0x118>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d017      	beq.n	80075ce <TIM_Base_SetConfig+0x9a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a2b      	ldr	r2, [pc, #172]	; (8007650 <TIM_Base_SetConfig+0x11c>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d013      	beq.n	80075ce <TIM_Base_SetConfig+0x9a>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a2a      	ldr	r2, [pc, #168]	; (8007654 <TIM_Base_SetConfig+0x120>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d00f      	beq.n	80075ce <TIM_Base_SetConfig+0x9a>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a29      	ldr	r2, [pc, #164]	; (8007658 <TIM_Base_SetConfig+0x124>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d00b      	beq.n	80075ce <TIM_Base_SetConfig+0x9a>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a28      	ldr	r2, [pc, #160]	; (800765c <TIM_Base_SetConfig+0x128>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d007      	beq.n	80075ce <TIM_Base_SetConfig+0x9a>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a27      	ldr	r2, [pc, #156]	; (8007660 <TIM_Base_SetConfig+0x12c>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d003      	beq.n	80075ce <TIM_Base_SetConfig+0x9a>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a26      	ldr	r2, [pc, #152]	; (8007664 <TIM_Base_SetConfig+0x130>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d108      	bne.n	80075e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	4313      	orrs	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a10      	ldr	r2, [pc, #64]	; (8007648 <TIM_Base_SetConfig+0x114>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d00f      	beq.n	800762c <TIM_Base_SetConfig+0xf8>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a12      	ldr	r2, [pc, #72]	; (8007658 <TIM_Base_SetConfig+0x124>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d00b      	beq.n	800762c <TIM_Base_SetConfig+0xf8>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a11      	ldr	r2, [pc, #68]	; (800765c <TIM_Base_SetConfig+0x128>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d007      	beq.n	800762c <TIM_Base_SetConfig+0xf8>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a10      	ldr	r2, [pc, #64]	; (8007660 <TIM_Base_SetConfig+0x12c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d003      	beq.n	800762c <TIM_Base_SetConfig+0xf8>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a0f      	ldr	r2, [pc, #60]	; (8007664 <TIM_Base_SetConfig+0x130>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d103      	bne.n	8007634 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	691a      	ldr	r2, [r3, #16]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	615a      	str	r2, [r3, #20]
}
 800763a:	bf00      	nop
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	40012c00 	.word	0x40012c00
 800764c:	40000400 	.word	0x40000400
 8007650:	40000800 	.word	0x40000800
 8007654:	40000c00 	.word	0x40000c00
 8007658:	40013400 	.word	0x40013400
 800765c:	40014000 	.word	0x40014000
 8007660:	40014400 	.word	0x40014400
 8007664:	40014800 	.word	0x40014800

08007668 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007668:	b480      	push	{r7}
 800766a:	b087      	sub	sp, #28
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	f023 0201 	bic.w	r2, r3, #1
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800769a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f023 0303 	bic.w	r3, r3, #3
 80076a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f023 0302 	bic.w	r3, r3, #2
 80076b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	4313      	orrs	r3, r2
 80076be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a2c      	ldr	r2, [pc, #176]	; (8007774 <TIM_OC1_SetConfig+0x10c>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d00f      	beq.n	80076e8 <TIM_OC1_SetConfig+0x80>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a2b      	ldr	r2, [pc, #172]	; (8007778 <TIM_OC1_SetConfig+0x110>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00b      	beq.n	80076e8 <TIM_OC1_SetConfig+0x80>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a2a      	ldr	r2, [pc, #168]	; (800777c <TIM_OC1_SetConfig+0x114>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d007      	beq.n	80076e8 <TIM_OC1_SetConfig+0x80>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a29      	ldr	r2, [pc, #164]	; (8007780 <TIM_OC1_SetConfig+0x118>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_OC1_SetConfig+0x80>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a28      	ldr	r2, [pc, #160]	; (8007784 <TIM_OC1_SetConfig+0x11c>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d10c      	bne.n	8007702 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f023 0308 	bic.w	r3, r3, #8
 80076ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f023 0304 	bic.w	r3, r3, #4
 8007700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a1b      	ldr	r2, [pc, #108]	; (8007774 <TIM_OC1_SetConfig+0x10c>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d00f      	beq.n	800772a <TIM_OC1_SetConfig+0xc2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a1a      	ldr	r2, [pc, #104]	; (8007778 <TIM_OC1_SetConfig+0x110>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d00b      	beq.n	800772a <TIM_OC1_SetConfig+0xc2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a19      	ldr	r2, [pc, #100]	; (800777c <TIM_OC1_SetConfig+0x114>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d007      	beq.n	800772a <TIM_OC1_SetConfig+0xc2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a18      	ldr	r2, [pc, #96]	; (8007780 <TIM_OC1_SetConfig+0x118>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d003      	beq.n	800772a <TIM_OC1_SetConfig+0xc2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a17      	ldr	r2, [pc, #92]	; (8007784 <TIM_OC1_SetConfig+0x11c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d111      	bne.n	800774e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	4313      	orrs	r3, r2
 8007742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	4313      	orrs	r3, r2
 800774c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	621a      	str	r2, [r3, #32]
}
 8007768:	bf00      	nop
 800776a:	371c      	adds	r7, #28
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	40012c00 	.word	0x40012c00
 8007778:	40013400 	.word	0x40013400
 800777c:	40014000 	.word	0x40014000
 8007780:	40014400 	.word	0x40014400
 8007784:	40014800 	.word	0x40014800

08007788 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007788:	b480      	push	{r7}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a1b      	ldr	r3, [r3, #32]
 800779c:	f023 0210 	bic.w	r2, r3, #16
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	021b      	lsls	r3, r3, #8
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f023 0320 	bic.w	r3, r3, #32
 80077d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	011b      	lsls	r3, r3, #4
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a28      	ldr	r2, [pc, #160]	; (8007888 <TIM_OC2_SetConfig+0x100>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d003      	beq.n	80077f4 <TIM_OC2_SetConfig+0x6c>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a27      	ldr	r2, [pc, #156]	; (800788c <TIM_OC2_SetConfig+0x104>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d10d      	bne.n	8007810 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	011b      	lsls	r3, r3, #4
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	4313      	orrs	r3, r2
 8007806:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800780e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a1d      	ldr	r2, [pc, #116]	; (8007888 <TIM_OC2_SetConfig+0x100>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d00f      	beq.n	8007838 <TIM_OC2_SetConfig+0xb0>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a1c      	ldr	r2, [pc, #112]	; (800788c <TIM_OC2_SetConfig+0x104>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d00b      	beq.n	8007838 <TIM_OC2_SetConfig+0xb0>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a1b      	ldr	r2, [pc, #108]	; (8007890 <TIM_OC2_SetConfig+0x108>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d007      	beq.n	8007838 <TIM_OC2_SetConfig+0xb0>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a1a      	ldr	r2, [pc, #104]	; (8007894 <TIM_OC2_SetConfig+0x10c>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d003      	beq.n	8007838 <TIM_OC2_SetConfig+0xb0>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a19      	ldr	r2, [pc, #100]	; (8007898 <TIM_OC2_SetConfig+0x110>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d113      	bne.n	8007860 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800783e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	4313      	orrs	r3, r2
 8007852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	4313      	orrs	r3, r2
 800785e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	621a      	str	r2, [r3, #32]
}
 800787a:	bf00      	nop
 800787c:	371c      	adds	r7, #28
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	40012c00 	.word	0x40012c00
 800788c:	40013400 	.word	0x40013400
 8007890:	40014000 	.word	0x40014000
 8007894:	40014400 	.word	0x40014400
 8007898:	40014800 	.word	0x40014800

0800789c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0303 	bic.w	r3, r3, #3
 80078d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	021b      	lsls	r3, r3, #8
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a27      	ldr	r2, [pc, #156]	; (8007998 <TIM_OC3_SetConfig+0xfc>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d003      	beq.n	8007906 <TIM_OC3_SetConfig+0x6a>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a26      	ldr	r2, [pc, #152]	; (800799c <TIM_OC3_SetConfig+0x100>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d10d      	bne.n	8007922 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800790c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	021b      	lsls	r3, r3, #8
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	4313      	orrs	r3, r2
 8007918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a1c      	ldr	r2, [pc, #112]	; (8007998 <TIM_OC3_SetConfig+0xfc>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d00f      	beq.n	800794a <TIM_OC3_SetConfig+0xae>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a1b      	ldr	r2, [pc, #108]	; (800799c <TIM_OC3_SetConfig+0x100>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d00b      	beq.n	800794a <TIM_OC3_SetConfig+0xae>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a1a      	ldr	r2, [pc, #104]	; (80079a0 <TIM_OC3_SetConfig+0x104>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d007      	beq.n	800794a <TIM_OC3_SetConfig+0xae>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a19      	ldr	r2, [pc, #100]	; (80079a4 <TIM_OC3_SetConfig+0x108>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d003      	beq.n	800794a <TIM_OC3_SetConfig+0xae>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a18      	ldr	r2, [pc, #96]	; (80079a8 <TIM_OC3_SetConfig+0x10c>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d113      	bne.n	8007972 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	011b      	lsls	r3, r3, #4
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	4313      	orrs	r3, r2
 8007964:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	4313      	orrs	r3, r2
 8007970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	621a      	str	r2, [r3, #32]
}
 800798c:	bf00      	nop
 800798e:	371c      	adds	r7, #28
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	40012c00 	.word	0x40012c00
 800799c:	40013400 	.word	0x40013400
 80079a0:	40014000 	.word	0x40014000
 80079a4:	40014400 	.word	0x40014400
 80079a8:	40014800 	.word	0x40014800

080079ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	021b      	lsls	r3, r3, #8
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	031b      	lsls	r3, r3, #12
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a18      	ldr	r2, [pc, #96]	; (8007a6c <TIM_OC4_SetConfig+0xc0>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d00f      	beq.n	8007a30 <TIM_OC4_SetConfig+0x84>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a17      	ldr	r2, [pc, #92]	; (8007a70 <TIM_OC4_SetConfig+0xc4>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d00b      	beq.n	8007a30 <TIM_OC4_SetConfig+0x84>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a16      	ldr	r2, [pc, #88]	; (8007a74 <TIM_OC4_SetConfig+0xc8>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d007      	beq.n	8007a30 <TIM_OC4_SetConfig+0x84>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a15      	ldr	r2, [pc, #84]	; (8007a78 <TIM_OC4_SetConfig+0xcc>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d003      	beq.n	8007a30 <TIM_OC4_SetConfig+0x84>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a14      	ldr	r2, [pc, #80]	; (8007a7c <TIM_OC4_SetConfig+0xd0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d109      	bne.n	8007a44 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	019b      	lsls	r3, r3, #6
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	685a      	ldr	r2, [r3, #4]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	621a      	str	r2, [r3, #32]
}
 8007a5e:	bf00      	nop
 8007a60:	371c      	adds	r7, #28
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	40012c00 	.word	0x40012c00
 8007a70:	40013400 	.word	0x40013400
 8007a74:	40014000 	.word	0x40014000
 8007a78:	40014400 	.word	0x40014400
 8007a7c:	40014800 	.word	0x40014800

08007a80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007ac4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	041b      	lsls	r3, r3, #16
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a17      	ldr	r2, [pc, #92]	; (8007b34 <TIM_OC5_SetConfig+0xb4>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d00f      	beq.n	8007afa <TIM_OC5_SetConfig+0x7a>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a16      	ldr	r2, [pc, #88]	; (8007b38 <TIM_OC5_SetConfig+0xb8>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d00b      	beq.n	8007afa <TIM_OC5_SetConfig+0x7a>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a15      	ldr	r2, [pc, #84]	; (8007b3c <TIM_OC5_SetConfig+0xbc>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d007      	beq.n	8007afa <TIM_OC5_SetConfig+0x7a>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a14      	ldr	r2, [pc, #80]	; (8007b40 <TIM_OC5_SetConfig+0xc0>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d003      	beq.n	8007afa <TIM_OC5_SetConfig+0x7a>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a13      	ldr	r2, [pc, #76]	; (8007b44 <TIM_OC5_SetConfig+0xc4>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d109      	bne.n	8007b0e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	021b      	lsls	r3, r3, #8
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685a      	ldr	r2, [r3, #4]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	621a      	str	r2, [r3, #32]
}
 8007b28:	bf00      	nop
 8007b2a:	371c      	adds	r7, #28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	40012c00 	.word	0x40012c00
 8007b38:	40013400 	.word	0x40013400
 8007b3c:	40014000 	.word	0x40014000
 8007b40:	40014400 	.word	0x40014400
 8007b44:	40014800 	.word	0x40014800

08007b48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
 8007b5c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	021b      	lsls	r3, r3, #8
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	051b      	lsls	r3, r3, #20
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a18      	ldr	r2, [pc, #96]	; (8007c00 <TIM_OC6_SetConfig+0xb8>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00f      	beq.n	8007bc4 <TIM_OC6_SetConfig+0x7c>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a17      	ldr	r2, [pc, #92]	; (8007c04 <TIM_OC6_SetConfig+0xbc>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d00b      	beq.n	8007bc4 <TIM_OC6_SetConfig+0x7c>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a16      	ldr	r2, [pc, #88]	; (8007c08 <TIM_OC6_SetConfig+0xc0>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d007      	beq.n	8007bc4 <TIM_OC6_SetConfig+0x7c>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a15      	ldr	r2, [pc, #84]	; (8007c0c <TIM_OC6_SetConfig+0xc4>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d003      	beq.n	8007bc4 <TIM_OC6_SetConfig+0x7c>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a14      	ldr	r2, [pc, #80]	; (8007c10 <TIM_OC6_SetConfig+0xc8>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d109      	bne.n	8007bd8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	029b      	lsls	r3, r3, #10
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	621a      	str	r2, [r3, #32]
}
 8007bf2:	bf00      	nop
 8007bf4:	371c      	adds	r7, #28
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	40012c00 	.word	0x40012c00
 8007c04:	40013400 	.word	0x40013400
 8007c08:	40014000 	.word	0x40014000
 8007c0c:	40014400 	.word	0x40014400
 8007c10:	40014800 	.word	0x40014800

08007c14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
 8007c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	f023 0201 	bic.w	r2, r3, #1
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4a26      	ldr	r2, [pc, #152]	; (8007cd8 <TIM_TI1_SetConfig+0xc4>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d017      	beq.n	8007c72 <TIM_TI1_SetConfig+0x5e>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c48:	d013      	beq.n	8007c72 <TIM_TI1_SetConfig+0x5e>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	4a23      	ldr	r2, [pc, #140]	; (8007cdc <TIM_TI1_SetConfig+0xc8>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d00f      	beq.n	8007c72 <TIM_TI1_SetConfig+0x5e>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	4a22      	ldr	r2, [pc, #136]	; (8007ce0 <TIM_TI1_SetConfig+0xcc>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d00b      	beq.n	8007c72 <TIM_TI1_SetConfig+0x5e>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	4a21      	ldr	r2, [pc, #132]	; (8007ce4 <TIM_TI1_SetConfig+0xd0>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d007      	beq.n	8007c72 <TIM_TI1_SetConfig+0x5e>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	4a20      	ldr	r2, [pc, #128]	; (8007ce8 <TIM_TI1_SetConfig+0xd4>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d003      	beq.n	8007c72 <TIM_TI1_SetConfig+0x5e>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4a1f      	ldr	r2, [pc, #124]	; (8007cec <TIM_TI1_SetConfig+0xd8>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d101      	bne.n	8007c76 <TIM_TI1_SetConfig+0x62>
 8007c72:	2301      	movs	r3, #1
 8007c74:	e000      	b.n	8007c78 <TIM_TI1_SetConfig+0x64>
 8007c76:	2300      	movs	r3, #0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d008      	beq.n	8007c8e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f023 0303 	bic.w	r3, r3, #3
 8007c82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	617b      	str	r3, [r7, #20]
 8007c8c:	e003      	b.n	8007c96 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f043 0301 	orr.w	r3, r3, #1
 8007c94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	011b      	lsls	r3, r3, #4
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f023 030a 	bic.w	r3, r3, #10
 8007cb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	f003 030a 	and.w	r3, r3, #10
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	693a      	ldr	r2, [r7, #16]
 8007cc8:	621a      	str	r2, [r3, #32]
}
 8007cca:	bf00      	nop
 8007ccc:	371c      	adds	r7, #28
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	40012c00 	.word	0x40012c00
 8007cdc:	40000400 	.word	0x40000400
 8007ce0:	40000800 	.word	0x40000800
 8007ce4:	40000c00 	.word	0x40000c00
 8007ce8:	40013400 	.word	0x40013400
 8007cec:	40014000 	.word	0x40014000

08007cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	f023 0201 	bic.w	r2, r3, #1
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f023 030a 	bic.w	r3, r3, #10
 8007d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	621a      	str	r2, [r3, #32]
}
 8007d42:	bf00      	nop
 8007d44:	371c      	adds	r7, #28
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b087      	sub	sp, #28
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
 8007d5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6a1b      	ldr	r3, [r3, #32]
 8007d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	f023 0210 	bic.w	r2, r3, #16
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	031b      	lsls	r3, r3, #12
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007da0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	011b      	lsls	r3, r3, #4
 8007da6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	621a      	str	r2, [r3, #32]
}
 8007dbc:	bf00      	nop
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6a1b      	ldr	r3, [r3, #32]
 8007dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	f023 0210 	bic.w	r2, r3, #16
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	031b      	lsls	r3, r3, #12
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e04:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	011b      	lsls	r3, r3, #4
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	621a      	str	r2, [r3, #32]
}
 8007e1c:	bf00      	nop
 8007e1e:	371c      	adds	r7, #28
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]
 8007e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
 8007e40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f023 0303 	bic.w	r3, r3, #3
 8007e54:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e64:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	011b      	lsls	r3, r3, #4
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007e78:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	021b      	lsls	r3, r3, #8
 8007e7e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	693a      	ldr	r2, [r7, #16]
 8007e8c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	697a      	ldr	r2, [r7, #20]
 8007e92:	621a      	str	r2, [r3, #32]
}
 8007e94:	bf00      	nop
 8007e96:	371c      	adds	r7, #28
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6a1b      	ldr	r3, [r3, #32]
 8007eb8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ecc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	021b      	lsls	r3, r3, #8
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ede:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	031b      	lsls	r3, r3, #12
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007ef2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	031b      	lsls	r3, r3, #12
 8007ef8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	621a      	str	r2, [r3, #32]
}
 8007f0e:	bf00      	nop
 8007f10:	371c      	adds	r7, #28
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b085      	sub	sp, #20
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	f043 0307 	orr.w	r3, r3, #7
 8007f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	609a      	str	r2, [r3, #8]
}
 8007f44:	bf00      	nop
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	021a      	lsls	r2, r3, #8
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	431a      	orrs	r2, r3
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	609a      	str	r2, [r3, #8]
}
 8007f84:	bf00      	nop
 8007f86:	371c      	adds	r7, #28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	f003 031f 	and.w	r3, r3, #31
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6a1a      	ldr	r2, [r3, #32]
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	43db      	mvns	r3, r3
 8007fb2:	401a      	ands	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6a1a      	ldr	r2, [r3, #32]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f003 031f 	and.w	r3, r3, #31
 8007fc2:	6879      	ldr	r1, [r7, #4]
 8007fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8007fc8:	431a      	orrs	r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	621a      	str	r2, [r3, #32]
}
 8007fce:	bf00      	nop
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
	...

08007fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d101      	bne.n	8007ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	e068      	b.n	80080c6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2202      	movs	r2, #2
 8008000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a2e      	ldr	r2, [pc, #184]	; (80080d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d004      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a2d      	ldr	r2, [pc, #180]	; (80080d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d108      	bne.n	800803a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800802e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	4313      	orrs	r3, r2
 8008038:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008040:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	4313      	orrs	r3, r2
 800804a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a1e      	ldr	r2, [pc, #120]	; (80080d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d01d      	beq.n	800809a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008066:	d018      	beq.n	800809a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a1b      	ldr	r2, [pc, #108]	; (80080dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d013      	beq.n	800809a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a1a      	ldr	r2, [pc, #104]	; (80080e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d00e      	beq.n	800809a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a18      	ldr	r2, [pc, #96]	; (80080e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d009      	beq.n	800809a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a13      	ldr	r2, [pc, #76]	; (80080d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d004      	beq.n	800809a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a14      	ldr	r2, [pc, #80]	; (80080e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d10c      	bne.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	40012c00 	.word	0x40012c00
 80080d8:	40013400 	.word	0x40013400
 80080dc:	40000400 	.word	0x40000400
 80080e0:	40000800 	.word	0x40000800
 80080e4:	40000c00 	.word	0x40000c00
 80080e8:	40014000 	.word	0x40014000

080080ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e042      	b.n	80081c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008140:	2b00      	cmp	r3, #0
 8008142:	d106      	bne.n	8008152 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7fa faaf 	bl	80026b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2224      	movs	r2, #36	; 0x24
 8008156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 0201 	bic.w	r2, r2, #1
 8008168:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f001 f816 	bl	80091a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fd17 	bl	8008bac <UART_SetConfig>
 800817e:	4603      	mov	r3, r0
 8008180:	2b01      	cmp	r3, #1
 8008182:	d101      	bne.n	8008188 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e01b      	b.n	80081c0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008196:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	689a      	ldr	r2, [r3, #8]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f042 0201 	orr.w	r2, r2, #1
 80081b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 f895 	bl	80092e8 <UART_CheckIdleState>
 80081be:	4603      	mov	r3, r0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08a      	sub	sp, #40	; 0x28
 80081cc:	af02      	add	r7, sp, #8
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	603b      	str	r3, [r7, #0]
 80081d4:	4613      	mov	r3, r2
 80081d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081de:	2b20      	cmp	r3, #32
 80081e0:	d17c      	bne.n	80082dc <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <HAL_UART_Transmit+0x26>
 80081e8:	88fb      	ldrh	r3, [r7, #6]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e075      	b.n	80082de <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2221      	movs	r2, #33	; 0x21
 80081fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008202:	f7fb f959 	bl	80034b8 <HAL_GetTick>
 8008206:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	88fa      	ldrh	r2, [r7, #6]
 800820c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	88fa      	ldrh	r2, [r7, #6]
 8008214:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008220:	d108      	bne.n	8008234 <HAL_UART_Transmit+0x6c>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d104      	bne.n	8008234 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800822a:	2300      	movs	r3, #0
 800822c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	61bb      	str	r3, [r7, #24]
 8008232:	e003      	b.n	800823c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008238:	2300      	movs	r3, #0
 800823a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800823c:	e031      	b.n	80082a2 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2200      	movs	r2, #0
 8008246:	2180      	movs	r1, #128	; 0x80
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f001 f8f7 	bl	800943c <UART_WaitOnFlagUntilTimeout>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d005      	beq.n	8008260 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2220      	movs	r2, #32
 8008258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e03e      	b.n	80082de <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10b      	bne.n	800827e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	881a      	ldrh	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008272:	b292      	uxth	r2, r2
 8008274:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	3302      	adds	r3, #2
 800827a:	61bb      	str	r3, [r7, #24]
 800827c:	e008      	b.n	8008290 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	781a      	ldrb	r2, [r3, #0]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	b292      	uxth	r2, r2
 8008288:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	3301      	adds	r3, #1
 800828e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008296:	b29b      	uxth	r3, r3
 8008298:	3b01      	subs	r3, #1
 800829a:	b29a      	uxth	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1c7      	bne.n	800823e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2200      	movs	r2, #0
 80082b6:	2140      	movs	r1, #64	; 0x40
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f001 f8bf 	bl	800943c <UART_WaitOnFlagUntilTimeout>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d005      	beq.n	80082d0 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2220      	movs	r2, #32
 80082c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e006      	b.n	80082de <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2220      	movs	r2, #32
 80082d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80082d8:	2300      	movs	r3, #0
 80082da:	e000      	b.n	80082de <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 80082dc:	2302      	movs	r3, #2
  }
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3720      	adds	r7, #32
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b08a      	sub	sp, #40	; 0x28
 80082ea:	af02      	add	r7, sp, #8
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	603b      	str	r3, [r7, #0]
 80082f2:	4613      	mov	r3, r2
 80082f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082fc:	2b20      	cmp	r3, #32
 80082fe:	f040 80b6 	bne.w	800846e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <HAL_UART_Receive+0x28>
 8008308:	88fb      	ldrh	r3, [r7, #6]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e0ae      	b.n	8008470 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2222      	movs	r2, #34	; 0x22
 800831e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008328:	f7fb f8c6 	bl	80034b8 <HAL_GetTick>
 800832c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	88fa      	ldrh	r2, [r7, #6]
 8008332:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	88fa      	ldrh	r2, [r7, #6]
 800833a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008346:	d10e      	bne.n	8008366 <HAL_UART_Receive+0x80>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d105      	bne.n	800835c <HAL_UART_Receive+0x76>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008356:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800835a:	e02d      	b.n	80083b8 <HAL_UART_Receive+0xd2>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	22ff      	movs	r2, #255	; 0xff
 8008360:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008364:	e028      	b.n	80083b8 <HAL_UART_Receive+0xd2>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10d      	bne.n	800838a <HAL_UART_Receive+0xa4>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d104      	bne.n	8008380 <HAL_UART_Receive+0x9a>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	22ff      	movs	r2, #255	; 0xff
 800837a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800837e:	e01b      	b.n	80083b8 <HAL_UART_Receive+0xd2>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	227f      	movs	r2, #127	; 0x7f
 8008384:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008388:	e016      	b.n	80083b8 <HAL_UART_Receive+0xd2>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008392:	d10d      	bne.n	80083b0 <HAL_UART_Receive+0xca>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d104      	bne.n	80083a6 <HAL_UART_Receive+0xc0>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	227f      	movs	r2, #127	; 0x7f
 80083a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083a4:	e008      	b.n	80083b8 <HAL_UART_Receive+0xd2>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	223f      	movs	r2, #63	; 0x3f
 80083aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083ae:	e003      	b.n	80083b8 <HAL_UART_Receive+0xd2>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80083be:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083c8:	d108      	bne.n	80083dc <HAL_UART_Receive+0xf6>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d104      	bne.n	80083dc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80083d2:	2300      	movs	r3, #0
 80083d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	61bb      	str	r3, [r7, #24]
 80083da:	e003      	b.n	80083e4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083e0:	2300      	movs	r3, #0
 80083e2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80083e4:	e037      	b.n	8008456 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	2200      	movs	r2, #0
 80083ee:	2120      	movs	r1, #32
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f001 f823 	bl	800943c <UART_WaitOnFlagUntilTimeout>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d005      	beq.n	8008408 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2220      	movs	r2, #32
 8008400:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e033      	b.n	8008470 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10c      	bne.n	8008428 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008414:	b29a      	uxth	r2, r3
 8008416:	8a7b      	ldrh	r3, [r7, #18]
 8008418:	4013      	ands	r3, r2
 800841a:	b29a      	uxth	r2, r3
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	3302      	adds	r3, #2
 8008424:	61bb      	str	r3, [r7, #24]
 8008426:	e00d      	b.n	8008444 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800842e:	b29b      	uxth	r3, r3
 8008430:	b2da      	uxtb	r2, r3
 8008432:	8a7b      	ldrh	r3, [r7, #18]
 8008434:	b2db      	uxtb	r3, r3
 8008436:	4013      	ands	r3, r2
 8008438:	b2da      	uxtb	r2, r3
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	3301      	adds	r3, #1
 8008442:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800844a:	b29b      	uxth	r3, r3
 800844c:	3b01      	subs	r3, #1
 800844e:	b29a      	uxth	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800845c:	b29b      	uxth	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1c1      	bne.n	80083e6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2220      	movs	r2, #32
 8008466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	e000      	b.n	8008470 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800846e:	2302      	movs	r3, #2
  }
}
 8008470:	4618      	mov	r0, r3
 8008472:	3720      	adds	r7, #32
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08a      	sub	sp, #40	; 0x28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	4613      	mov	r3, r2
 8008484:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800848c:	2b20      	cmp	r3, #32
 800848e:	d137      	bne.n	8008500 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <HAL_UART_Receive_IT+0x24>
 8008496:	88fb      	ldrh	r3, [r7, #6]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e030      	b.n	8008502 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a18      	ldr	r2, [pc, #96]	; (800850c <HAL_UART_Receive_IT+0x94>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d01f      	beq.n	80084f0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d018      	beq.n	80084f0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	e853 3f00 	ldrex	r3, [r3]
 80084ca:	613b      	str	r3, [r7, #16]
   return(result);
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	461a      	mov	r2, r3
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	623b      	str	r3, [r7, #32]
 80084de:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e0:	69f9      	ldr	r1, [r7, #28]
 80084e2:	6a3a      	ldr	r2, [r7, #32]
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e6      	bne.n	80084be <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80084f0:	88fb      	ldrh	r3, [r7, #6]
 80084f2:	461a      	mov	r2, r3
 80084f4:	68b9      	ldr	r1, [r7, #8]
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f001 f808 	bl	800950c <UART_Start_Receive_IT>
 80084fc:	4603      	mov	r3, r0
 80084fe:	e000      	b.n	8008502 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008500:	2302      	movs	r3, #2
  }
}
 8008502:	4618      	mov	r0, r3
 8008504:	3728      	adds	r7, #40	; 0x28
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	40008000 	.word	0x40008000

08008510 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b0ba      	sub	sp, #232	; 0xe8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	69db      	ldr	r3, [r3, #28]
 800851e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008536:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800853a:	f640 030f 	movw	r3, #2063	; 0x80f
 800853e:	4013      	ands	r3, r2
 8008540:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008548:	2b00      	cmp	r3, #0
 800854a:	d11b      	bne.n	8008584 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800854c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008550:	f003 0320 	and.w	r3, r3, #32
 8008554:	2b00      	cmp	r3, #0
 8008556:	d015      	beq.n	8008584 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800855c:	f003 0320 	and.w	r3, r3, #32
 8008560:	2b00      	cmp	r3, #0
 8008562:	d105      	bne.n	8008570 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d009      	beq.n	8008584 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008574:	2b00      	cmp	r3, #0
 8008576:	f000 82e3 	beq.w	8008b40 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	4798      	blx	r3
      }
      return;
 8008582:	e2dd      	b.n	8008b40 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8008584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 8123 	beq.w	80087d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800858e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008592:	4b8d      	ldr	r3, [pc, #564]	; (80087c8 <HAL_UART_IRQHandler+0x2b8>)
 8008594:	4013      	ands	r3, r2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800859a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800859e:	4b8b      	ldr	r3, [pc, #556]	; (80087cc <HAL_UART_IRQHandler+0x2bc>)
 80085a0:	4013      	ands	r3, r2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 8116 	beq.w	80087d4 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d011      	beq.n	80085d8 <HAL_UART_IRQHandler+0xc8>
 80085b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00b      	beq.n	80085d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2201      	movs	r2, #1
 80085c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ce:	f043 0201 	orr.w	r2, r3, #1
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085dc:	f003 0302 	and.w	r3, r3, #2
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d011      	beq.n	8008608 <HAL_UART_IRQHandler+0xf8>
 80085e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00b      	beq.n	8008608 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2202      	movs	r2, #2
 80085f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085fe:	f043 0204 	orr.w	r2, r3, #4
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b00      	cmp	r3, #0
 8008612:	d011      	beq.n	8008638 <HAL_UART_IRQHandler+0x128>
 8008614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00b      	beq.n	8008638 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2204      	movs	r2, #4
 8008626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800862e:	f043 0202 	orr.w	r2, r3, #2
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800863c:	f003 0308 	and.w	r3, r3, #8
 8008640:	2b00      	cmp	r3, #0
 8008642:	d017      	beq.n	8008674 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b00      	cmp	r3, #0
 800864e:	d105      	bne.n	800865c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008650:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008654:	4b5c      	ldr	r3, [pc, #368]	; (80087c8 <HAL_UART_IRQHandler+0x2b8>)
 8008656:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00b      	beq.n	8008674 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2208      	movs	r2, #8
 8008662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800866a:	f043 0208 	orr.w	r2, r3, #8
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800867c:	2b00      	cmp	r3, #0
 800867e:	d012      	beq.n	80086a6 <HAL_UART_IRQHandler+0x196>
 8008680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008684:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00c      	beq.n	80086a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008694:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800869c:	f043 0220 	orr.w	r2, r3, #32
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 8249 	beq.w	8008b44 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d013      	beq.n	80086e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086c2:	f003 0320 	and.w	r3, r3, #32
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d105      	bne.n	80086d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fa:	2b40      	cmp	r3, #64	; 0x40
 80086fc:	d005      	beq.n	800870a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80086fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008702:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008706:	2b00      	cmp	r3, #0
 8008708:	d054      	beq.n	80087b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f001 f820 	bl	8009750 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871a:	2b40      	cmp	r3, #64	; 0x40
 800871c:	d146      	bne.n	80087ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3308      	adds	r3, #8
 8008724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008728:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800872c:	e853 3f00 	ldrex	r3, [r3]
 8008730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008734:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800873c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3308      	adds	r3, #8
 8008746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800874a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800874e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800875a:	e841 2300 	strex	r3, r2, [r1]
 800875e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1d9      	bne.n	800871e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008770:	2b00      	cmp	r3, #0
 8008772:	d017      	beq.n	80087a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800877a:	4a15      	ldr	r2, [pc, #84]	; (80087d0 <HAL_UART_IRQHandler+0x2c0>)
 800877c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008784:	4618      	mov	r0, r3
 8008786:	f7fc f885 	bl	8004894 <HAL_DMA_Abort_IT>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d019      	beq.n	80087c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800879e:	4610      	mov	r0, r2
 80087a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a2:	e00f      	b.n	80087c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f9eb 	bl	8008b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087aa:	e00b      	b.n	80087c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f9e7 	bl	8008b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b2:	e007      	b.n	80087c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f9e3 	bl	8008b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80087c2:	e1bf      	b.n	8008b44 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c4:	bf00      	nop
    return;
 80087c6:	e1bd      	b.n	8008b44 <HAL_UART_IRQHandler+0x634>
 80087c8:	10000001 	.word	0x10000001
 80087cc:	04000120 	.word	0x04000120
 80087d0:	0800981d 	.word	0x0800981d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087d8:	2b01      	cmp	r3, #1
 80087da:	f040 8153 	bne.w	8008a84 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087e2:	f003 0310 	and.w	r3, r3, #16
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f000 814c 	beq.w	8008a84 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087f0:	f003 0310 	and.w	r3, r3, #16
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 8145 	beq.w	8008a84 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2210      	movs	r2, #16
 8008800:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800880c:	2b40      	cmp	r3, #64	; 0x40
 800880e:	f040 80bb 	bne.w	8008988 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008820:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 818f 	beq.w	8008b48 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008830:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008834:	429a      	cmp	r2, r3
 8008836:	f080 8187 	bcs.w	8008b48 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008840:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 0320 	and.w	r3, r3, #32
 8008852:	2b00      	cmp	r3, #0
 8008854:	f040 8087 	bne.w	8008966 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008860:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008864:	e853 3f00 	ldrex	r3, [r3]
 8008868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800886c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008874:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	461a      	mov	r2, r3
 800887e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008882:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008886:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800888e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008892:	e841 2300 	strex	r3, r2, [r1]
 8008896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800889a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1da      	bne.n	8008858 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3308      	adds	r3, #8
 80088a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088ac:	e853 3f00 	ldrex	r3, [r3]
 80088b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80088b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088b4:	f023 0301 	bic.w	r3, r3, #1
 80088b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3308      	adds	r3, #8
 80088c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80088ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088d2:	e841 2300 	strex	r3, r2, [r1]
 80088d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80088d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1e1      	bne.n	80088a2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	3308      	adds	r3, #8
 80088e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088e8:	e853 3f00 	ldrex	r3, [r3]
 80088ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80088ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	3308      	adds	r3, #8
 80088fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008902:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008904:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008906:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008908:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800890a:	e841 2300 	strex	r3, r2, [r1]
 800890e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1e3      	bne.n	80088de <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2220      	movs	r2, #32
 800891a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008934:	f023 0310 	bic.w	r3, r3, #16
 8008938:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	461a      	mov	r2, r3
 8008942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008946:	65bb      	str	r3, [r7, #88]	; 0x58
 8008948:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800894c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800894e:	e841 2300 	strex	r3, r2, [r1]
 8008952:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1e4      	bne.n	8008924 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008960:	4618      	mov	r0, r3
 8008962:	f7fb ff3b 	bl	80047dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2202      	movs	r2, #2
 800896a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008978:	b29b      	uxth	r3, r3
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	b29b      	uxth	r3, r3
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f907 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008986:	e0df      	b.n	8008b48 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008994:	b29b      	uxth	r3, r3
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 80d1 	beq.w	8008b4c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80089aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 80cc 	beq.w	8008b4c <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089bc:	e853 3f00 	ldrex	r3, [r3]
 80089c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	461a      	mov	r2, r3
 80089d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089d6:	647b      	str	r3, [r7, #68]	; 0x44
 80089d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089de:	e841 2300 	strex	r3, r2, [r1]
 80089e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1e4      	bne.n	80089b4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	3308      	adds	r3, #8
 80089f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f4:	e853 3f00 	ldrex	r3, [r3]
 80089f8:	623b      	str	r3, [r7, #32]
   return(result);
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a00:	f023 0301 	bic.w	r3, r3, #1
 8008a04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3308      	adds	r3, #8
 8008a0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a12:	633a      	str	r2, [r7, #48]	; 0x30
 8008a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a1a:	e841 2300 	strex	r3, r2, [r1]
 8008a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1e1      	bne.n	80089ea <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	e853 3f00 	ldrex	r3, [r3]
 8008a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0310 	bic.w	r3, r3, #16
 8008a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	461a      	mov	r2, r3
 8008a58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008a5c:	61fb      	str	r3, [r7, #28]
 8008a5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a60:	69b9      	ldr	r1, [r7, #24]
 8008a62:	69fa      	ldr	r2, [r7, #28]
 8008a64:	e841 2300 	strex	r3, r2, [r1]
 8008a68:	617b      	str	r3, [r7, #20]
   return(result);
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1e4      	bne.n	8008a3a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2202      	movs	r2, #2
 8008a74:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f889 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a82:	e063      	b.n	8008b4c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00e      	beq.n	8008aae <HAL_UART_IRQHandler+0x59e>
 8008a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d008      	beq.n	8008aae <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008aa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f001 fc1e 	bl	800a2e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008aac:	e051      	b.n	8008b52 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d014      	beq.n	8008ae4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d105      	bne.n	8008ad2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d008      	beq.n	8008ae4 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d03a      	beq.n	8008b50 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	4798      	blx	r3
    }
    return;
 8008ae2:	e035      	b.n	8008b50 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d009      	beq.n	8008b04 <HAL_UART_IRQHandler+0x5f4>
 8008af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d003      	beq.n	8008b04 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fea3 	bl	8009848 <UART_EndTransmit_IT>
    return;
 8008b02:	e026      	b.n	8008b52 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d009      	beq.n	8008b24 <HAL_UART_IRQHandler+0x614>
 8008b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d003      	beq.n	8008b24 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f001 fbf7 	bl	800a310 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b22:	e016      	b.n	8008b52 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d010      	beq.n	8008b52 <HAL_UART_IRQHandler+0x642>
 8008b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	da0c      	bge.n	8008b52 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f001 fbdf 	bl	800a2fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b3e:	e008      	b.n	8008b52 <HAL_UART_IRQHandler+0x642>
      return;
 8008b40:	bf00      	nop
 8008b42:	e006      	b.n	8008b52 <HAL_UART_IRQHandler+0x642>
    return;
 8008b44:	bf00      	nop
 8008b46:	e004      	b.n	8008b52 <HAL_UART_IRQHandler+0x642>
      return;
 8008b48:	bf00      	nop
 8008b4a:	e002      	b.n	8008b52 <HAL_UART_IRQHandler+0x642>
      return;
 8008b4c:	bf00      	nop
 8008b4e:	e000      	b.n	8008b52 <HAL_UART_IRQHandler+0x642>
    return;
 8008b50:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8008b52:	37e8      	adds	r7, #232	; 0xe8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bb0:	b08c      	sub	sp, #48	; 0x30
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	689a      	ldr	r2, [r3, #8]
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	431a      	orrs	r2, r3
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	431a      	orrs	r2, r3
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	4baa      	ldr	r3, [pc, #680]	; (8008e84 <UART_SetConfig+0x2d8>)
 8008bdc:	4013      	ands	r3, r2
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	6812      	ldr	r2, [r2, #0]
 8008be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008be4:	430b      	orrs	r3, r1
 8008be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	68da      	ldr	r2, [r3, #12]
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a9f      	ldr	r2, [pc, #636]	; (8008e88 <UART_SetConfig+0x2dc>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d004      	beq.n	8008c18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c14:	4313      	orrs	r3, r2
 8008c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008c22:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	6812      	ldr	r2, [r2, #0]
 8008c2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c2c:	430b      	orrs	r3, r1
 8008c2e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c36:	f023 010f 	bic.w	r1, r3, #15
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	430a      	orrs	r2, r1
 8008c44:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a90      	ldr	r2, [pc, #576]	; (8008e8c <UART_SetConfig+0x2e0>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d125      	bne.n	8008c9c <UART_SetConfig+0xf0>
 8008c50:	4b8f      	ldr	r3, [pc, #572]	; (8008e90 <UART_SetConfig+0x2e4>)
 8008c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c56:	f003 0303 	and.w	r3, r3, #3
 8008c5a:	2b03      	cmp	r3, #3
 8008c5c:	d81a      	bhi.n	8008c94 <UART_SetConfig+0xe8>
 8008c5e:	a201      	add	r2, pc, #4	; (adr r2, 8008c64 <UART_SetConfig+0xb8>)
 8008c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c64:	08008c75 	.word	0x08008c75
 8008c68:	08008c85 	.word	0x08008c85
 8008c6c:	08008c7d 	.word	0x08008c7d
 8008c70:	08008c8d 	.word	0x08008c8d
 8008c74:	2301      	movs	r3, #1
 8008c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c7a:	e116      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c82:	e112      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008c84:	2304      	movs	r3, #4
 8008c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c8a:	e10e      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008c8c:	2308      	movs	r3, #8
 8008c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c92:	e10a      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008c94:	2310      	movs	r3, #16
 8008c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c9a:	e106      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a7c      	ldr	r2, [pc, #496]	; (8008e94 <UART_SetConfig+0x2e8>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d138      	bne.n	8008d18 <UART_SetConfig+0x16c>
 8008ca6:	4b7a      	ldr	r3, [pc, #488]	; (8008e90 <UART_SetConfig+0x2e4>)
 8008ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cac:	f003 030c 	and.w	r3, r3, #12
 8008cb0:	2b0c      	cmp	r3, #12
 8008cb2:	d82d      	bhi.n	8008d10 <UART_SetConfig+0x164>
 8008cb4:	a201      	add	r2, pc, #4	; (adr r2, 8008cbc <UART_SetConfig+0x110>)
 8008cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cba:	bf00      	nop
 8008cbc:	08008cf1 	.word	0x08008cf1
 8008cc0:	08008d11 	.word	0x08008d11
 8008cc4:	08008d11 	.word	0x08008d11
 8008cc8:	08008d11 	.word	0x08008d11
 8008ccc:	08008d01 	.word	0x08008d01
 8008cd0:	08008d11 	.word	0x08008d11
 8008cd4:	08008d11 	.word	0x08008d11
 8008cd8:	08008d11 	.word	0x08008d11
 8008cdc:	08008cf9 	.word	0x08008cf9
 8008ce0:	08008d11 	.word	0x08008d11
 8008ce4:	08008d11 	.word	0x08008d11
 8008ce8:	08008d11 	.word	0x08008d11
 8008cec:	08008d09 	.word	0x08008d09
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cf6:	e0d8      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cfe:	e0d4      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008d00:	2304      	movs	r3, #4
 8008d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d06:	e0d0      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008d08:	2308      	movs	r3, #8
 8008d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d0e:	e0cc      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008d10:	2310      	movs	r3, #16
 8008d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d16:	e0c8      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a5e      	ldr	r2, [pc, #376]	; (8008e98 <UART_SetConfig+0x2ec>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d125      	bne.n	8008d6e <UART_SetConfig+0x1c2>
 8008d22:	4b5b      	ldr	r3, [pc, #364]	; (8008e90 <UART_SetConfig+0x2e4>)
 8008d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d2c:	2b30      	cmp	r3, #48	; 0x30
 8008d2e:	d016      	beq.n	8008d5e <UART_SetConfig+0x1b2>
 8008d30:	2b30      	cmp	r3, #48	; 0x30
 8008d32:	d818      	bhi.n	8008d66 <UART_SetConfig+0x1ba>
 8008d34:	2b20      	cmp	r3, #32
 8008d36:	d00a      	beq.n	8008d4e <UART_SetConfig+0x1a2>
 8008d38:	2b20      	cmp	r3, #32
 8008d3a:	d814      	bhi.n	8008d66 <UART_SetConfig+0x1ba>
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <UART_SetConfig+0x19a>
 8008d40:	2b10      	cmp	r3, #16
 8008d42:	d008      	beq.n	8008d56 <UART_SetConfig+0x1aa>
 8008d44:	e00f      	b.n	8008d66 <UART_SetConfig+0x1ba>
 8008d46:	2300      	movs	r3, #0
 8008d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d4c:	e0ad      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008d4e:	2302      	movs	r3, #2
 8008d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d54:	e0a9      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008d56:	2304      	movs	r3, #4
 8008d58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d5c:	e0a5      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008d5e:	2308      	movs	r3, #8
 8008d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d64:	e0a1      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008d66:	2310      	movs	r3, #16
 8008d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d6c:	e09d      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a4a      	ldr	r2, [pc, #296]	; (8008e9c <UART_SetConfig+0x2f0>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d125      	bne.n	8008dc4 <UART_SetConfig+0x218>
 8008d78:	4b45      	ldr	r3, [pc, #276]	; (8008e90 <UART_SetConfig+0x2e4>)
 8008d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008d82:	2bc0      	cmp	r3, #192	; 0xc0
 8008d84:	d016      	beq.n	8008db4 <UART_SetConfig+0x208>
 8008d86:	2bc0      	cmp	r3, #192	; 0xc0
 8008d88:	d818      	bhi.n	8008dbc <UART_SetConfig+0x210>
 8008d8a:	2b80      	cmp	r3, #128	; 0x80
 8008d8c:	d00a      	beq.n	8008da4 <UART_SetConfig+0x1f8>
 8008d8e:	2b80      	cmp	r3, #128	; 0x80
 8008d90:	d814      	bhi.n	8008dbc <UART_SetConfig+0x210>
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <UART_SetConfig+0x1f0>
 8008d96:	2b40      	cmp	r3, #64	; 0x40
 8008d98:	d008      	beq.n	8008dac <UART_SetConfig+0x200>
 8008d9a:	e00f      	b.n	8008dbc <UART_SetConfig+0x210>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008da2:	e082      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008da4:	2302      	movs	r3, #2
 8008da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008daa:	e07e      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008dac:	2304      	movs	r3, #4
 8008dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008db2:	e07a      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008db4:	2308      	movs	r3, #8
 8008db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dba:	e076      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008dbc:	2310      	movs	r3, #16
 8008dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dc2:	e072      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a35      	ldr	r2, [pc, #212]	; (8008ea0 <UART_SetConfig+0x2f4>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d12a      	bne.n	8008e24 <UART_SetConfig+0x278>
 8008dce:	4b30      	ldr	r3, [pc, #192]	; (8008e90 <UART_SetConfig+0x2e4>)
 8008dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ddc:	d01a      	beq.n	8008e14 <UART_SetConfig+0x268>
 8008dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008de2:	d81b      	bhi.n	8008e1c <UART_SetConfig+0x270>
 8008de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008de8:	d00c      	beq.n	8008e04 <UART_SetConfig+0x258>
 8008dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dee:	d815      	bhi.n	8008e1c <UART_SetConfig+0x270>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <UART_SetConfig+0x250>
 8008df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008df8:	d008      	beq.n	8008e0c <UART_SetConfig+0x260>
 8008dfa:	e00f      	b.n	8008e1c <UART_SetConfig+0x270>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e02:	e052      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e04:	2302      	movs	r3, #2
 8008e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e0a:	e04e      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e0c:	2304      	movs	r3, #4
 8008e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e12:	e04a      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e14:	2308      	movs	r3, #8
 8008e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e1a:	e046      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e1c:	2310      	movs	r3, #16
 8008e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e22:	e042      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a17      	ldr	r2, [pc, #92]	; (8008e88 <UART_SetConfig+0x2dc>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d13a      	bne.n	8008ea4 <UART_SetConfig+0x2f8>
 8008e2e:	4b18      	ldr	r3, [pc, #96]	; (8008e90 <UART_SetConfig+0x2e4>)
 8008e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e3c:	d01a      	beq.n	8008e74 <UART_SetConfig+0x2c8>
 8008e3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e42:	d81b      	bhi.n	8008e7c <UART_SetConfig+0x2d0>
 8008e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e48:	d00c      	beq.n	8008e64 <UART_SetConfig+0x2b8>
 8008e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e4e:	d815      	bhi.n	8008e7c <UART_SetConfig+0x2d0>
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d003      	beq.n	8008e5c <UART_SetConfig+0x2b0>
 8008e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e58:	d008      	beq.n	8008e6c <UART_SetConfig+0x2c0>
 8008e5a:	e00f      	b.n	8008e7c <UART_SetConfig+0x2d0>
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e62:	e022      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e64:	2302      	movs	r3, #2
 8008e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e6a:	e01e      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e6c:	2304      	movs	r3, #4
 8008e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e72:	e01a      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e74:	2308      	movs	r3, #8
 8008e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e7a:	e016      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e7c:	2310      	movs	r3, #16
 8008e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e82:	e012      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e84:	cfff69f3 	.word	0xcfff69f3
 8008e88:	40008000 	.word	0x40008000
 8008e8c:	40013800 	.word	0x40013800
 8008e90:	40021000 	.word	0x40021000
 8008e94:	40004400 	.word	0x40004400
 8008e98:	40004800 	.word	0x40004800
 8008e9c:	40004c00 	.word	0x40004c00
 8008ea0:	40005000 	.word	0x40005000
 8008ea4:	2310      	movs	r3, #16
 8008ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4aae      	ldr	r2, [pc, #696]	; (8009168 <UART_SetConfig+0x5bc>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	f040 8097 	bne.w	8008fe4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008eb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008eba:	2b08      	cmp	r3, #8
 8008ebc:	d823      	bhi.n	8008f06 <UART_SetConfig+0x35a>
 8008ebe:	a201      	add	r2, pc, #4	; (adr r2, 8008ec4 <UART_SetConfig+0x318>)
 8008ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec4:	08008ee9 	.word	0x08008ee9
 8008ec8:	08008f07 	.word	0x08008f07
 8008ecc:	08008ef1 	.word	0x08008ef1
 8008ed0:	08008f07 	.word	0x08008f07
 8008ed4:	08008ef7 	.word	0x08008ef7
 8008ed8:	08008f07 	.word	0x08008f07
 8008edc:	08008f07 	.word	0x08008f07
 8008ee0:	08008f07 	.word	0x08008f07
 8008ee4:	08008eff 	.word	0x08008eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ee8:	f7fc fd9e 	bl	8005a28 <HAL_RCC_GetPCLK1Freq>
 8008eec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008eee:	e010      	b.n	8008f12 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ef0:	4b9e      	ldr	r3, [pc, #632]	; (800916c <UART_SetConfig+0x5c0>)
 8008ef2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ef4:	e00d      	b.n	8008f12 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ef6:	f7fc fcff 	bl	80058f8 <HAL_RCC_GetSysClockFreq>
 8008efa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008efc:	e009      	b.n	8008f12 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f04:	e005      	b.n	8008f12 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008f06:	2300      	movs	r3, #0
 8008f08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 8130 	beq.w	800917a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1e:	4a94      	ldr	r2, [pc, #592]	; (8009170 <UART_SetConfig+0x5c4>)
 8008f20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f24:	461a      	mov	r2, r3
 8008f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f28:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f2c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	4613      	mov	r3, r2
 8008f34:	005b      	lsls	r3, r3, #1
 8008f36:	4413      	add	r3, r2
 8008f38:	69ba      	ldr	r2, [r7, #24]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d305      	bcc.n	8008f4a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d903      	bls.n	8008f52 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008f50:	e113      	b.n	800917a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f54:	2200      	movs	r2, #0
 8008f56:	60bb      	str	r3, [r7, #8]
 8008f58:	60fa      	str	r2, [r7, #12]
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5e:	4a84      	ldr	r2, [pc, #528]	; (8009170 <UART_SetConfig+0x5c4>)
 8008f60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	2200      	movs	r2, #0
 8008f68:	603b      	str	r3, [r7, #0]
 8008f6a:	607a      	str	r2, [r7, #4]
 8008f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f74:	f7f7 fe30 	bl	8000bd8 <__aeabi_uldivmod>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	4619      	mov	r1, r3
 8008f80:	f04f 0200 	mov.w	r2, #0
 8008f84:	f04f 0300 	mov.w	r3, #0
 8008f88:	020b      	lsls	r3, r1, #8
 8008f8a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f8e:	0202      	lsls	r2, r0, #8
 8008f90:	6979      	ldr	r1, [r7, #20]
 8008f92:	6849      	ldr	r1, [r1, #4]
 8008f94:	0849      	lsrs	r1, r1, #1
 8008f96:	2000      	movs	r0, #0
 8008f98:	460c      	mov	r4, r1
 8008f9a:	4605      	mov	r5, r0
 8008f9c:	eb12 0804 	adds.w	r8, r2, r4
 8008fa0:	eb43 0905 	adc.w	r9, r3, r5
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	469a      	mov	sl, r3
 8008fac:	4693      	mov	fp, r2
 8008fae:	4652      	mov	r2, sl
 8008fb0:	465b      	mov	r3, fp
 8008fb2:	4640      	mov	r0, r8
 8008fb4:	4649      	mov	r1, r9
 8008fb6:	f7f7 fe0f 	bl	8000bd8 <__aeabi_uldivmod>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fc8:	d308      	bcc.n	8008fdc <UART_SetConfig+0x430>
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fd0:	d204      	bcs.n	8008fdc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6a3a      	ldr	r2, [r7, #32]
 8008fd8:	60da      	str	r2, [r3, #12]
 8008fda:	e0ce      	b.n	800917a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008fe2:	e0ca      	b.n	800917a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fec:	d166      	bne.n	80090bc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008fee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ff2:	2b08      	cmp	r3, #8
 8008ff4:	d827      	bhi.n	8009046 <UART_SetConfig+0x49a>
 8008ff6:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <UART_SetConfig+0x450>)
 8008ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffc:	08009021 	.word	0x08009021
 8009000:	08009029 	.word	0x08009029
 8009004:	08009031 	.word	0x08009031
 8009008:	08009047 	.word	0x08009047
 800900c:	08009037 	.word	0x08009037
 8009010:	08009047 	.word	0x08009047
 8009014:	08009047 	.word	0x08009047
 8009018:	08009047 	.word	0x08009047
 800901c:	0800903f 	.word	0x0800903f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009020:	f7fc fd02 	bl	8005a28 <HAL_RCC_GetPCLK1Freq>
 8009024:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009026:	e014      	b.n	8009052 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009028:	f7fc fd14 	bl	8005a54 <HAL_RCC_GetPCLK2Freq>
 800902c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800902e:	e010      	b.n	8009052 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009030:	4b4e      	ldr	r3, [pc, #312]	; (800916c <UART_SetConfig+0x5c0>)
 8009032:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009034:	e00d      	b.n	8009052 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009036:	f7fc fc5f 	bl	80058f8 <HAL_RCC_GetSysClockFreq>
 800903a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800903c:	e009      	b.n	8009052 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800903e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009042:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009044:	e005      	b.n	8009052 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009046:	2300      	movs	r3, #0
 8009048:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009050:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	2b00      	cmp	r3, #0
 8009056:	f000 8090 	beq.w	800917a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905e:	4a44      	ldr	r2, [pc, #272]	; (8009170 <UART_SetConfig+0x5c4>)
 8009060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009064:	461a      	mov	r2, r3
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	fbb3 f3f2 	udiv	r3, r3, r2
 800906c:	005a      	lsls	r2, r3, #1
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	085b      	lsrs	r3, r3, #1
 8009074:	441a      	add	r2, r3
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	fbb2 f3f3 	udiv	r3, r2, r3
 800907e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009080:	6a3b      	ldr	r3, [r7, #32]
 8009082:	2b0f      	cmp	r3, #15
 8009084:	d916      	bls.n	80090b4 <UART_SetConfig+0x508>
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800908c:	d212      	bcs.n	80090b4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800908e:	6a3b      	ldr	r3, [r7, #32]
 8009090:	b29b      	uxth	r3, r3
 8009092:	f023 030f 	bic.w	r3, r3, #15
 8009096:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	085b      	lsrs	r3, r3, #1
 800909c:	b29b      	uxth	r3, r3
 800909e:	f003 0307 	and.w	r3, r3, #7
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	8bfb      	ldrh	r3, [r7, #30]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	8bfa      	ldrh	r2, [r7, #30]
 80090b0:	60da      	str	r2, [r3, #12]
 80090b2:	e062      	b.n	800917a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80090ba:	e05e      	b.n	800917a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090c0:	2b08      	cmp	r3, #8
 80090c2:	d828      	bhi.n	8009116 <UART_SetConfig+0x56a>
 80090c4:	a201      	add	r2, pc, #4	; (adr r2, 80090cc <UART_SetConfig+0x520>)
 80090c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ca:	bf00      	nop
 80090cc:	080090f1 	.word	0x080090f1
 80090d0:	080090f9 	.word	0x080090f9
 80090d4:	08009101 	.word	0x08009101
 80090d8:	08009117 	.word	0x08009117
 80090dc:	08009107 	.word	0x08009107
 80090e0:	08009117 	.word	0x08009117
 80090e4:	08009117 	.word	0x08009117
 80090e8:	08009117 	.word	0x08009117
 80090ec:	0800910f 	.word	0x0800910f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090f0:	f7fc fc9a 	bl	8005a28 <HAL_RCC_GetPCLK1Freq>
 80090f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80090f6:	e014      	b.n	8009122 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090f8:	f7fc fcac 	bl	8005a54 <HAL_RCC_GetPCLK2Freq>
 80090fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80090fe:	e010      	b.n	8009122 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009100:	4b1a      	ldr	r3, [pc, #104]	; (800916c <UART_SetConfig+0x5c0>)
 8009102:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009104:	e00d      	b.n	8009122 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009106:	f7fc fbf7 	bl	80058f8 <HAL_RCC_GetSysClockFreq>
 800910a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800910c:	e009      	b.n	8009122 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800910e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009112:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009114:	e005      	b.n	8009122 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009116:	2300      	movs	r3, #0
 8009118:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009120:	bf00      	nop
    }

    if (pclk != 0U)
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	2b00      	cmp	r3, #0
 8009126:	d028      	beq.n	800917a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912c:	4a10      	ldr	r2, [pc, #64]	; (8009170 <UART_SetConfig+0x5c4>)
 800912e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009132:	461a      	mov	r2, r3
 8009134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009136:	fbb3 f2f2 	udiv	r2, r3, r2
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	085b      	lsrs	r3, r3, #1
 8009140:	441a      	add	r2, r3
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	fbb2 f3f3 	udiv	r3, r2, r3
 800914a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800914c:	6a3b      	ldr	r3, [r7, #32]
 800914e:	2b0f      	cmp	r3, #15
 8009150:	d910      	bls.n	8009174 <UART_SetConfig+0x5c8>
 8009152:	6a3b      	ldr	r3, [r7, #32]
 8009154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009158:	d20c      	bcs.n	8009174 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	b29a      	uxth	r2, r3
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	60da      	str	r2, [r3, #12]
 8009164:	e009      	b.n	800917a <UART_SetConfig+0x5ce>
 8009166:	bf00      	nop
 8009168:	40008000 	.word	0x40008000
 800916c:	00f42400 	.word	0x00f42400
 8009170:	0800cf10 	.word	0x0800cf10
      }
      else
      {
        ret = HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2201      	movs	r2, #1
 800917e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2201      	movs	r2, #1
 8009186:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	2200      	movs	r2, #0
 800918e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	2200      	movs	r2, #0
 8009194:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009196:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800919a:	4618      	mov	r0, r3
 800919c:	3730      	adds	r7, #48	; 0x30
 800919e:	46bd      	mov	sp, r7
 80091a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080091a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b0:	f003 0308 	and.w	r3, r3, #8
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00a      	beq.n	80091ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	430a      	orrs	r2, r1
 80091cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00a      	beq.n	80091f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	430a      	orrs	r2, r1
 80091ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f4:	f003 0302 	and.w	r3, r3, #2
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00a      	beq.n	8009212 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	430a      	orrs	r2, r1
 8009210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009216:	f003 0304 	and.w	r3, r3, #4
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00a      	beq.n	8009234 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	430a      	orrs	r2, r1
 8009232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009238:	f003 0310 	and.w	r3, r3, #16
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00a      	beq.n	8009256 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	430a      	orrs	r2, r1
 8009254:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925a:	f003 0320 	and.w	r3, r3, #32
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00a      	beq.n	8009278 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009280:	2b00      	cmp	r3, #0
 8009282:	d01a      	beq.n	80092ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	430a      	orrs	r2, r1
 8009298:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800929e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092a2:	d10a      	bne.n	80092ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	430a      	orrs	r2, r1
 80092b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00a      	beq.n	80092dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	430a      	orrs	r2, r1
 80092da:	605a      	str	r2, [r3, #4]
  }
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b098      	sub	sp, #96	; 0x60
 80092ec:	af02      	add	r7, sp, #8
 80092ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80092f8:	f7fa f8de 	bl	80034b8 <HAL_GetTick>
 80092fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f003 0308 	and.w	r3, r3, #8
 8009308:	2b08      	cmp	r3, #8
 800930a:	d12f      	bne.n	800936c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800930c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009314:	2200      	movs	r2, #0
 8009316:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f88e 	bl	800943c <UART_WaitOnFlagUntilTimeout>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d022      	beq.n	800936c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932e:	e853 3f00 	ldrex	r3, [r3]
 8009332:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800933a:	653b      	str	r3, [r7, #80]	; 0x50
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	461a      	mov	r2, r3
 8009342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009344:	647b      	str	r3, [r7, #68]	; 0x44
 8009346:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009348:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800934a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800934c:	e841 2300 	strex	r3, r2, [r1]
 8009350:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1e6      	bne.n	8009326 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2220      	movs	r2, #32
 800935c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009368:	2303      	movs	r3, #3
 800936a:	e063      	b.n	8009434 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 0304 	and.w	r3, r3, #4
 8009376:	2b04      	cmp	r3, #4
 8009378:	d149      	bne.n	800940e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800937a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009382:	2200      	movs	r2, #0
 8009384:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f857 	bl	800943c <UART_WaitOnFlagUntilTimeout>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d03c      	beq.n	800940e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939c:	e853 3f00 	ldrex	r3, [r3]
 80093a0:	623b      	str	r3, [r7, #32]
   return(result);
 80093a2:	6a3b      	ldr	r3, [r7, #32]
 80093a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	461a      	mov	r2, r3
 80093b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093b2:	633b      	str	r3, [r7, #48]	; 0x30
 80093b4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093ba:	e841 2300 	strex	r3, r2, [r1]
 80093be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1e6      	bne.n	8009394 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3308      	adds	r3, #8
 80093cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	e853 3f00 	ldrex	r3, [r3]
 80093d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f023 0301 	bic.w	r3, r3, #1
 80093dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	3308      	adds	r3, #8
 80093e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093e6:	61fa      	str	r2, [r7, #28]
 80093e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ea:	69b9      	ldr	r1, [r7, #24]
 80093ec:	69fa      	ldr	r2, [r7, #28]
 80093ee:	e841 2300 	strex	r3, r2, [r1]
 80093f2:	617b      	str	r3, [r7, #20]
   return(result);
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1e5      	bne.n	80093c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2220      	movs	r2, #32
 80093fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	e012      	b.n	8009434 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2220      	movs	r2, #32
 8009412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2220      	movs	r2, #32
 800941a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3758      	adds	r7, #88	; 0x58
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	603b      	str	r3, [r7, #0]
 8009448:	4613      	mov	r3, r2
 800944a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800944c:	e049      	b.n	80094e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009454:	d045      	beq.n	80094e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009456:	f7fa f82f 	bl	80034b8 <HAL_GetTick>
 800945a:	4602      	mov	r2, r0
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	69ba      	ldr	r2, [r7, #24]
 8009462:	429a      	cmp	r2, r3
 8009464:	d302      	bcc.n	800946c <UART_WaitOnFlagUntilTimeout+0x30>
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d101      	bne.n	8009470 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e048      	b.n	8009502 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 0304 	and.w	r3, r3, #4
 800947a:	2b00      	cmp	r3, #0
 800947c:	d031      	beq.n	80094e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	69db      	ldr	r3, [r3, #28]
 8009484:	f003 0308 	and.w	r3, r3, #8
 8009488:	2b08      	cmp	r3, #8
 800948a:	d110      	bne.n	80094ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2208      	movs	r2, #8
 8009492:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 f95b 	bl	8009750 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2208      	movs	r2, #8
 800949e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e029      	b.n	8009502 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	69db      	ldr	r3, [r3, #28]
 80094b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094bc:	d111      	bne.n	80094e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 f941 	bl	8009750 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2220      	movs	r2, #32
 80094d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e00f      	b.n	8009502 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	69da      	ldr	r2, [r3, #28]
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	4013      	ands	r3, r2
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	bf0c      	ite	eq
 80094f2:	2301      	moveq	r3, #1
 80094f4:	2300      	movne	r3, #0
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	461a      	mov	r2, r3
 80094fa:	79fb      	ldrb	r3, [r7, #7]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d0a6      	beq.n	800944e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
	...

0800950c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800950c:	b480      	push	{r7}
 800950e:	b0a3      	sub	sp, #140	; 0x8c
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	4613      	mov	r3, r2
 8009518:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	88fa      	ldrh	r2, [r7, #6]
 8009524:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	88fa      	ldrh	r2, [r7, #6]
 800952c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800953e:	d10e      	bne.n	800955e <UART_Start_Receive_IT+0x52>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d105      	bne.n	8009554 <UART_Start_Receive_IT+0x48>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800954e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009552:	e02d      	b.n	80095b0 <UART_Start_Receive_IT+0xa4>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	22ff      	movs	r2, #255	; 0xff
 8009558:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800955c:	e028      	b.n	80095b0 <UART_Start_Receive_IT+0xa4>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10d      	bne.n	8009582 <UART_Start_Receive_IT+0x76>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d104      	bne.n	8009578 <UART_Start_Receive_IT+0x6c>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	22ff      	movs	r2, #255	; 0xff
 8009572:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009576:	e01b      	b.n	80095b0 <UART_Start_Receive_IT+0xa4>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	227f      	movs	r2, #127	; 0x7f
 800957c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009580:	e016      	b.n	80095b0 <UART_Start_Receive_IT+0xa4>
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800958a:	d10d      	bne.n	80095a8 <UART_Start_Receive_IT+0x9c>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d104      	bne.n	800959e <UART_Start_Receive_IT+0x92>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	227f      	movs	r2, #127	; 0x7f
 8009598:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800959c:	e008      	b.n	80095b0 <UART_Start_Receive_IT+0xa4>
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	223f      	movs	r2, #63	; 0x3f
 80095a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80095a6:	e003      	b.n	80095b0 <UART_Start_Receive_IT+0xa4>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2222      	movs	r2, #34	; 0x22
 80095bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3308      	adds	r3, #8
 80095c6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095ca:	e853 3f00 	ldrex	r3, [r3]
 80095ce:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80095d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095d2:	f043 0301 	orr.w	r3, r3, #1
 80095d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	3308      	adds	r3, #8
 80095e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80095e4:	673a      	str	r2, [r7, #112]	; 0x70
 80095e6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80095ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80095ec:	e841 2300 	strex	r3, r2, [r1]
 80095f0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80095f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1e3      	bne.n	80095c0 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009600:	d14f      	bne.n	80096a2 <UART_Start_Receive_IT+0x196>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009608:	88fa      	ldrh	r2, [r7, #6]
 800960a:	429a      	cmp	r2, r3
 800960c:	d349      	bcc.n	80096a2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009616:	d107      	bne.n	8009628 <UART_Start_Receive_IT+0x11c>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d103      	bne.n	8009628 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	4a47      	ldr	r2, [pc, #284]	; (8009740 <UART_Start_Receive_IT+0x234>)
 8009624:	675a      	str	r2, [r3, #116]	; 0x74
 8009626:	e002      	b.n	800962e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	4a46      	ldr	r2, [pc, #280]	; (8009744 <UART_Start_Receive_IT+0x238>)
 800962c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d01a      	beq.n	800966c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800963e:	e853 3f00 	ldrex	r3, [r3]
 8009642:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800964a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	461a      	mov	r2, r3
 8009654:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009658:	65fb      	str	r3, [r7, #92]	; 0x5c
 800965a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800965e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009660:	e841 2300 	strex	r3, r2, [r1]
 8009664:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1e4      	bne.n	8009636 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3308      	adds	r3, #8
 8009672:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009676:	e853 3f00 	ldrex	r3, [r3]
 800967a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800967c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009682:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3308      	adds	r3, #8
 800968a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800968c:	64ba      	str	r2, [r7, #72]	; 0x48
 800968e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009690:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009692:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009694:	e841 2300 	strex	r3, r2, [r1]
 8009698:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800969a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1e5      	bne.n	800966c <UART_Start_Receive_IT+0x160>
 80096a0:	e046      	b.n	8009730 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096aa:	d107      	bne.n	80096bc <UART_Start_Receive_IT+0x1b0>
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d103      	bne.n	80096bc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	4a24      	ldr	r2, [pc, #144]	; (8009748 <UART_Start_Receive_IT+0x23c>)
 80096b8:	675a      	str	r2, [r3, #116]	; 0x74
 80096ba:	e002      	b.n	80096c2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4a23      	ldr	r2, [pc, #140]	; (800974c <UART_Start_Receive_IT+0x240>)
 80096c0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d019      	beq.n	80096fe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d2:	e853 3f00 	ldrex	r3, [r3]
 80096d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096da:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80096de:	677b      	str	r3, [r7, #116]	; 0x74
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	461a      	mov	r2, r3
 80096e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096e8:	637b      	str	r3, [r7, #52]	; 0x34
 80096ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096f0:	e841 2300 	strex	r3, r2, [r1]
 80096f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80096f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d1e6      	bne.n	80096ca <UART_Start_Receive_IT+0x1be>
 80096fc:	e018      	b.n	8009730 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	e853 3f00 	ldrex	r3, [r3]
 800970a:	613b      	str	r3, [r7, #16]
   return(result);
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	f043 0320 	orr.w	r3, r3, #32
 8009712:	67bb      	str	r3, [r7, #120]	; 0x78
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	461a      	mov	r2, r3
 800971a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800971c:	623b      	str	r3, [r7, #32]
 800971e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009720:	69f9      	ldr	r1, [r7, #28]
 8009722:	6a3a      	ldr	r2, [r7, #32]
 8009724:	e841 2300 	strex	r3, r2, [r1]
 8009728:	61bb      	str	r3, [r7, #24]
   return(result);
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1e6      	bne.n	80096fe <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	378c      	adds	r7, #140	; 0x8c
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	08009f7d 	.word	0x08009f7d
 8009744:	08009c19 	.word	0x08009c19
 8009748:	08009a5d 	.word	0x08009a5d
 800974c:	080098a1 	.word	0x080098a1

08009750 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009750:	b480      	push	{r7}
 8009752:	b095      	sub	sp, #84	; 0x54
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009760:	e853 3f00 	ldrex	r3, [r3]
 8009764:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009768:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800976c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	461a      	mov	r2, r3
 8009774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009776:	643b      	str	r3, [r7, #64]	; 0x40
 8009778:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800977c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800977e:	e841 2300 	strex	r3, r2, [r1]
 8009782:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1e6      	bne.n	8009758 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3308      	adds	r3, #8
 8009790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009792:	6a3b      	ldr	r3, [r7, #32]
 8009794:	e853 3f00 	ldrex	r3, [r3]
 8009798:	61fb      	str	r3, [r7, #28]
   return(result);
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097a0:	f023 0301 	bic.w	r3, r3, #1
 80097a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3308      	adds	r3, #8
 80097ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097b6:	e841 2300 	strex	r3, r2, [r1]
 80097ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1e3      	bne.n	800978a <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d118      	bne.n	80097fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	e853 3f00 	ldrex	r3, [r3]
 80097d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	f023 0310 	bic.w	r3, r3, #16
 80097de:	647b      	str	r3, [r7, #68]	; 0x44
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	461a      	mov	r2, r3
 80097e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097e8:	61bb      	str	r3, [r7, #24]
 80097ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ec:	6979      	ldr	r1, [r7, #20]
 80097ee:	69ba      	ldr	r2, [r7, #24]
 80097f0:	e841 2300 	strex	r3, r2, [r1]
 80097f4:	613b      	str	r3, [r7, #16]
   return(result);
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1e6      	bne.n	80097ca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2220      	movs	r2, #32
 8009800:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009810:	bf00      	nop
 8009812:	3754      	adds	r7, #84	; 0x54
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009828:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f7ff f9a0 	bl	8008b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009840:	bf00      	nop
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b088      	sub	sp, #32
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	e853 3f00 	ldrex	r3, [r3]
 800985c:	60bb      	str	r3, [r7, #8]
   return(result);
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009864:	61fb      	str	r3, [r7, #28]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	61bb      	str	r3, [r7, #24]
 8009870:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009872:	6979      	ldr	r1, [r7, #20]
 8009874:	69ba      	ldr	r2, [r7, #24]
 8009876:	e841 2300 	strex	r3, r2, [r1]
 800987a:	613b      	str	r3, [r7, #16]
   return(result);
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1e6      	bne.n	8009850 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2220      	movs	r2, #32
 8009886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7ff f961 	bl	8008b58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009896:	bf00      	nop
 8009898:	3720      	adds	r7, #32
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b09c      	sub	sp, #112	; 0x70
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80098ae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098b8:	2b22      	cmp	r3, #34	; 0x22
 80098ba:	f040 80be 	bne.w	8009a3a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80098c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80098c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80098cc:	b2d9      	uxtb	r1, r3
 80098ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80098d2:	b2da      	uxtb	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098d8:	400a      	ands	r2, r1
 80098da:	b2d2      	uxtb	r2, r2
 80098dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098e2:	1c5a      	adds	r2, r3, #1
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	3b01      	subs	r3, #1
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009900:	b29b      	uxth	r3, r3
 8009902:	2b00      	cmp	r3, #0
 8009904:	f040 80a3 	bne.w	8009a4e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009910:	e853 3f00 	ldrex	r3, [r3]
 8009914:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009918:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800991c:	66bb      	str	r3, [r7, #104]	; 0x68
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	461a      	mov	r2, r3
 8009924:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009926:	65bb      	str	r3, [r7, #88]	; 0x58
 8009928:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800992c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800992e:	e841 2300 	strex	r3, r2, [r1]
 8009932:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1e6      	bne.n	8009908 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	3308      	adds	r3, #8
 8009940:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009944:	e853 3f00 	ldrex	r3, [r3]
 8009948:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800994a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800994c:	f023 0301 	bic.w	r3, r3, #1
 8009950:	667b      	str	r3, [r7, #100]	; 0x64
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	3308      	adds	r3, #8
 8009958:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800995a:	647a      	str	r2, [r7, #68]	; 0x44
 800995c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009960:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009962:	e841 2300 	strex	r3, r2, [r1]
 8009966:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1e5      	bne.n	800993a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2220      	movs	r2, #32
 8009972:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a34      	ldr	r2, [pc, #208]	; (8009a58 <UART_RxISR_8BIT+0x1b8>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d01f      	beq.n	80099cc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d018      	beq.n	80099cc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	e853 3f00 	ldrex	r3, [r3]
 80099a6:	623b      	str	r3, [r7, #32]
   return(result);
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80099ae:	663b      	str	r3, [r7, #96]	; 0x60
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	461a      	mov	r2, r3
 80099b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099b8:	633b      	str	r3, [r7, #48]	; 0x30
 80099ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099c0:	e841 2300 	strex	r3, r2, [r1]
 80099c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1e6      	bne.n	800999a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d12e      	bne.n	8009a32 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	e853 3f00 	ldrex	r3, [r3]
 80099e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f023 0310 	bic.w	r3, r3, #16
 80099ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	461a      	mov	r2, r3
 80099f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099f8:	61fb      	str	r3, [r7, #28]
 80099fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fc:	69b9      	ldr	r1, [r7, #24]
 80099fe:	69fa      	ldr	r2, [r7, #28]
 8009a00:	e841 2300 	strex	r3, r2, [r1]
 8009a04:	617b      	str	r3, [r7, #20]
   return(result);
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1e6      	bne.n	80099da <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	69db      	ldr	r3, [r3, #28]
 8009a12:	f003 0310 	and.w	r3, r3, #16
 8009a16:	2b10      	cmp	r3, #16
 8009a18:	d103      	bne.n	8009a22 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2210      	movs	r2, #16
 8009a20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a28:	4619      	mov	r1, r3
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7ff f8b2 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a30:	e00d      	b.n	8009a4e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7ff f89a 	bl	8008b6c <HAL_UART_RxCpltCallback>
}
 8009a38:	e009      	b.n	8009a4e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	8b1b      	ldrh	r3, [r3, #24]
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f042 0208 	orr.w	r2, r2, #8
 8009a4a:	b292      	uxth	r2, r2
 8009a4c:	831a      	strh	r2, [r3, #24]
}
 8009a4e:	bf00      	nop
 8009a50:	3770      	adds	r7, #112	; 0x70
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	40008000 	.word	0x40008000

08009a5c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b09c      	sub	sp, #112	; 0x70
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a6a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a74:	2b22      	cmp	r3, #34	; 0x22
 8009a76:	f040 80be 	bne.w	8009bf6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009a80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a88:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009a8a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009a8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009a92:	4013      	ands	r3, r2
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a98:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a9e:	1c9a      	adds	r2, r3, #2
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	3b01      	subs	r3, #1
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f040 80a3 	bne.w	8009c0a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009acc:	e853 3f00 	ldrex	r3, [r3]
 8009ad0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ad4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ad8:	667b      	str	r3, [r7, #100]	; 0x64
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ae2:	657b      	str	r3, [r7, #84]	; 0x54
 8009ae4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ae8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009aea:	e841 2300 	strex	r3, r2, [r1]
 8009aee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1e6      	bne.n	8009ac4 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	3308      	adds	r3, #8
 8009afc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b00:	e853 3f00 	ldrex	r3, [r3]
 8009b04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b08:	f023 0301 	bic.w	r3, r3, #1
 8009b0c:	663b      	str	r3, [r7, #96]	; 0x60
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	3308      	adds	r3, #8
 8009b14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b16:	643a      	str	r2, [r7, #64]	; 0x40
 8009b18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b1e:	e841 2300 	strex	r3, r2, [r1]
 8009b22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1e5      	bne.n	8009af6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2220      	movs	r2, #32
 8009b2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a34      	ldr	r2, [pc, #208]	; (8009c14 <UART_RxISR_16BIT+0x1b8>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d01f      	beq.n	8009b88 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d018      	beq.n	8009b88 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	e853 3f00 	ldrex	r3, [r3]
 8009b62:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	461a      	mov	r2, r3
 8009b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b76:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b7c:	e841 2300 	strex	r3, r2, [r1]
 8009b80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1e6      	bne.n	8009b56 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d12e      	bne.n	8009bee <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	e853 3f00 	ldrex	r3, [r3]
 8009ba2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	f023 0310 	bic.w	r3, r3, #16
 8009baa:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bb4:	61bb      	str	r3, [r7, #24]
 8009bb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb8:	6979      	ldr	r1, [r7, #20]
 8009bba:	69ba      	ldr	r2, [r7, #24]
 8009bbc:	e841 2300 	strex	r3, r2, [r1]
 8009bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1e6      	bne.n	8009b96 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	69db      	ldr	r3, [r3, #28]
 8009bce:	f003 0310 	and.w	r3, r3, #16
 8009bd2:	2b10      	cmp	r3, #16
 8009bd4:	d103      	bne.n	8009bde <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2210      	movs	r2, #16
 8009bdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009be4:	4619      	mov	r1, r3
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f7fe ffd4 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009bec:	e00d      	b.n	8009c0a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7fe ffbc 	bl	8008b6c <HAL_UART_RxCpltCallback>
}
 8009bf4:	e009      	b.n	8009c0a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	8b1b      	ldrh	r3, [r3, #24]
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f042 0208 	orr.w	r2, r2, #8
 8009c06:	b292      	uxth	r2, r2
 8009c08:	831a      	strh	r2, [r3, #24]
}
 8009c0a:	bf00      	nop
 8009c0c:	3770      	adds	r7, #112	; 0x70
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	40008000 	.word	0x40008000

08009c18 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b0ac      	sub	sp, #176	; 0xb0
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c26:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	69db      	ldr	r3, [r3, #28]
 8009c30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c4e:	2b22      	cmp	r3, #34	; 0x22
 8009c50:	f040 8182 	bne.w	8009f58 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c5a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c5e:	e125      	b.n	8009eac <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009c66:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c6a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009c6e:	b2d9      	uxtb	r1, r3
 8009c70:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009c74:	b2da      	uxtb	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c7a:	400a      	ands	r2, r1
 8009c7c:	b2d2      	uxtb	r2, r2
 8009c7e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c84:	1c5a      	adds	r2, r3, #1
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	3b01      	subs	r3, #1
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	69db      	ldr	r3, [r3, #28]
 8009ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009caa:	f003 0307 	and.w	r3, r3, #7
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d053      	beq.n	8009d5a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cb6:	f003 0301 	and.w	r3, r3, #1
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d011      	beq.n	8009ce2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009cbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00b      	beq.n	8009ce2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cd8:	f043 0201 	orr.w	r2, r3, #1
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ce6:	f003 0302 	and.w	r3, r3, #2
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d011      	beq.n	8009d12 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009cee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cf2:	f003 0301 	and.w	r3, r3, #1
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00b      	beq.n	8009d12 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d08:	f043 0204 	orr.w	r2, r3, #4
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d16:	f003 0304 	and.w	r3, r3, #4
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d011      	beq.n	8009d42 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009d1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00b      	beq.n	8009d42 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2204      	movs	r2, #4
 8009d30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d38:	f043 0202 	orr.w	r2, r3, #2
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d006      	beq.n	8009d5a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f7fe ff17 	bl	8008b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f040 80a2 	bne.w	8009eac <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d70:	e853 3f00 	ldrex	r3, [r3]
 8009d74:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	461a      	mov	r2, r3
 8009d86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d8c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009d90:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009d92:	e841 2300 	strex	r3, r2, [r1]
 8009d96:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1e4      	bne.n	8009d68 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3308      	adds	r3, #8
 8009da4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009da8:	e853 3f00 	ldrex	r3, [r3]
 8009dac:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009dae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009db4:	f023 0301 	bic.w	r3, r3, #1
 8009db8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	3308      	adds	r3, #8
 8009dc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009dc6:	66ba      	str	r2, [r7, #104]	; 0x68
 8009dc8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009dcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009dce:	e841 2300 	strex	r3, r2, [r1]
 8009dd2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009dd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1e1      	bne.n	8009d9e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2220      	movs	r2, #32
 8009dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a60      	ldr	r2, [pc, #384]	; (8009f74 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d021      	beq.n	8009e3c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d01a      	beq.n	8009e3c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e0e:	e853 3f00 	ldrex	r3, [r3]
 8009e12:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e28:	657b      	str	r3, [r7, #84]	; 0x54
 8009e2a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e30:	e841 2300 	strex	r3, r2, [r1]
 8009e34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1e4      	bne.n	8009e06 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d130      	bne.n	8009ea6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e52:	e853 3f00 	ldrex	r3, [r3]
 8009e56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5a:	f023 0310 	bic.w	r3, r3, #16
 8009e5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	461a      	mov	r2, r3
 8009e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e6c:	643b      	str	r3, [r7, #64]	; 0x40
 8009e6e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e74:	e841 2300 	strex	r3, r2, [r1]
 8009e78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1e4      	bne.n	8009e4a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	69db      	ldr	r3, [r3, #28]
 8009e86:	f003 0310 	and.w	r3, r3, #16
 8009e8a:	2b10      	cmp	r3, #16
 8009e8c:	d103      	bne.n	8009e96 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2210      	movs	r2, #16
 8009e94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7fe fe78 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
 8009ea4:	e002      	b.n	8009eac <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7fe fe60 	bl	8008b6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009eac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d006      	beq.n	8009ec2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009eb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009eb8:	f003 0320 	and.w	r3, r3, #32
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f47f aecf 	bne.w	8009c60 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ec8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009ecc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d04b      	beq.n	8009f6c <UART_RxISR_8BIT_FIFOEN+0x354>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009eda:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d244      	bcs.n	8009f6c <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eea:	6a3b      	ldr	r3, [r7, #32]
 8009eec:	e853 3f00 	ldrex	r3, [r3]
 8009ef0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	3308      	adds	r3, #8
 8009f02:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009f06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f0e:	e841 2300 	strex	r3, r2, [r1]
 8009f12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1e3      	bne.n	8009ee2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a16      	ldr	r2, [pc, #88]	; (8009f78 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009f1e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	e853 3f00 	ldrex	r3, [r3]
 8009f2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	f043 0320 	orr.w	r3, r3, #32
 8009f34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f42:	61bb      	str	r3, [r7, #24]
 8009f44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f46:	6979      	ldr	r1, [r7, #20]
 8009f48:	69ba      	ldr	r2, [r7, #24]
 8009f4a:	e841 2300 	strex	r3, r2, [r1]
 8009f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1e4      	bne.n	8009f20 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f56:	e009      	b.n	8009f6c <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	8b1b      	ldrh	r3, [r3, #24]
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f042 0208 	orr.w	r2, r2, #8
 8009f68:	b292      	uxth	r2, r2
 8009f6a:	831a      	strh	r2, [r3, #24]
}
 8009f6c:	bf00      	nop
 8009f6e:	37b0      	adds	r7, #176	; 0xb0
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	40008000 	.word	0x40008000
 8009f78:	080098a1 	.word	0x080098a1

08009f7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b0ae      	sub	sp, #184	; 0xb8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f8a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	69db      	ldr	r3, [r3, #28]
 8009f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fb2:	2b22      	cmp	r3, #34	; 0x22
 8009fb4:	f040 8186 	bne.w	800a2c4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009fbe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009fc2:	e129      	b.n	800a218 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009fca:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009fd6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009fda:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009fde:	4013      	ands	r3, r2
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009fe6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fec:	1c9a      	adds	r2, r3, #2
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	b29a      	uxth	r2, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a00e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a012:	f003 0307 	and.w	r3, r3, #7
 800a016:	2b00      	cmp	r3, #0
 800a018:	d053      	beq.n	800a0c2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a01a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a01e:	f003 0301 	and.w	r3, r3, #1
 800a022:	2b00      	cmp	r3, #0
 800a024:	d011      	beq.n	800a04a <UART_RxISR_16BIT_FIFOEN+0xce>
 800a026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a02a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00b      	beq.n	800a04a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2201      	movs	r2, #1
 800a038:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a040:	f043 0201 	orr.w	r2, r3, #1
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a04a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a04e:	f003 0302 	and.w	r3, r3, #2
 800a052:	2b00      	cmp	r3, #0
 800a054:	d011      	beq.n	800a07a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a056:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00b      	beq.n	800a07a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2202      	movs	r2, #2
 800a068:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a070:	f043 0204 	orr.w	r2, r3, #4
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a07a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a07e:	f003 0304 	and.w	r3, r3, #4
 800a082:	2b00      	cmp	r3, #0
 800a084:	d011      	beq.n	800a0aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a086:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a08a:	f003 0301 	and.w	r3, r3, #1
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00b      	beq.n	800a0aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2204      	movs	r2, #4
 800a098:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0a0:	f043 0202 	orr.w	r2, r3, #2
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d006      	beq.n	800a0c2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7fe fd63 	bl	8008b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f040 80a4 	bne.w	800a218 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0d8:	e853 3f00 	ldrex	r3, [r3]
 800a0dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a0de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a0f6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a0fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a0fe:	e841 2300 	strex	r3, r2, [r1]
 800a102:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1e2      	bne.n	800a0d0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	3308      	adds	r3, #8
 800a110:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a114:	e853 3f00 	ldrex	r3, [r3]
 800a118:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a11a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a11c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a120:	f023 0301 	bic.w	r3, r3, #1
 800a124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3308      	adds	r3, #8
 800a12e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a132:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a134:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a136:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a138:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a13a:	e841 2300 	strex	r3, r2, [r1]
 800a13e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1e1      	bne.n	800a10a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2220      	movs	r2, #32
 800a14a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a60      	ldr	r2, [pc, #384]	; (800a2e0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d021      	beq.n	800a1a8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d01a      	beq.n	800a1a8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a17a:	e853 3f00 	ldrex	r3, [r3]
 800a17e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a182:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a186:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	461a      	mov	r2, r3
 800a190:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a194:	65bb      	str	r3, [r7, #88]	; 0x58
 800a196:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a198:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a19a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a19c:	e841 2300 	strex	r3, r2, [r1]
 800a1a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a1a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1e4      	bne.n	800a172 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d130      	bne.n	800a212 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1be:	e853 3f00 	ldrex	r3, [r3]
 800a1c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c6:	f023 0310 	bic.w	r3, r3, #16
 800a1ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1d8:	647b      	str	r3, [r7, #68]	; 0x44
 800a1da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1e0:	e841 2300 	strex	r3, r2, [r1]
 800a1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d1e4      	bne.n	800a1b6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	69db      	ldr	r3, [r3, #28]
 800a1f2:	f003 0310 	and.w	r3, r3, #16
 800a1f6:	2b10      	cmp	r3, #16
 800a1f8:	d103      	bne.n	800a202 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2210      	movs	r2, #16
 800a200:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a208:	4619      	mov	r1, r3
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f7fe fcc2 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
 800a210:	e002      	b.n	800a218 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f7fe fcaa 	bl	8008b6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a218:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d006      	beq.n	800a22e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800a220:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a224:	f003 0320 	and.w	r3, r3, #32
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f47f aecb 	bne.w	8009fc4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a234:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a238:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d04b      	beq.n	800a2d8 <UART_RxISR_16BIT_FIFOEN+0x35c>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a246:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d244      	bcs.n	800a2d8 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	3308      	adds	r3, #8
 800a254:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a258:	e853 3f00 	ldrex	r3, [r3]
 800a25c:	623b      	str	r3, [r7, #32]
   return(result);
 800a25e:	6a3b      	ldr	r3, [r7, #32]
 800a260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a264:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	3308      	adds	r3, #8
 800a26e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a272:	633a      	str	r2, [r7, #48]	; 0x30
 800a274:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a27a:	e841 2300 	strex	r3, r2, [r1]
 800a27e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1e3      	bne.n	800a24e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4a16      	ldr	r2, [pc, #88]	; (800a2e4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800a28a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	e853 3f00 	ldrex	r3, [r3]
 800a298:	60fb      	str	r3, [r7, #12]
   return(result);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f043 0320 	orr.w	r3, r3, #32
 800a2a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a2ae:	61fb      	str	r3, [r7, #28]
 800a2b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b2:	69b9      	ldr	r1, [r7, #24]
 800a2b4:	69fa      	ldr	r2, [r7, #28]
 800a2b6:	e841 2300 	strex	r3, r2, [r1]
 800a2ba:	617b      	str	r3, [r7, #20]
   return(result);
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1e4      	bne.n	800a28c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2c2:	e009      	b.n	800a2d8 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	8b1b      	ldrh	r3, [r3, #24]
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f042 0208 	orr.w	r2, r2, #8
 800a2d4:	b292      	uxth	r2, r2
 800a2d6:	831a      	strh	r2, [r3, #24]
}
 800a2d8:	bf00      	nop
 800a2da:	37b8      	adds	r7, #184	; 0xb8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	40008000 	.word	0x40008000
 800a2e4:	08009a5d 	.word	0x08009a5d

0800a2e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a318:	bf00      	nop
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a332:	2b01      	cmp	r3, #1
 800a334:	d101      	bne.n	800a33a <HAL_UARTEx_DisableFifoMode+0x16>
 800a336:	2302      	movs	r3, #2
 800a338:	e027      	b.n	800a38a <HAL_UARTEx_DisableFifoMode+0x66>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2224      	movs	r2, #36	; 0x24
 800a346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f022 0201 	bic.w	r2, r2, #1
 800a360:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a368:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2220      	movs	r2, #32
 800a37c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3714      	adds	r7, #20
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b084      	sub	sp, #16
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
 800a39e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d101      	bne.n	800a3ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a3aa:	2302      	movs	r3, #2
 800a3ac:	e02d      	b.n	800a40a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2224      	movs	r2, #36	; 0x24
 800a3ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f022 0201 	bic.w	r2, r2, #1
 800a3d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	683a      	ldr	r2, [r7, #0]
 800a3e6:	430a      	orrs	r2, r1
 800a3e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 f850 	bl	800a490 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2220      	movs	r2, #32
 800a3fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b084      	sub	sp, #16
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
 800a41a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a422:	2b01      	cmp	r3, #1
 800a424:	d101      	bne.n	800a42a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a426:	2302      	movs	r3, #2
 800a428:	e02d      	b.n	800a486 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2224      	movs	r2, #36	; 0x24
 800a436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f022 0201 	bic.w	r2, r2, #1
 800a450:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	683a      	ldr	r2, [r7, #0]
 800a462:	430a      	orrs	r2, r1
 800a464:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f812 	bl	800a490 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2220      	movs	r2, #32
 800a478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
	...

0800a490 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d108      	bne.n	800a4b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a4b0:	e031      	b.n	800a516 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a4b2:	2308      	movs	r3, #8
 800a4b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a4b6:	2308      	movs	r3, #8
 800a4b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	0e5b      	lsrs	r3, r3, #25
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	f003 0307 	and.w	r3, r3, #7
 800a4c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	0f5b      	lsrs	r3, r3, #29
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	f003 0307 	and.w	r3, r3, #7
 800a4d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4da:	7bbb      	ldrb	r3, [r7, #14]
 800a4dc:	7b3a      	ldrb	r2, [r7, #12]
 800a4de:	4911      	ldr	r1, [pc, #68]	; (800a524 <UARTEx_SetNbDataToProcess+0x94>)
 800a4e0:	5c8a      	ldrb	r2, [r1, r2]
 800a4e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4e6:	7b3a      	ldrb	r2, [r7, #12]
 800a4e8:	490f      	ldr	r1, [pc, #60]	; (800a528 <UARTEx_SetNbDataToProcess+0x98>)
 800a4ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4f8:	7bfb      	ldrb	r3, [r7, #15]
 800a4fa:	7b7a      	ldrb	r2, [r7, #13]
 800a4fc:	4909      	ldr	r1, [pc, #36]	; (800a524 <UARTEx_SetNbDataToProcess+0x94>)
 800a4fe:	5c8a      	ldrb	r2, [r1, r2]
 800a500:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a504:	7b7a      	ldrb	r2, [r7, #13]
 800a506:	4908      	ldr	r1, [pc, #32]	; (800a528 <UARTEx_SetNbDataToProcess+0x98>)
 800a508:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a50a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a50e:	b29a      	uxth	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a516:	bf00      	nop
 800a518:	3714      	adds	r7, #20
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop
 800a524:	0800cf28 	.word	0x0800cf28
 800a528:	0800cf30 	.word	0x0800cf30

0800a52c <__cvt>:
 800a52c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a530:	ec55 4b10 	vmov	r4, r5, d0
 800a534:	2d00      	cmp	r5, #0
 800a536:	460e      	mov	r6, r1
 800a538:	4619      	mov	r1, r3
 800a53a:	462b      	mov	r3, r5
 800a53c:	bfbb      	ittet	lt
 800a53e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a542:	461d      	movlt	r5, r3
 800a544:	2300      	movge	r3, #0
 800a546:	232d      	movlt	r3, #45	; 0x2d
 800a548:	700b      	strb	r3, [r1, #0]
 800a54a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a54c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a550:	4691      	mov	r9, r2
 800a552:	f023 0820 	bic.w	r8, r3, #32
 800a556:	bfbc      	itt	lt
 800a558:	4622      	movlt	r2, r4
 800a55a:	4614      	movlt	r4, r2
 800a55c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a560:	d005      	beq.n	800a56e <__cvt+0x42>
 800a562:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a566:	d100      	bne.n	800a56a <__cvt+0x3e>
 800a568:	3601      	adds	r6, #1
 800a56a:	2102      	movs	r1, #2
 800a56c:	e000      	b.n	800a570 <__cvt+0x44>
 800a56e:	2103      	movs	r1, #3
 800a570:	ab03      	add	r3, sp, #12
 800a572:	9301      	str	r3, [sp, #4]
 800a574:	ab02      	add	r3, sp, #8
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	ec45 4b10 	vmov	d0, r4, r5
 800a57c:	4653      	mov	r3, sl
 800a57e:	4632      	mov	r2, r6
 800a580:	f000 fe56 	bl	800b230 <_dtoa_r>
 800a584:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a588:	4607      	mov	r7, r0
 800a58a:	d102      	bne.n	800a592 <__cvt+0x66>
 800a58c:	f019 0f01 	tst.w	r9, #1
 800a590:	d022      	beq.n	800a5d8 <__cvt+0xac>
 800a592:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a596:	eb07 0906 	add.w	r9, r7, r6
 800a59a:	d110      	bne.n	800a5be <__cvt+0x92>
 800a59c:	783b      	ldrb	r3, [r7, #0]
 800a59e:	2b30      	cmp	r3, #48	; 0x30
 800a5a0:	d10a      	bne.n	800a5b8 <__cvt+0x8c>
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	f7f6 faa5 	bl	8000af8 <__aeabi_dcmpeq>
 800a5ae:	b918      	cbnz	r0, 800a5b8 <__cvt+0x8c>
 800a5b0:	f1c6 0601 	rsb	r6, r6, #1
 800a5b4:	f8ca 6000 	str.w	r6, [sl]
 800a5b8:	f8da 3000 	ldr.w	r3, [sl]
 800a5bc:	4499      	add	r9, r3
 800a5be:	2200      	movs	r2, #0
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	4629      	mov	r1, r5
 800a5c6:	f7f6 fa97 	bl	8000af8 <__aeabi_dcmpeq>
 800a5ca:	b108      	cbz	r0, 800a5d0 <__cvt+0xa4>
 800a5cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800a5d0:	2230      	movs	r2, #48	; 0x30
 800a5d2:	9b03      	ldr	r3, [sp, #12]
 800a5d4:	454b      	cmp	r3, r9
 800a5d6:	d307      	bcc.n	800a5e8 <__cvt+0xbc>
 800a5d8:	9b03      	ldr	r3, [sp, #12]
 800a5da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5dc:	1bdb      	subs	r3, r3, r7
 800a5de:	4638      	mov	r0, r7
 800a5e0:	6013      	str	r3, [r2, #0]
 800a5e2:	b004      	add	sp, #16
 800a5e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e8:	1c59      	adds	r1, r3, #1
 800a5ea:	9103      	str	r1, [sp, #12]
 800a5ec:	701a      	strb	r2, [r3, #0]
 800a5ee:	e7f0      	b.n	800a5d2 <__cvt+0xa6>

0800a5f0 <__exponent>:
 800a5f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2900      	cmp	r1, #0
 800a5f6:	bfb8      	it	lt
 800a5f8:	4249      	neglt	r1, r1
 800a5fa:	f803 2b02 	strb.w	r2, [r3], #2
 800a5fe:	bfb4      	ite	lt
 800a600:	222d      	movlt	r2, #45	; 0x2d
 800a602:	222b      	movge	r2, #43	; 0x2b
 800a604:	2909      	cmp	r1, #9
 800a606:	7042      	strb	r2, [r0, #1]
 800a608:	dd2a      	ble.n	800a660 <__exponent+0x70>
 800a60a:	f10d 0207 	add.w	r2, sp, #7
 800a60e:	4617      	mov	r7, r2
 800a610:	260a      	movs	r6, #10
 800a612:	4694      	mov	ip, r2
 800a614:	fb91 f5f6 	sdiv	r5, r1, r6
 800a618:	fb06 1415 	mls	r4, r6, r5, r1
 800a61c:	3430      	adds	r4, #48	; 0x30
 800a61e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a622:	460c      	mov	r4, r1
 800a624:	2c63      	cmp	r4, #99	; 0x63
 800a626:	f102 32ff 	add.w	r2, r2, #4294967295
 800a62a:	4629      	mov	r1, r5
 800a62c:	dcf1      	bgt.n	800a612 <__exponent+0x22>
 800a62e:	3130      	adds	r1, #48	; 0x30
 800a630:	f1ac 0402 	sub.w	r4, ip, #2
 800a634:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a638:	1c41      	adds	r1, r0, #1
 800a63a:	4622      	mov	r2, r4
 800a63c:	42ba      	cmp	r2, r7
 800a63e:	d30a      	bcc.n	800a656 <__exponent+0x66>
 800a640:	f10d 0209 	add.w	r2, sp, #9
 800a644:	eba2 020c 	sub.w	r2, r2, ip
 800a648:	42bc      	cmp	r4, r7
 800a64a:	bf88      	it	hi
 800a64c:	2200      	movhi	r2, #0
 800a64e:	4413      	add	r3, r2
 800a650:	1a18      	subs	r0, r3, r0
 800a652:	b003      	add	sp, #12
 800a654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a656:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a65a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a65e:	e7ed      	b.n	800a63c <__exponent+0x4c>
 800a660:	2330      	movs	r3, #48	; 0x30
 800a662:	3130      	adds	r1, #48	; 0x30
 800a664:	7083      	strb	r3, [r0, #2]
 800a666:	70c1      	strb	r1, [r0, #3]
 800a668:	1d03      	adds	r3, r0, #4
 800a66a:	e7f1      	b.n	800a650 <__exponent+0x60>

0800a66c <_printf_float>:
 800a66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a670:	ed2d 8b02 	vpush	{d8}
 800a674:	b08d      	sub	sp, #52	; 0x34
 800a676:	460c      	mov	r4, r1
 800a678:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a67c:	4616      	mov	r6, r2
 800a67e:	461f      	mov	r7, r3
 800a680:	4605      	mov	r5, r0
 800a682:	f000 fcc7 	bl	800b014 <_localeconv_r>
 800a686:	f8d0 a000 	ldr.w	sl, [r0]
 800a68a:	4650      	mov	r0, sl
 800a68c:	f7f5 fe08 	bl	80002a0 <strlen>
 800a690:	2300      	movs	r3, #0
 800a692:	930a      	str	r3, [sp, #40]	; 0x28
 800a694:	6823      	ldr	r3, [r4, #0]
 800a696:	9305      	str	r3, [sp, #20]
 800a698:	f8d8 3000 	ldr.w	r3, [r8]
 800a69c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a6a0:	3307      	adds	r3, #7
 800a6a2:	f023 0307 	bic.w	r3, r3, #7
 800a6a6:	f103 0208 	add.w	r2, r3, #8
 800a6aa:	f8c8 2000 	str.w	r2, [r8]
 800a6ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a6b6:	9307      	str	r3, [sp, #28]
 800a6b8:	f8cd 8018 	str.w	r8, [sp, #24]
 800a6bc:	ee08 0a10 	vmov	s16, r0
 800a6c0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a6c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6c8:	4b9e      	ldr	r3, [pc, #632]	; (800a944 <_printf_float+0x2d8>)
 800a6ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ce:	f7f6 fa45 	bl	8000b5c <__aeabi_dcmpun>
 800a6d2:	bb88      	cbnz	r0, 800a738 <_printf_float+0xcc>
 800a6d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6d8:	4b9a      	ldr	r3, [pc, #616]	; (800a944 <_printf_float+0x2d8>)
 800a6da:	f04f 32ff 	mov.w	r2, #4294967295
 800a6de:	f7f6 fa1f 	bl	8000b20 <__aeabi_dcmple>
 800a6e2:	bb48      	cbnz	r0, 800a738 <_printf_float+0xcc>
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	4640      	mov	r0, r8
 800a6ea:	4649      	mov	r1, r9
 800a6ec:	f7f6 fa0e 	bl	8000b0c <__aeabi_dcmplt>
 800a6f0:	b110      	cbz	r0, 800a6f8 <_printf_float+0x8c>
 800a6f2:	232d      	movs	r3, #45	; 0x2d
 800a6f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6f8:	4a93      	ldr	r2, [pc, #588]	; (800a948 <_printf_float+0x2dc>)
 800a6fa:	4b94      	ldr	r3, [pc, #592]	; (800a94c <_printf_float+0x2e0>)
 800a6fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a700:	bf94      	ite	ls
 800a702:	4690      	movls	r8, r2
 800a704:	4698      	movhi	r8, r3
 800a706:	2303      	movs	r3, #3
 800a708:	6123      	str	r3, [r4, #16]
 800a70a:	9b05      	ldr	r3, [sp, #20]
 800a70c:	f023 0304 	bic.w	r3, r3, #4
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	f04f 0900 	mov.w	r9, #0
 800a716:	9700      	str	r7, [sp, #0]
 800a718:	4633      	mov	r3, r6
 800a71a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a71c:	4621      	mov	r1, r4
 800a71e:	4628      	mov	r0, r5
 800a720:	f000 f9da 	bl	800aad8 <_printf_common>
 800a724:	3001      	adds	r0, #1
 800a726:	f040 8090 	bne.w	800a84a <_printf_float+0x1de>
 800a72a:	f04f 30ff 	mov.w	r0, #4294967295
 800a72e:	b00d      	add	sp, #52	; 0x34
 800a730:	ecbd 8b02 	vpop	{d8}
 800a734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a738:	4642      	mov	r2, r8
 800a73a:	464b      	mov	r3, r9
 800a73c:	4640      	mov	r0, r8
 800a73e:	4649      	mov	r1, r9
 800a740:	f7f6 fa0c 	bl	8000b5c <__aeabi_dcmpun>
 800a744:	b140      	cbz	r0, 800a758 <_printf_float+0xec>
 800a746:	464b      	mov	r3, r9
 800a748:	2b00      	cmp	r3, #0
 800a74a:	bfbc      	itt	lt
 800a74c:	232d      	movlt	r3, #45	; 0x2d
 800a74e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a752:	4a7f      	ldr	r2, [pc, #508]	; (800a950 <_printf_float+0x2e4>)
 800a754:	4b7f      	ldr	r3, [pc, #508]	; (800a954 <_printf_float+0x2e8>)
 800a756:	e7d1      	b.n	800a6fc <_printf_float+0x90>
 800a758:	6863      	ldr	r3, [r4, #4]
 800a75a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a75e:	9206      	str	r2, [sp, #24]
 800a760:	1c5a      	adds	r2, r3, #1
 800a762:	d13f      	bne.n	800a7e4 <_printf_float+0x178>
 800a764:	2306      	movs	r3, #6
 800a766:	6063      	str	r3, [r4, #4]
 800a768:	9b05      	ldr	r3, [sp, #20]
 800a76a:	6861      	ldr	r1, [r4, #4]
 800a76c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a770:	2300      	movs	r3, #0
 800a772:	9303      	str	r3, [sp, #12]
 800a774:	ab0a      	add	r3, sp, #40	; 0x28
 800a776:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a77a:	ab09      	add	r3, sp, #36	; 0x24
 800a77c:	ec49 8b10 	vmov	d0, r8, r9
 800a780:	9300      	str	r3, [sp, #0]
 800a782:	6022      	str	r2, [r4, #0]
 800a784:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a788:	4628      	mov	r0, r5
 800a78a:	f7ff fecf 	bl	800a52c <__cvt>
 800a78e:	9b06      	ldr	r3, [sp, #24]
 800a790:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a792:	2b47      	cmp	r3, #71	; 0x47
 800a794:	4680      	mov	r8, r0
 800a796:	d108      	bne.n	800a7aa <_printf_float+0x13e>
 800a798:	1cc8      	adds	r0, r1, #3
 800a79a:	db02      	blt.n	800a7a2 <_printf_float+0x136>
 800a79c:	6863      	ldr	r3, [r4, #4]
 800a79e:	4299      	cmp	r1, r3
 800a7a0:	dd41      	ble.n	800a826 <_printf_float+0x1ba>
 800a7a2:	f1ab 0302 	sub.w	r3, fp, #2
 800a7a6:	fa5f fb83 	uxtb.w	fp, r3
 800a7aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a7ae:	d820      	bhi.n	800a7f2 <_printf_float+0x186>
 800a7b0:	3901      	subs	r1, #1
 800a7b2:	465a      	mov	r2, fp
 800a7b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a7b8:	9109      	str	r1, [sp, #36]	; 0x24
 800a7ba:	f7ff ff19 	bl	800a5f0 <__exponent>
 800a7be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7c0:	1813      	adds	r3, r2, r0
 800a7c2:	2a01      	cmp	r2, #1
 800a7c4:	4681      	mov	r9, r0
 800a7c6:	6123      	str	r3, [r4, #16]
 800a7c8:	dc02      	bgt.n	800a7d0 <_printf_float+0x164>
 800a7ca:	6822      	ldr	r2, [r4, #0]
 800a7cc:	07d2      	lsls	r2, r2, #31
 800a7ce:	d501      	bpl.n	800a7d4 <_printf_float+0x168>
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	6123      	str	r3, [r4, #16]
 800a7d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d09c      	beq.n	800a716 <_printf_float+0xaa>
 800a7dc:	232d      	movs	r3, #45	; 0x2d
 800a7de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7e2:	e798      	b.n	800a716 <_printf_float+0xaa>
 800a7e4:	9a06      	ldr	r2, [sp, #24]
 800a7e6:	2a47      	cmp	r2, #71	; 0x47
 800a7e8:	d1be      	bne.n	800a768 <_printf_float+0xfc>
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1bc      	bne.n	800a768 <_printf_float+0xfc>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e7b9      	b.n	800a766 <_printf_float+0xfa>
 800a7f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a7f6:	d118      	bne.n	800a82a <_printf_float+0x1be>
 800a7f8:	2900      	cmp	r1, #0
 800a7fa:	6863      	ldr	r3, [r4, #4]
 800a7fc:	dd0b      	ble.n	800a816 <_printf_float+0x1aa>
 800a7fe:	6121      	str	r1, [r4, #16]
 800a800:	b913      	cbnz	r3, 800a808 <_printf_float+0x19c>
 800a802:	6822      	ldr	r2, [r4, #0]
 800a804:	07d0      	lsls	r0, r2, #31
 800a806:	d502      	bpl.n	800a80e <_printf_float+0x1a2>
 800a808:	3301      	adds	r3, #1
 800a80a:	440b      	add	r3, r1
 800a80c:	6123      	str	r3, [r4, #16]
 800a80e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a810:	f04f 0900 	mov.w	r9, #0
 800a814:	e7de      	b.n	800a7d4 <_printf_float+0x168>
 800a816:	b913      	cbnz	r3, 800a81e <_printf_float+0x1b2>
 800a818:	6822      	ldr	r2, [r4, #0]
 800a81a:	07d2      	lsls	r2, r2, #31
 800a81c:	d501      	bpl.n	800a822 <_printf_float+0x1b6>
 800a81e:	3302      	adds	r3, #2
 800a820:	e7f4      	b.n	800a80c <_printf_float+0x1a0>
 800a822:	2301      	movs	r3, #1
 800a824:	e7f2      	b.n	800a80c <_printf_float+0x1a0>
 800a826:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a82a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a82c:	4299      	cmp	r1, r3
 800a82e:	db05      	blt.n	800a83c <_printf_float+0x1d0>
 800a830:	6823      	ldr	r3, [r4, #0]
 800a832:	6121      	str	r1, [r4, #16]
 800a834:	07d8      	lsls	r0, r3, #31
 800a836:	d5ea      	bpl.n	800a80e <_printf_float+0x1a2>
 800a838:	1c4b      	adds	r3, r1, #1
 800a83a:	e7e7      	b.n	800a80c <_printf_float+0x1a0>
 800a83c:	2900      	cmp	r1, #0
 800a83e:	bfd4      	ite	le
 800a840:	f1c1 0202 	rsble	r2, r1, #2
 800a844:	2201      	movgt	r2, #1
 800a846:	4413      	add	r3, r2
 800a848:	e7e0      	b.n	800a80c <_printf_float+0x1a0>
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	055a      	lsls	r2, r3, #21
 800a84e:	d407      	bmi.n	800a860 <_printf_float+0x1f4>
 800a850:	6923      	ldr	r3, [r4, #16]
 800a852:	4642      	mov	r2, r8
 800a854:	4631      	mov	r1, r6
 800a856:	4628      	mov	r0, r5
 800a858:	47b8      	blx	r7
 800a85a:	3001      	adds	r0, #1
 800a85c:	d12c      	bne.n	800a8b8 <_printf_float+0x24c>
 800a85e:	e764      	b.n	800a72a <_printf_float+0xbe>
 800a860:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a864:	f240 80e0 	bls.w	800aa28 <_printf_float+0x3bc>
 800a868:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a86c:	2200      	movs	r2, #0
 800a86e:	2300      	movs	r3, #0
 800a870:	f7f6 f942 	bl	8000af8 <__aeabi_dcmpeq>
 800a874:	2800      	cmp	r0, #0
 800a876:	d034      	beq.n	800a8e2 <_printf_float+0x276>
 800a878:	4a37      	ldr	r2, [pc, #220]	; (800a958 <_printf_float+0x2ec>)
 800a87a:	2301      	movs	r3, #1
 800a87c:	4631      	mov	r1, r6
 800a87e:	4628      	mov	r0, r5
 800a880:	47b8      	blx	r7
 800a882:	3001      	adds	r0, #1
 800a884:	f43f af51 	beq.w	800a72a <_printf_float+0xbe>
 800a888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a88c:	429a      	cmp	r2, r3
 800a88e:	db02      	blt.n	800a896 <_printf_float+0x22a>
 800a890:	6823      	ldr	r3, [r4, #0]
 800a892:	07d8      	lsls	r0, r3, #31
 800a894:	d510      	bpl.n	800a8b8 <_printf_float+0x24c>
 800a896:	ee18 3a10 	vmov	r3, s16
 800a89a:	4652      	mov	r2, sl
 800a89c:	4631      	mov	r1, r6
 800a89e:	4628      	mov	r0, r5
 800a8a0:	47b8      	blx	r7
 800a8a2:	3001      	adds	r0, #1
 800a8a4:	f43f af41 	beq.w	800a72a <_printf_float+0xbe>
 800a8a8:	f04f 0800 	mov.w	r8, #0
 800a8ac:	f104 091a 	add.w	r9, r4, #26
 800a8b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	4543      	cmp	r3, r8
 800a8b6:	dc09      	bgt.n	800a8cc <_printf_float+0x260>
 800a8b8:	6823      	ldr	r3, [r4, #0]
 800a8ba:	079b      	lsls	r3, r3, #30
 800a8bc:	f100 8107 	bmi.w	800aace <_printf_float+0x462>
 800a8c0:	68e0      	ldr	r0, [r4, #12]
 800a8c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8c4:	4298      	cmp	r0, r3
 800a8c6:	bfb8      	it	lt
 800a8c8:	4618      	movlt	r0, r3
 800a8ca:	e730      	b.n	800a72e <_printf_float+0xc2>
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	464a      	mov	r2, r9
 800a8d0:	4631      	mov	r1, r6
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	47b8      	blx	r7
 800a8d6:	3001      	adds	r0, #1
 800a8d8:	f43f af27 	beq.w	800a72a <_printf_float+0xbe>
 800a8dc:	f108 0801 	add.w	r8, r8, #1
 800a8e0:	e7e6      	b.n	800a8b0 <_printf_float+0x244>
 800a8e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	dc39      	bgt.n	800a95c <_printf_float+0x2f0>
 800a8e8:	4a1b      	ldr	r2, [pc, #108]	; (800a958 <_printf_float+0x2ec>)
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	4631      	mov	r1, r6
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	47b8      	blx	r7
 800a8f2:	3001      	adds	r0, #1
 800a8f4:	f43f af19 	beq.w	800a72a <_printf_float+0xbe>
 800a8f8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	d102      	bne.n	800a906 <_printf_float+0x29a>
 800a900:	6823      	ldr	r3, [r4, #0]
 800a902:	07d9      	lsls	r1, r3, #31
 800a904:	d5d8      	bpl.n	800a8b8 <_printf_float+0x24c>
 800a906:	ee18 3a10 	vmov	r3, s16
 800a90a:	4652      	mov	r2, sl
 800a90c:	4631      	mov	r1, r6
 800a90e:	4628      	mov	r0, r5
 800a910:	47b8      	blx	r7
 800a912:	3001      	adds	r0, #1
 800a914:	f43f af09 	beq.w	800a72a <_printf_float+0xbe>
 800a918:	f04f 0900 	mov.w	r9, #0
 800a91c:	f104 0a1a 	add.w	sl, r4, #26
 800a920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a922:	425b      	negs	r3, r3
 800a924:	454b      	cmp	r3, r9
 800a926:	dc01      	bgt.n	800a92c <_printf_float+0x2c0>
 800a928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a92a:	e792      	b.n	800a852 <_printf_float+0x1e6>
 800a92c:	2301      	movs	r3, #1
 800a92e:	4652      	mov	r2, sl
 800a930:	4631      	mov	r1, r6
 800a932:	4628      	mov	r0, r5
 800a934:	47b8      	blx	r7
 800a936:	3001      	adds	r0, #1
 800a938:	f43f aef7 	beq.w	800a72a <_printf_float+0xbe>
 800a93c:	f109 0901 	add.w	r9, r9, #1
 800a940:	e7ee      	b.n	800a920 <_printf_float+0x2b4>
 800a942:	bf00      	nop
 800a944:	7fefffff 	.word	0x7fefffff
 800a948:	0800cf38 	.word	0x0800cf38
 800a94c:	0800cf3c 	.word	0x0800cf3c
 800a950:	0800cf40 	.word	0x0800cf40
 800a954:	0800cf44 	.word	0x0800cf44
 800a958:	0800cf48 	.word	0x0800cf48
 800a95c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a95e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a960:	429a      	cmp	r2, r3
 800a962:	bfa8      	it	ge
 800a964:	461a      	movge	r2, r3
 800a966:	2a00      	cmp	r2, #0
 800a968:	4691      	mov	r9, r2
 800a96a:	dc37      	bgt.n	800a9dc <_printf_float+0x370>
 800a96c:	f04f 0b00 	mov.w	fp, #0
 800a970:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a974:	f104 021a 	add.w	r2, r4, #26
 800a978:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a97a:	9305      	str	r3, [sp, #20]
 800a97c:	eba3 0309 	sub.w	r3, r3, r9
 800a980:	455b      	cmp	r3, fp
 800a982:	dc33      	bgt.n	800a9ec <_printf_float+0x380>
 800a984:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a988:	429a      	cmp	r2, r3
 800a98a:	db3b      	blt.n	800aa04 <_printf_float+0x398>
 800a98c:	6823      	ldr	r3, [r4, #0]
 800a98e:	07da      	lsls	r2, r3, #31
 800a990:	d438      	bmi.n	800aa04 <_printf_float+0x398>
 800a992:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a996:	eba2 0903 	sub.w	r9, r2, r3
 800a99a:	9b05      	ldr	r3, [sp, #20]
 800a99c:	1ad2      	subs	r2, r2, r3
 800a99e:	4591      	cmp	r9, r2
 800a9a0:	bfa8      	it	ge
 800a9a2:	4691      	movge	r9, r2
 800a9a4:	f1b9 0f00 	cmp.w	r9, #0
 800a9a8:	dc35      	bgt.n	800aa16 <_printf_float+0x3aa>
 800a9aa:	f04f 0800 	mov.w	r8, #0
 800a9ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9b2:	f104 0a1a 	add.w	sl, r4, #26
 800a9b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9ba:	1a9b      	subs	r3, r3, r2
 800a9bc:	eba3 0309 	sub.w	r3, r3, r9
 800a9c0:	4543      	cmp	r3, r8
 800a9c2:	f77f af79 	ble.w	800a8b8 <_printf_float+0x24c>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	4652      	mov	r2, sl
 800a9ca:	4631      	mov	r1, r6
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	47b8      	blx	r7
 800a9d0:	3001      	adds	r0, #1
 800a9d2:	f43f aeaa 	beq.w	800a72a <_printf_float+0xbe>
 800a9d6:	f108 0801 	add.w	r8, r8, #1
 800a9da:	e7ec      	b.n	800a9b6 <_printf_float+0x34a>
 800a9dc:	4613      	mov	r3, r2
 800a9de:	4631      	mov	r1, r6
 800a9e0:	4642      	mov	r2, r8
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	47b8      	blx	r7
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	d1c0      	bne.n	800a96c <_printf_float+0x300>
 800a9ea:	e69e      	b.n	800a72a <_printf_float+0xbe>
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	4631      	mov	r1, r6
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	9205      	str	r2, [sp, #20]
 800a9f4:	47b8      	blx	r7
 800a9f6:	3001      	adds	r0, #1
 800a9f8:	f43f ae97 	beq.w	800a72a <_printf_float+0xbe>
 800a9fc:	9a05      	ldr	r2, [sp, #20]
 800a9fe:	f10b 0b01 	add.w	fp, fp, #1
 800aa02:	e7b9      	b.n	800a978 <_printf_float+0x30c>
 800aa04:	ee18 3a10 	vmov	r3, s16
 800aa08:	4652      	mov	r2, sl
 800aa0a:	4631      	mov	r1, r6
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	47b8      	blx	r7
 800aa10:	3001      	adds	r0, #1
 800aa12:	d1be      	bne.n	800a992 <_printf_float+0x326>
 800aa14:	e689      	b.n	800a72a <_printf_float+0xbe>
 800aa16:	9a05      	ldr	r2, [sp, #20]
 800aa18:	464b      	mov	r3, r9
 800aa1a:	4442      	add	r2, r8
 800aa1c:	4631      	mov	r1, r6
 800aa1e:	4628      	mov	r0, r5
 800aa20:	47b8      	blx	r7
 800aa22:	3001      	adds	r0, #1
 800aa24:	d1c1      	bne.n	800a9aa <_printf_float+0x33e>
 800aa26:	e680      	b.n	800a72a <_printf_float+0xbe>
 800aa28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa2a:	2a01      	cmp	r2, #1
 800aa2c:	dc01      	bgt.n	800aa32 <_printf_float+0x3c6>
 800aa2e:	07db      	lsls	r3, r3, #31
 800aa30:	d53a      	bpl.n	800aaa8 <_printf_float+0x43c>
 800aa32:	2301      	movs	r3, #1
 800aa34:	4642      	mov	r2, r8
 800aa36:	4631      	mov	r1, r6
 800aa38:	4628      	mov	r0, r5
 800aa3a:	47b8      	blx	r7
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	f43f ae74 	beq.w	800a72a <_printf_float+0xbe>
 800aa42:	ee18 3a10 	vmov	r3, s16
 800aa46:	4652      	mov	r2, sl
 800aa48:	4631      	mov	r1, r6
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	47b8      	blx	r7
 800aa4e:	3001      	adds	r0, #1
 800aa50:	f43f ae6b 	beq.w	800a72a <_printf_float+0xbe>
 800aa54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa58:	2200      	movs	r2, #0
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800aa60:	f7f6 f84a 	bl	8000af8 <__aeabi_dcmpeq>
 800aa64:	b9d8      	cbnz	r0, 800aa9e <_printf_float+0x432>
 800aa66:	f10a 33ff 	add.w	r3, sl, #4294967295
 800aa6a:	f108 0201 	add.w	r2, r8, #1
 800aa6e:	4631      	mov	r1, r6
 800aa70:	4628      	mov	r0, r5
 800aa72:	47b8      	blx	r7
 800aa74:	3001      	adds	r0, #1
 800aa76:	d10e      	bne.n	800aa96 <_printf_float+0x42a>
 800aa78:	e657      	b.n	800a72a <_printf_float+0xbe>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	4652      	mov	r2, sl
 800aa7e:	4631      	mov	r1, r6
 800aa80:	4628      	mov	r0, r5
 800aa82:	47b8      	blx	r7
 800aa84:	3001      	adds	r0, #1
 800aa86:	f43f ae50 	beq.w	800a72a <_printf_float+0xbe>
 800aa8a:	f108 0801 	add.w	r8, r8, #1
 800aa8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa90:	3b01      	subs	r3, #1
 800aa92:	4543      	cmp	r3, r8
 800aa94:	dcf1      	bgt.n	800aa7a <_printf_float+0x40e>
 800aa96:	464b      	mov	r3, r9
 800aa98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa9c:	e6da      	b.n	800a854 <_printf_float+0x1e8>
 800aa9e:	f04f 0800 	mov.w	r8, #0
 800aaa2:	f104 0a1a 	add.w	sl, r4, #26
 800aaa6:	e7f2      	b.n	800aa8e <_printf_float+0x422>
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	4642      	mov	r2, r8
 800aaac:	e7df      	b.n	800aa6e <_printf_float+0x402>
 800aaae:	2301      	movs	r3, #1
 800aab0:	464a      	mov	r2, r9
 800aab2:	4631      	mov	r1, r6
 800aab4:	4628      	mov	r0, r5
 800aab6:	47b8      	blx	r7
 800aab8:	3001      	adds	r0, #1
 800aaba:	f43f ae36 	beq.w	800a72a <_printf_float+0xbe>
 800aabe:	f108 0801 	add.w	r8, r8, #1
 800aac2:	68e3      	ldr	r3, [r4, #12]
 800aac4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aac6:	1a5b      	subs	r3, r3, r1
 800aac8:	4543      	cmp	r3, r8
 800aaca:	dcf0      	bgt.n	800aaae <_printf_float+0x442>
 800aacc:	e6f8      	b.n	800a8c0 <_printf_float+0x254>
 800aace:	f04f 0800 	mov.w	r8, #0
 800aad2:	f104 0919 	add.w	r9, r4, #25
 800aad6:	e7f4      	b.n	800aac2 <_printf_float+0x456>

0800aad8 <_printf_common>:
 800aad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aadc:	4616      	mov	r6, r2
 800aade:	4699      	mov	r9, r3
 800aae0:	688a      	ldr	r2, [r1, #8]
 800aae2:	690b      	ldr	r3, [r1, #16]
 800aae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aae8:	4293      	cmp	r3, r2
 800aaea:	bfb8      	it	lt
 800aaec:	4613      	movlt	r3, r2
 800aaee:	6033      	str	r3, [r6, #0]
 800aaf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aaf4:	4607      	mov	r7, r0
 800aaf6:	460c      	mov	r4, r1
 800aaf8:	b10a      	cbz	r2, 800aafe <_printf_common+0x26>
 800aafa:	3301      	adds	r3, #1
 800aafc:	6033      	str	r3, [r6, #0]
 800aafe:	6823      	ldr	r3, [r4, #0]
 800ab00:	0699      	lsls	r1, r3, #26
 800ab02:	bf42      	ittt	mi
 800ab04:	6833      	ldrmi	r3, [r6, #0]
 800ab06:	3302      	addmi	r3, #2
 800ab08:	6033      	strmi	r3, [r6, #0]
 800ab0a:	6825      	ldr	r5, [r4, #0]
 800ab0c:	f015 0506 	ands.w	r5, r5, #6
 800ab10:	d106      	bne.n	800ab20 <_printf_common+0x48>
 800ab12:	f104 0a19 	add.w	sl, r4, #25
 800ab16:	68e3      	ldr	r3, [r4, #12]
 800ab18:	6832      	ldr	r2, [r6, #0]
 800ab1a:	1a9b      	subs	r3, r3, r2
 800ab1c:	42ab      	cmp	r3, r5
 800ab1e:	dc26      	bgt.n	800ab6e <_printf_common+0x96>
 800ab20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab24:	1e13      	subs	r3, r2, #0
 800ab26:	6822      	ldr	r2, [r4, #0]
 800ab28:	bf18      	it	ne
 800ab2a:	2301      	movne	r3, #1
 800ab2c:	0692      	lsls	r2, r2, #26
 800ab2e:	d42b      	bmi.n	800ab88 <_printf_common+0xb0>
 800ab30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab34:	4649      	mov	r1, r9
 800ab36:	4638      	mov	r0, r7
 800ab38:	47c0      	blx	r8
 800ab3a:	3001      	adds	r0, #1
 800ab3c:	d01e      	beq.n	800ab7c <_printf_common+0xa4>
 800ab3e:	6823      	ldr	r3, [r4, #0]
 800ab40:	6922      	ldr	r2, [r4, #16]
 800ab42:	f003 0306 	and.w	r3, r3, #6
 800ab46:	2b04      	cmp	r3, #4
 800ab48:	bf02      	ittt	eq
 800ab4a:	68e5      	ldreq	r5, [r4, #12]
 800ab4c:	6833      	ldreq	r3, [r6, #0]
 800ab4e:	1aed      	subeq	r5, r5, r3
 800ab50:	68a3      	ldr	r3, [r4, #8]
 800ab52:	bf0c      	ite	eq
 800ab54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab58:	2500      	movne	r5, #0
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	bfc4      	itt	gt
 800ab5e:	1a9b      	subgt	r3, r3, r2
 800ab60:	18ed      	addgt	r5, r5, r3
 800ab62:	2600      	movs	r6, #0
 800ab64:	341a      	adds	r4, #26
 800ab66:	42b5      	cmp	r5, r6
 800ab68:	d11a      	bne.n	800aba0 <_printf_common+0xc8>
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	e008      	b.n	800ab80 <_printf_common+0xa8>
 800ab6e:	2301      	movs	r3, #1
 800ab70:	4652      	mov	r2, sl
 800ab72:	4649      	mov	r1, r9
 800ab74:	4638      	mov	r0, r7
 800ab76:	47c0      	blx	r8
 800ab78:	3001      	adds	r0, #1
 800ab7a:	d103      	bne.n	800ab84 <_printf_common+0xac>
 800ab7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab84:	3501      	adds	r5, #1
 800ab86:	e7c6      	b.n	800ab16 <_printf_common+0x3e>
 800ab88:	18e1      	adds	r1, r4, r3
 800ab8a:	1c5a      	adds	r2, r3, #1
 800ab8c:	2030      	movs	r0, #48	; 0x30
 800ab8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab92:	4422      	add	r2, r4
 800ab94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab9c:	3302      	adds	r3, #2
 800ab9e:	e7c7      	b.n	800ab30 <_printf_common+0x58>
 800aba0:	2301      	movs	r3, #1
 800aba2:	4622      	mov	r2, r4
 800aba4:	4649      	mov	r1, r9
 800aba6:	4638      	mov	r0, r7
 800aba8:	47c0      	blx	r8
 800abaa:	3001      	adds	r0, #1
 800abac:	d0e6      	beq.n	800ab7c <_printf_common+0xa4>
 800abae:	3601      	adds	r6, #1
 800abb0:	e7d9      	b.n	800ab66 <_printf_common+0x8e>
	...

0800abb4 <_printf_i>:
 800abb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abb8:	7e0f      	ldrb	r7, [r1, #24]
 800abba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800abbc:	2f78      	cmp	r7, #120	; 0x78
 800abbe:	4691      	mov	r9, r2
 800abc0:	4680      	mov	r8, r0
 800abc2:	460c      	mov	r4, r1
 800abc4:	469a      	mov	sl, r3
 800abc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800abca:	d807      	bhi.n	800abdc <_printf_i+0x28>
 800abcc:	2f62      	cmp	r7, #98	; 0x62
 800abce:	d80a      	bhi.n	800abe6 <_printf_i+0x32>
 800abd0:	2f00      	cmp	r7, #0
 800abd2:	f000 80d4 	beq.w	800ad7e <_printf_i+0x1ca>
 800abd6:	2f58      	cmp	r7, #88	; 0x58
 800abd8:	f000 80c0 	beq.w	800ad5c <_printf_i+0x1a8>
 800abdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abe4:	e03a      	b.n	800ac5c <_printf_i+0xa8>
 800abe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abea:	2b15      	cmp	r3, #21
 800abec:	d8f6      	bhi.n	800abdc <_printf_i+0x28>
 800abee:	a101      	add	r1, pc, #4	; (adr r1, 800abf4 <_printf_i+0x40>)
 800abf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abf4:	0800ac4d 	.word	0x0800ac4d
 800abf8:	0800ac61 	.word	0x0800ac61
 800abfc:	0800abdd 	.word	0x0800abdd
 800ac00:	0800abdd 	.word	0x0800abdd
 800ac04:	0800abdd 	.word	0x0800abdd
 800ac08:	0800abdd 	.word	0x0800abdd
 800ac0c:	0800ac61 	.word	0x0800ac61
 800ac10:	0800abdd 	.word	0x0800abdd
 800ac14:	0800abdd 	.word	0x0800abdd
 800ac18:	0800abdd 	.word	0x0800abdd
 800ac1c:	0800abdd 	.word	0x0800abdd
 800ac20:	0800ad65 	.word	0x0800ad65
 800ac24:	0800ac8d 	.word	0x0800ac8d
 800ac28:	0800ad1f 	.word	0x0800ad1f
 800ac2c:	0800abdd 	.word	0x0800abdd
 800ac30:	0800abdd 	.word	0x0800abdd
 800ac34:	0800ad87 	.word	0x0800ad87
 800ac38:	0800abdd 	.word	0x0800abdd
 800ac3c:	0800ac8d 	.word	0x0800ac8d
 800ac40:	0800abdd 	.word	0x0800abdd
 800ac44:	0800abdd 	.word	0x0800abdd
 800ac48:	0800ad27 	.word	0x0800ad27
 800ac4c:	682b      	ldr	r3, [r5, #0]
 800ac4e:	1d1a      	adds	r2, r3, #4
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	602a      	str	r2, [r5, #0]
 800ac54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e09f      	b.n	800ada0 <_printf_i+0x1ec>
 800ac60:	6820      	ldr	r0, [r4, #0]
 800ac62:	682b      	ldr	r3, [r5, #0]
 800ac64:	0607      	lsls	r7, r0, #24
 800ac66:	f103 0104 	add.w	r1, r3, #4
 800ac6a:	6029      	str	r1, [r5, #0]
 800ac6c:	d501      	bpl.n	800ac72 <_printf_i+0xbe>
 800ac6e:	681e      	ldr	r6, [r3, #0]
 800ac70:	e003      	b.n	800ac7a <_printf_i+0xc6>
 800ac72:	0646      	lsls	r6, r0, #25
 800ac74:	d5fb      	bpl.n	800ac6e <_printf_i+0xba>
 800ac76:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ac7a:	2e00      	cmp	r6, #0
 800ac7c:	da03      	bge.n	800ac86 <_printf_i+0xd2>
 800ac7e:	232d      	movs	r3, #45	; 0x2d
 800ac80:	4276      	negs	r6, r6
 800ac82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac86:	485a      	ldr	r0, [pc, #360]	; (800adf0 <_printf_i+0x23c>)
 800ac88:	230a      	movs	r3, #10
 800ac8a:	e012      	b.n	800acb2 <_printf_i+0xfe>
 800ac8c:	682b      	ldr	r3, [r5, #0]
 800ac8e:	6820      	ldr	r0, [r4, #0]
 800ac90:	1d19      	adds	r1, r3, #4
 800ac92:	6029      	str	r1, [r5, #0]
 800ac94:	0605      	lsls	r5, r0, #24
 800ac96:	d501      	bpl.n	800ac9c <_printf_i+0xe8>
 800ac98:	681e      	ldr	r6, [r3, #0]
 800ac9a:	e002      	b.n	800aca2 <_printf_i+0xee>
 800ac9c:	0641      	lsls	r1, r0, #25
 800ac9e:	d5fb      	bpl.n	800ac98 <_printf_i+0xe4>
 800aca0:	881e      	ldrh	r6, [r3, #0]
 800aca2:	4853      	ldr	r0, [pc, #332]	; (800adf0 <_printf_i+0x23c>)
 800aca4:	2f6f      	cmp	r7, #111	; 0x6f
 800aca6:	bf0c      	ite	eq
 800aca8:	2308      	moveq	r3, #8
 800acaa:	230a      	movne	r3, #10
 800acac:	2100      	movs	r1, #0
 800acae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acb2:	6865      	ldr	r5, [r4, #4]
 800acb4:	60a5      	str	r5, [r4, #8]
 800acb6:	2d00      	cmp	r5, #0
 800acb8:	bfa2      	ittt	ge
 800acba:	6821      	ldrge	r1, [r4, #0]
 800acbc:	f021 0104 	bicge.w	r1, r1, #4
 800acc0:	6021      	strge	r1, [r4, #0]
 800acc2:	b90e      	cbnz	r6, 800acc8 <_printf_i+0x114>
 800acc4:	2d00      	cmp	r5, #0
 800acc6:	d04b      	beq.n	800ad60 <_printf_i+0x1ac>
 800acc8:	4615      	mov	r5, r2
 800acca:	fbb6 f1f3 	udiv	r1, r6, r3
 800acce:	fb03 6711 	mls	r7, r3, r1, r6
 800acd2:	5dc7      	ldrb	r7, [r0, r7]
 800acd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800acd8:	4637      	mov	r7, r6
 800acda:	42bb      	cmp	r3, r7
 800acdc:	460e      	mov	r6, r1
 800acde:	d9f4      	bls.n	800acca <_printf_i+0x116>
 800ace0:	2b08      	cmp	r3, #8
 800ace2:	d10b      	bne.n	800acfc <_printf_i+0x148>
 800ace4:	6823      	ldr	r3, [r4, #0]
 800ace6:	07de      	lsls	r6, r3, #31
 800ace8:	d508      	bpl.n	800acfc <_printf_i+0x148>
 800acea:	6923      	ldr	r3, [r4, #16]
 800acec:	6861      	ldr	r1, [r4, #4]
 800acee:	4299      	cmp	r1, r3
 800acf0:	bfde      	ittt	le
 800acf2:	2330      	movle	r3, #48	; 0x30
 800acf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800acf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800acfc:	1b52      	subs	r2, r2, r5
 800acfe:	6122      	str	r2, [r4, #16]
 800ad00:	f8cd a000 	str.w	sl, [sp]
 800ad04:	464b      	mov	r3, r9
 800ad06:	aa03      	add	r2, sp, #12
 800ad08:	4621      	mov	r1, r4
 800ad0a:	4640      	mov	r0, r8
 800ad0c:	f7ff fee4 	bl	800aad8 <_printf_common>
 800ad10:	3001      	adds	r0, #1
 800ad12:	d14a      	bne.n	800adaa <_printf_i+0x1f6>
 800ad14:	f04f 30ff 	mov.w	r0, #4294967295
 800ad18:	b004      	add	sp, #16
 800ad1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad1e:	6823      	ldr	r3, [r4, #0]
 800ad20:	f043 0320 	orr.w	r3, r3, #32
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	4833      	ldr	r0, [pc, #204]	; (800adf4 <_printf_i+0x240>)
 800ad28:	2778      	movs	r7, #120	; 0x78
 800ad2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ad2e:	6823      	ldr	r3, [r4, #0]
 800ad30:	6829      	ldr	r1, [r5, #0]
 800ad32:	061f      	lsls	r7, r3, #24
 800ad34:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad38:	d402      	bmi.n	800ad40 <_printf_i+0x18c>
 800ad3a:	065f      	lsls	r7, r3, #25
 800ad3c:	bf48      	it	mi
 800ad3e:	b2b6      	uxthmi	r6, r6
 800ad40:	07df      	lsls	r7, r3, #31
 800ad42:	bf48      	it	mi
 800ad44:	f043 0320 	orrmi.w	r3, r3, #32
 800ad48:	6029      	str	r1, [r5, #0]
 800ad4a:	bf48      	it	mi
 800ad4c:	6023      	strmi	r3, [r4, #0]
 800ad4e:	b91e      	cbnz	r6, 800ad58 <_printf_i+0x1a4>
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	f023 0320 	bic.w	r3, r3, #32
 800ad56:	6023      	str	r3, [r4, #0]
 800ad58:	2310      	movs	r3, #16
 800ad5a:	e7a7      	b.n	800acac <_printf_i+0xf8>
 800ad5c:	4824      	ldr	r0, [pc, #144]	; (800adf0 <_printf_i+0x23c>)
 800ad5e:	e7e4      	b.n	800ad2a <_printf_i+0x176>
 800ad60:	4615      	mov	r5, r2
 800ad62:	e7bd      	b.n	800ace0 <_printf_i+0x12c>
 800ad64:	682b      	ldr	r3, [r5, #0]
 800ad66:	6826      	ldr	r6, [r4, #0]
 800ad68:	6961      	ldr	r1, [r4, #20]
 800ad6a:	1d18      	adds	r0, r3, #4
 800ad6c:	6028      	str	r0, [r5, #0]
 800ad6e:	0635      	lsls	r5, r6, #24
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	d501      	bpl.n	800ad78 <_printf_i+0x1c4>
 800ad74:	6019      	str	r1, [r3, #0]
 800ad76:	e002      	b.n	800ad7e <_printf_i+0x1ca>
 800ad78:	0670      	lsls	r0, r6, #25
 800ad7a:	d5fb      	bpl.n	800ad74 <_printf_i+0x1c0>
 800ad7c:	8019      	strh	r1, [r3, #0]
 800ad7e:	2300      	movs	r3, #0
 800ad80:	6123      	str	r3, [r4, #16]
 800ad82:	4615      	mov	r5, r2
 800ad84:	e7bc      	b.n	800ad00 <_printf_i+0x14c>
 800ad86:	682b      	ldr	r3, [r5, #0]
 800ad88:	1d1a      	adds	r2, r3, #4
 800ad8a:	602a      	str	r2, [r5, #0]
 800ad8c:	681d      	ldr	r5, [r3, #0]
 800ad8e:	6862      	ldr	r2, [r4, #4]
 800ad90:	2100      	movs	r1, #0
 800ad92:	4628      	mov	r0, r5
 800ad94:	f7f5 fa34 	bl	8000200 <memchr>
 800ad98:	b108      	cbz	r0, 800ad9e <_printf_i+0x1ea>
 800ad9a:	1b40      	subs	r0, r0, r5
 800ad9c:	6060      	str	r0, [r4, #4]
 800ad9e:	6863      	ldr	r3, [r4, #4]
 800ada0:	6123      	str	r3, [r4, #16]
 800ada2:	2300      	movs	r3, #0
 800ada4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ada8:	e7aa      	b.n	800ad00 <_printf_i+0x14c>
 800adaa:	6923      	ldr	r3, [r4, #16]
 800adac:	462a      	mov	r2, r5
 800adae:	4649      	mov	r1, r9
 800adb0:	4640      	mov	r0, r8
 800adb2:	47d0      	blx	sl
 800adb4:	3001      	adds	r0, #1
 800adb6:	d0ad      	beq.n	800ad14 <_printf_i+0x160>
 800adb8:	6823      	ldr	r3, [r4, #0]
 800adba:	079b      	lsls	r3, r3, #30
 800adbc:	d413      	bmi.n	800ade6 <_printf_i+0x232>
 800adbe:	68e0      	ldr	r0, [r4, #12]
 800adc0:	9b03      	ldr	r3, [sp, #12]
 800adc2:	4298      	cmp	r0, r3
 800adc4:	bfb8      	it	lt
 800adc6:	4618      	movlt	r0, r3
 800adc8:	e7a6      	b.n	800ad18 <_printf_i+0x164>
 800adca:	2301      	movs	r3, #1
 800adcc:	4632      	mov	r2, r6
 800adce:	4649      	mov	r1, r9
 800add0:	4640      	mov	r0, r8
 800add2:	47d0      	blx	sl
 800add4:	3001      	adds	r0, #1
 800add6:	d09d      	beq.n	800ad14 <_printf_i+0x160>
 800add8:	3501      	adds	r5, #1
 800adda:	68e3      	ldr	r3, [r4, #12]
 800addc:	9903      	ldr	r1, [sp, #12]
 800adde:	1a5b      	subs	r3, r3, r1
 800ade0:	42ab      	cmp	r3, r5
 800ade2:	dcf2      	bgt.n	800adca <_printf_i+0x216>
 800ade4:	e7eb      	b.n	800adbe <_printf_i+0x20a>
 800ade6:	2500      	movs	r5, #0
 800ade8:	f104 0619 	add.w	r6, r4, #25
 800adec:	e7f5      	b.n	800adda <_printf_i+0x226>
 800adee:	bf00      	nop
 800adf0:	0800cf4a 	.word	0x0800cf4a
 800adf4:	0800cf5b 	.word	0x0800cf5b

0800adf8 <std>:
 800adf8:	2300      	movs	r3, #0
 800adfa:	b510      	push	{r4, lr}
 800adfc:	4604      	mov	r4, r0
 800adfe:	e9c0 3300 	strd	r3, r3, [r0]
 800ae02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae06:	6083      	str	r3, [r0, #8]
 800ae08:	8181      	strh	r1, [r0, #12]
 800ae0a:	6643      	str	r3, [r0, #100]	; 0x64
 800ae0c:	81c2      	strh	r2, [r0, #14]
 800ae0e:	6183      	str	r3, [r0, #24]
 800ae10:	4619      	mov	r1, r3
 800ae12:	2208      	movs	r2, #8
 800ae14:	305c      	adds	r0, #92	; 0x5c
 800ae16:	f000 f8f4 	bl	800b002 <memset>
 800ae1a:	4b0d      	ldr	r3, [pc, #52]	; (800ae50 <std+0x58>)
 800ae1c:	6263      	str	r3, [r4, #36]	; 0x24
 800ae1e:	4b0d      	ldr	r3, [pc, #52]	; (800ae54 <std+0x5c>)
 800ae20:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae22:	4b0d      	ldr	r3, [pc, #52]	; (800ae58 <std+0x60>)
 800ae24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae26:	4b0d      	ldr	r3, [pc, #52]	; (800ae5c <std+0x64>)
 800ae28:	6323      	str	r3, [r4, #48]	; 0x30
 800ae2a:	4b0d      	ldr	r3, [pc, #52]	; (800ae60 <std+0x68>)
 800ae2c:	6224      	str	r4, [r4, #32]
 800ae2e:	429c      	cmp	r4, r3
 800ae30:	d006      	beq.n	800ae40 <std+0x48>
 800ae32:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ae36:	4294      	cmp	r4, r2
 800ae38:	d002      	beq.n	800ae40 <std+0x48>
 800ae3a:	33d0      	adds	r3, #208	; 0xd0
 800ae3c:	429c      	cmp	r4, r3
 800ae3e:	d105      	bne.n	800ae4c <std+0x54>
 800ae40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae48:	f000 b958 	b.w	800b0fc <__retarget_lock_init_recursive>
 800ae4c:	bd10      	pop	{r4, pc}
 800ae4e:	bf00      	nop
 800ae50:	0800af7d 	.word	0x0800af7d
 800ae54:	0800af9f 	.word	0x0800af9f
 800ae58:	0800afd7 	.word	0x0800afd7
 800ae5c:	0800affb 	.word	0x0800affb
 800ae60:	200006a0 	.word	0x200006a0

0800ae64 <stdio_exit_handler>:
 800ae64:	4a02      	ldr	r2, [pc, #8]	; (800ae70 <stdio_exit_handler+0xc>)
 800ae66:	4903      	ldr	r1, [pc, #12]	; (800ae74 <stdio_exit_handler+0x10>)
 800ae68:	4803      	ldr	r0, [pc, #12]	; (800ae78 <stdio_exit_handler+0x14>)
 800ae6a:	f000 b869 	b.w	800af40 <_fwalk_sglue>
 800ae6e:	bf00      	nop
 800ae70:	20000014 	.word	0x20000014
 800ae74:	0800c819 	.word	0x0800c819
 800ae78:	20000020 	.word	0x20000020

0800ae7c <cleanup_stdio>:
 800ae7c:	6841      	ldr	r1, [r0, #4]
 800ae7e:	4b0c      	ldr	r3, [pc, #48]	; (800aeb0 <cleanup_stdio+0x34>)
 800ae80:	4299      	cmp	r1, r3
 800ae82:	b510      	push	{r4, lr}
 800ae84:	4604      	mov	r4, r0
 800ae86:	d001      	beq.n	800ae8c <cleanup_stdio+0x10>
 800ae88:	f001 fcc6 	bl	800c818 <_fflush_r>
 800ae8c:	68a1      	ldr	r1, [r4, #8]
 800ae8e:	4b09      	ldr	r3, [pc, #36]	; (800aeb4 <cleanup_stdio+0x38>)
 800ae90:	4299      	cmp	r1, r3
 800ae92:	d002      	beq.n	800ae9a <cleanup_stdio+0x1e>
 800ae94:	4620      	mov	r0, r4
 800ae96:	f001 fcbf 	bl	800c818 <_fflush_r>
 800ae9a:	68e1      	ldr	r1, [r4, #12]
 800ae9c:	4b06      	ldr	r3, [pc, #24]	; (800aeb8 <cleanup_stdio+0x3c>)
 800ae9e:	4299      	cmp	r1, r3
 800aea0:	d004      	beq.n	800aeac <cleanup_stdio+0x30>
 800aea2:	4620      	mov	r0, r4
 800aea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aea8:	f001 bcb6 	b.w	800c818 <_fflush_r>
 800aeac:	bd10      	pop	{r4, pc}
 800aeae:	bf00      	nop
 800aeb0:	200006a0 	.word	0x200006a0
 800aeb4:	20000708 	.word	0x20000708
 800aeb8:	20000770 	.word	0x20000770

0800aebc <global_stdio_init.part.0>:
 800aebc:	b510      	push	{r4, lr}
 800aebe:	4b0b      	ldr	r3, [pc, #44]	; (800aeec <global_stdio_init.part.0+0x30>)
 800aec0:	4c0b      	ldr	r4, [pc, #44]	; (800aef0 <global_stdio_init.part.0+0x34>)
 800aec2:	4a0c      	ldr	r2, [pc, #48]	; (800aef4 <global_stdio_init.part.0+0x38>)
 800aec4:	601a      	str	r2, [r3, #0]
 800aec6:	4620      	mov	r0, r4
 800aec8:	2200      	movs	r2, #0
 800aeca:	2104      	movs	r1, #4
 800aecc:	f7ff ff94 	bl	800adf8 <std>
 800aed0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800aed4:	2201      	movs	r2, #1
 800aed6:	2109      	movs	r1, #9
 800aed8:	f7ff ff8e 	bl	800adf8 <std>
 800aedc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800aee0:	2202      	movs	r2, #2
 800aee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aee6:	2112      	movs	r1, #18
 800aee8:	f7ff bf86 	b.w	800adf8 <std>
 800aeec:	200007d8 	.word	0x200007d8
 800aef0:	200006a0 	.word	0x200006a0
 800aef4:	0800ae65 	.word	0x0800ae65

0800aef8 <__sfp_lock_acquire>:
 800aef8:	4801      	ldr	r0, [pc, #4]	; (800af00 <__sfp_lock_acquire+0x8>)
 800aefa:	f000 b900 	b.w	800b0fe <__retarget_lock_acquire_recursive>
 800aefe:	bf00      	nop
 800af00:	200007e1 	.word	0x200007e1

0800af04 <__sfp_lock_release>:
 800af04:	4801      	ldr	r0, [pc, #4]	; (800af0c <__sfp_lock_release+0x8>)
 800af06:	f000 b8fb 	b.w	800b100 <__retarget_lock_release_recursive>
 800af0a:	bf00      	nop
 800af0c:	200007e1 	.word	0x200007e1

0800af10 <__sinit>:
 800af10:	b510      	push	{r4, lr}
 800af12:	4604      	mov	r4, r0
 800af14:	f7ff fff0 	bl	800aef8 <__sfp_lock_acquire>
 800af18:	6a23      	ldr	r3, [r4, #32]
 800af1a:	b11b      	cbz	r3, 800af24 <__sinit+0x14>
 800af1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af20:	f7ff bff0 	b.w	800af04 <__sfp_lock_release>
 800af24:	4b04      	ldr	r3, [pc, #16]	; (800af38 <__sinit+0x28>)
 800af26:	6223      	str	r3, [r4, #32]
 800af28:	4b04      	ldr	r3, [pc, #16]	; (800af3c <__sinit+0x2c>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1f5      	bne.n	800af1c <__sinit+0xc>
 800af30:	f7ff ffc4 	bl	800aebc <global_stdio_init.part.0>
 800af34:	e7f2      	b.n	800af1c <__sinit+0xc>
 800af36:	bf00      	nop
 800af38:	0800ae7d 	.word	0x0800ae7d
 800af3c:	200007d8 	.word	0x200007d8

0800af40 <_fwalk_sglue>:
 800af40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af44:	4607      	mov	r7, r0
 800af46:	4688      	mov	r8, r1
 800af48:	4614      	mov	r4, r2
 800af4a:	2600      	movs	r6, #0
 800af4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af50:	f1b9 0901 	subs.w	r9, r9, #1
 800af54:	d505      	bpl.n	800af62 <_fwalk_sglue+0x22>
 800af56:	6824      	ldr	r4, [r4, #0]
 800af58:	2c00      	cmp	r4, #0
 800af5a:	d1f7      	bne.n	800af4c <_fwalk_sglue+0xc>
 800af5c:	4630      	mov	r0, r6
 800af5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af62:	89ab      	ldrh	r3, [r5, #12]
 800af64:	2b01      	cmp	r3, #1
 800af66:	d907      	bls.n	800af78 <_fwalk_sglue+0x38>
 800af68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af6c:	3301      	adds	r3, #1
 800af6e:	d003      	beq.n	800af78 <_fwalk_sglue+0x38>
 800af70:	4629      	mov	r1, r5
 800af72:	4638      	mov	r0, r7
 800af74:	47c0      	blx	r8
 800af76:	4306      	orrs	r6, r0
 800af78:	3568      	adds	r5, #104	; 0x68
 800af7a:	e7e9      	b.n	800af50 <_fwalk_sglue+0x10>

0800af7c <__sread>:
 800af7c:	b510      	push	{r4, lr}
 800af7e:	460c      	mov	r4, r1
 800af80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af84:	f000 f86c 	bl	800b060 <_read_r>
 800af88:	2800      	cmp	r0, #0
 800af8a:	bfab      	itete	ge
 800af8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af8e:	89a3      	ldrhlt	r3, [r4, #12]
 800af90:	181b      	addge	r3, r3, r0
 800af92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af96:	bfac      	ite	ge
 800af98:	6563      	strge	r3, [r4, #84]	; 0x54
 800af9a:	81a3      	strhlt	r3, [r4, #12]
 800af9c:	bd10      	pop	{r4, pc}

0800af9e <__swrite>:
 800af9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afa2:	461f      	mov	r7, r3
 800afa4:	898b      	ldrh	r3, [r1, #12]
 800afa6:	05db      	lsls	r3, r3, #23
 800afa8:	4605      	mov	r5, r0
 800afaa:	460c      	mov	r4, r1
 800afac:	4616      	mov	r6, r2
 800afae:	d505      	bpl.n	800afbc <__swrite+0x1e>
 800afb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afb4:	2302      	movs	r3, #2
 800afb6:	2200      	movs	r2, #0
 800afb8:	f000 f840 	bl	800b03c <_lseek_r>
 800afbc:	89a3      	ldrh	r3, [r4, #12]
 800afbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afc6:	81a3      	strh	r3, [r4, #12]
 800afc8:	4632      	mov	r2, r6
 800afca:	463b      	mov	r3, r7
 800afcc:	4628      	mov	r0, r5
 800afce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afd2:	f000 b857 	b.w	800b084 <_write_r>

0800afd6 <__sseek>:
 800afd6:	b510      	push	{r4, lr}
 800afd8:	460c      	mov	r4, r1
 800afda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afde:	f000 f82d 	bl	800b03c <_lseek_r>
 800afe2:	1c43      	adds	r3, r0, #1
 800afe4:	89a3      	ldrh	r3, [r4, #12]
 800afe6:	bf15      	itete	ne
 800afe8:	6560      	strne	r0, [r4, #84]	; 0x54
 800afea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800afee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aff2:	81a3      	strheq	r3, [r4, #12]
 800aff4:	bf18      	it	ne
 800aff6:	81a3      	strhne	r3, [r4, #12]
 800aff8:	bd10      	pop	{r4, pc}

0800affa <__sclose>:
 800affa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800affe:	f000 b80d 	b.w	800b01c <_close_r>

0800b002 <memset>:
 800b002:	4402      	add	r2, r0
 800b004:	4603      	mov	r3, r0
 800b006:	4293      	cmp	r3, r2
 800b008:	d100      	bne.n	800b00c <memset+0xa>
 800b00a:	4770      	bx	lr
 800b00c:	f803 1b01 	strb.w	r1, [r3], #1
 800b010:	e7f9      	b.n	800b006 <memset+0x4>
	...

0800b014 <_localeconv_r>:
 800b014:	4800      	ldr	r0, [pc, #0]	; (800b018 <_localeconv_r+0x4>)
 800b016:	4770      	bx	lr
 800b018:	20000160 	.word	0x20000160

0800b01c <_close_r>:
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4d06      	ldr	r5, [pc, #24]	; (800b038 <_close_r+0x1c>)
 800b020:	2300      	movs	r3, #0
 800b022:	4604      	mov	r4, r0
 800b024:	4608      	mov	r0, r1
 800b026:	602b      	str	r3, [r5, #0]
 800b028:	f7f8 f937 	bl	800329a <_close>
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	d102      	bne.n	800b036 <_close_r+0x1a>
 800b030:	682b      	ldr	r3, [r5, #0]
 800b032:	b103      	cbz	r3, 800b036 <_close_r+0x1a>
 800b034:	6023      	str	r3, [r4, #0]
 800b036:	bd38      	pop	{r3, r4, r5, pc}
 800b038:	200007dc 	.word	0x200007dc

0800b03c <_lseek_r>:
 800b03c:	b538      	push	{r3, r4, r5, lr}
 800b03e:	4d07      	ldr	r5, [pc, #28]	; (800b05c <_lseek_r+0x20>)
 800b040:	4604      	mov	r4, r0
 800b042:	4608      	mov	r0, r1
 800b044:	4611      	mov	r1, r2
 800b046:	2200      	movs	r2, #0
 800b048:	602a      	str	r2, [r5, #0]
 800b04a:	461a      	mov	r2, r3
 800b04c:	f7f8 f94c 	bl	80032e8 <_lseek>
 800b050:	1c43      	adds	r3, r0, #1
 800b052:	d102      	bne.n	800b05a <_lseek_r+0x1e>
 800b054:	682b      	ldr	r3, [r5, #0]
 800b056:	b103      	cbz	r3, 800b05a <_lseek_r+0x1e>
 800b058:	6023      	str	r3, [r4, #0]
 800b05a:	bd38      	pop	{r3, r4, r5, pc}
 800b05c:	200007dc 	.word	0x200007dc

0800b060 <_read_r>:
 800b060:	b538      	push	{r3, r4, r5, lr}
 800b062:	4d07      	ldr	r5, [pc, #28]	; (800b080 <_read_r+0x20>)
 800b064:	4604      	mov	r4, r0
 800b066:	4608      	mov	r0, r1
 800b068:	4611      	mov	r1, r2
 800b06a:	2200      	movs	r2, #0
 800b06c:	602a      	str	r2, [r5, #0]
 800b06e:	461a      	mov	r2, r3
 800b070:	f7f8 f8da 	bl	8003228 <_read>
 800b074:	1c43      	adds	r3, r0, #1
 800b076:	d102      	bne.n	800b07e <_read_r+0x1e>
 800b078:	682b      	ldr	r3, [r5, #0]
 800b07a:	b103      	cbz	r3, 800b07e <_read_r+0x1e>
 800b07c:	6023      	str	r3, [r4, #0]
 800b07e:	bd38      	pop	{r3, r4, r5, pc}
 800b080:	200007dc 	.word	0x200007dc

0800b084 <_write_r>:
 800b084:	b538      	push	{r3, r4, r5, lr}
 800b086:	4d07      	ldr	r5, [pc, #28]	; (800b0a4 <_write_r+0x20>)
 800b088:	4604      	mov	r4, r0
 800b08a:	4608      	mov	r0, r1
 800b08c:	4611      	mov	r1, r2
 800b08e:	2200      	movs	r2, #0
 800b090:	602a      	str	r2, [r5, #0]
 800b092:	461a      	mov	r2, r3
 800b094:	f7f8 f8e5 	bl	8003262 <_write>
 800b098:	1c43      	adds	r3, r0, #1
 800b09a:	d102      	bne.n	800b0a2 <_write_r+0x1e>
 800b09c:	682b      	ldr	r3, [r5, #0]
 800b09e:	b103      	cbz	r3, 800b0a2 <_write_r+0x1e>
 800b0a0:	6023      	str	r3, [r4, #0]
 800b0a2:	bd38      	pop	{r3, r4, r5, pc}
 800b0a4:	200007dc 	.word	0x200007dc

0800b0a8 <__errno>:
 800b0a8:	4b01      	ldr	r3, [pc, #4]	; (800b0b0 <__errno+0x8>)
 800b0aa:	6818      	ldr	r0, [r3, #0]
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	2000006c 	.word	0x2000006c

0800b0b4 <__libc_init_array>:
 800b0b4:	b570      	push	{r4, r5, r6, lr}
 800b0b6:	4d0d      	ldr	r5, [pc, #52]	; (800b0ec <__libc_init_array+0x38>)
 800b0b8:	4c0d      	ldr	r4, [pc, #52]	; (800b0f0 <__libc_init_array+0x3c>)
 800b0ba:	1b64      	subs	r4, r4, r5
 800b0bc:	10a4      	asrs	r4, r4, #2
 800b0be:	2600      	movs	r6, #0
 800b0c0:	42a6      	cmp	r6, r4
 800b0c2:	d109      	bne.n	800b0d8 <__libc_init_array+0x24>
 800b0c4:	4d0b      	ldr	r5, [pc, #44]	; (800b0f4 <__libc_init_array+0x40>)
 800b0c6:	4c0c      	ldr	r4, [pc, #48]	; (800b0f8 <__libc_init_array+0x44>)
 800b0c8:	f001 feec 	bl	800cea4 <_init>
 800b0cc:	1b64      	subs	r4, r4, r5
 800b0ce:	10a4      	asrs	r4, r4, #2
 800b0d0:	2600      	movs	r6, #0
 800b0d2:	42a6      	cmp	r6, r4
 800b0d4:	d105      	bne.n	800b0e2 <__libc_init_array+0x2e>
 800b0d6:	bd70      	pop	{r4, r5, r6, pc}
 800b0d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0dc:	4798      	blx	r3
 800b0de:	3601      	adds	r6, #1
 800b0e0:	e7ee      	b.n	800b0c0 <__libc_init_array+0xc>
 800b0e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0e6:	4798      	blx	r3
 800b0e8:	3601      	adds	r6, #1
 800b0ea:	e7f2      	b.n	800b0d2 <__libc_init_array+0x1e>
 800b0ec:	0800d2b4 	.word	0x0800d2b4
 800b0f0:	0800d2b4 	.word	0x0800d2b4
 800b0f4:	0800d2b4 	.word	0x0800d2b4
 800b0f8:	0800d2b8 	.word	0x0800d2b8

0800b0fc <__retarget_lock_init_recursive>:
 800b0fc:	4770      	bx	lr

0800b0fe <__retarget_lock_acquire_recursive>:
 800b0fe:	4770      	bx	lr

0800b100 <__retarget_lock_release_recursive>:
 800b100:	4770      	bx	lr

0800b102 <memcpy>:
 800b102:	440a      	add	r2, r1
 800b104:	4291      	cmp	r1, r2
 800b106:	f100 33ff 	add.w	r3, r0, #4294967295
 800b10a:	d100      	bne.n	800b10e <memcpy+0xc>
 800b10c:	4770      	bx	lr
 800b10e:	b510      	push	{r4, lr}
 800b110:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b114:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b118:	4291      	cmp	r1, r2
 800b11a:	d1f9      	bne.n	800b110 <memcpy+0xe>
 800b11c:	bd10      	pop	{r4, pc}

0800b11e <quorem>:
 800b11e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b122:	6903      	ldr	r3, [r0, #16]
 800b124:	690c      	ldr	r4, [r1, #16]
 800b126:	42a3      	cmp	r3, r4
 800b128:	4607      	mov	r7, r0
 800b12a:	db7e      	blt.n	800b22a <quorem+0x10c>
 800b12c:	3c01      	subs	r4, #1
 800b12e:	f101 0814 	add.w	r8, r1, #20
 800b132:	f100 0514 	add.w	r5, r0, #20
 800b136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b13a:	9301      	str	r3, [sp, #4]
 800b13c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b140:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b144:	3301      	adds	r3, #1
 800b146:	429a      	cmp	r2, r3
 800b148:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b14c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b150:	fbb2 f6f3 	udiv	r6, r2, r3
 800b154:	d331      	bcc.n	800b1ba <quorem+0x9c>
 800b156:	f04f 0e00 	mov.w	lr, #0
 800b15a:	4640      	mov	r0, r8
 800b15c:	46ac      	mov	ip, r5
 800b15e:	46f2      	mov	sl, lr
 800b160:	f850 2b04 	ldr.w	r2, [r0], #4
 800b164:	b293      	uxth	r3, r2
 800b166:	fb06 e303 	mla	r3, r6, r3, lr
 800b16a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b16e:	0c1a      	lsrs	r2, r3, #16
 800b170:	b29b      	uxth	r3, r3
 800b172:	ebaa 0303 	sub.w	r3, sl, r3
 800b176:	f8dc a000 	ldr.w	sl, [ip]
 800b17a:	fa13 f38a 	uxtah	r3, r3, sl
 800b17e:	fb06 220e 	mla	r2, r6, lr, r2
 800b182:	9300      	str	r3, [sp, #0]
 800b184:	9b00      	ldr	r3, [sp, #0]
 800b186:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b18a:	b292      	uxth	r2, r2
 800b18c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b190:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b194:	f8bd 3000 	ldrh.w	r3, [sp]
 800b198:	4581      	cmp	r9, r0
 800b19a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b19e:	f84c 3b04 	str.w	r3, [ip], #4
 800b1a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b1a6:	d2db      	bcs.n	800b160 <quorem+0x42>
 800b1a8:	f855 300b 	ldr.w	r3, [r5, fp]
 800b1ac:	b92b      	cbnz	r3, 800b1ba <quorem+0x9c>
 800b1ae:	9b01      	ldr	r3, [sp, #4]
 800b1b0:	3b04      	subs	r3, #4
 800b1b2:	429d      	cmp	r5, r3
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	d32c      	bcc.n	800b212 <quorem+0xf4>
 800b1b8:	613c      	str	r4, [r7, #16]
 800b1ba:	4638      	mov	r0, r7
 800b1bc:	f001 f9a6 	bl	800c50c <__mcmp>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	db22      	blt.n	800b20a <quorem+0xec>
 800b1c4:	3601      	adds	r6, #1
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	2000      	movs	r0, #0
 800b1ca:	f858 2b04 	ldr.w	r2, [r8], #4
 800b1ce:	f8d1 c000 	ldr.w	ip, [r1]
 800b1d2:	b293      	uxth	r3, r2
 800b1d4:	1ac3      	subs	r3, r0, r3
 800b1d6:	0c12      	lsrs	r2, r2, #16
 800b1d8:	fa13 f38c 	uxtah	r3, r3, ip
 800b1dc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b1e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1ea:	45c1      	cmp	r9, r8
 800b1ec:	f841 3b04 	str.w	r3, [r1], #4
 800b1f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b1f4:	d2e9      	bcs.n	800b1ca <quorem+0xac>
 800b1f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1fe:	b922      	cbnz	r2, 800b20a <quorem+0xec>
 800b200:	3b04      	subs	r3, #4
 800b202:	429d      	cmp	r5, r3
 800b204:	461a      	mov	r2, r3
 800b206:	d30a      	bcc.n	800b21e <quorem+0x100>
 800b208:	613c      	str	r4, [r7, #16]
 800b20a:	4630      	mov	r0, r6
 800b20c:	b003      	add	sp, #12
 800b20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b212:	6812      	ldr	r2, [r2, #0]
 800b214:	3b04      	subs	r3, #4
 800b216:	2a00      	cmp	r2, #0
 800b218:	d1ce      	bne.n	800b1b8 <quorem+0x9a>
 800b21a:	3c01      	subs	r4, #1
 800b21c:	e7c9      	b.n	800b1b2 <quorem+0x94>
 800b21e:	6812      	ldr	r2, [r2, #0]
 800b220:	3b04      	subs	r3, #4
 800b222:	2a00      	cmp	r2, #0
 800b224:	d1f0      	bne.n	800b208 <quorem+0xea>
 800b226:	3c01      	subs	r4, #1
 800b228:	e7eb      	b.n	800b202 <quorem+0xe4>
 800b22a:	2000      	movs	r0, #0
 800b22c:	e7ee      	b.n	800b20c <quorem+0xee>
	...

0800b230 <_dtoa_r>:
 800b230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b234:	ed2d 8b04 	vpush	{d8-d9}
 800b238:	69c5      	ldr	r5, [r0, #28]
 800b23a:	b093      	sub	sp, #76	; 0x4c
 800b23c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b240:	ec57 6b10 	vmov	r6, r7, d0
 800b244:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b248:	9107      	str	r1, [sp, #28]
 800b24a:	4604      	mov	r4, r0
 800b24c:	920a      	str	r2, [sp, #40]	; 0x28
 800b24e:	930d      	str	r3, [sp, #52]	; 0x34
 800b250:	b975      	cbnz	r5, 800b270 <_dtoa_r+0x40>
 800b252:	2010      	movs	r0, #16
 800b254:	f000 fe2a 	bl	800beac <malloc>
 800b258:	4602      	mov	r2, r0
 800b25a:	61e0      	str	r0, [r4, #28]
 800b25c:	b920      	cbnz	r0, 800b268 <_dtoa_r+0x38>
 800b25e:	4bae      	ldr	r3, [pc, #696]	; (800b518 <_dtoa_r+0x2e8>)
 800b260:	21ef      	movs	r1, #239	; 0xef
 800b262:	48ae      	ldr	r0, [pc, #696]	; (800b51c <_dtoa_r+0x2ec>)
 800b264:	f001 fb10 	bl	800c888 <__assert_func>
 800b268:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b26c:	6005      	str	r5, [r0, #0]
 800b26e:	60c5      	str	r5, [r0, #12]
 800b270:	69e3      	ldr	r3, [r4, #28]
 800b272:	6819      	ldr	r1, [r3, #0]
 800b274:	b151      	cbz	r1, 800b28c <_dtoa_r+0x5c>
 800b276:	685a      	ldr	r2, [r3, #4]
 800b278:	604a      	str	r2, [r1, #4]
 800b27a:	2301      	movs	r3, #1
 800b27c:	4093      	lsls	r3, r2
 800b27e:	608b      	str	r3, [r1, #8]
 800b280:	4620      	mov	r0, r4
 800b282:	f000 ff07 	bl	800c094 <_Bfree>
 800b286:	69e3      	ldr	r3, [r4, #28]
 800b288:	2200      	movs	r2, #0
 800b28a:	601a      	str	r2, [r3, #0]
 800b28c:	1e3b      	subs	r3, r7, #0
 800b28e:	bfbb      	ittet	lt
 800b290:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b294:	9303      	strlt	r3, [sp, #12]
 800b296:	2300      	movge	r3, #0
 800b298:	2201      	movlt	r2, #1
 800b29a:	bfac      	ite	ge
 800b29c:	f8c8 3000 	strge.w	r3, [r8]
 800b2a0:	f8c8 2000 	strlt.w	r2, [r8]
 800b2a4:	4b9e      	ldr	r3, [pc, #632]	; (800b520 <_dtoa_r+0x2f0>)
 800b2a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b2aa:	ea33 0308 	bics.w	r3, r3, r8
 800b2ae:	d11b      	bne.n	800b2e8 <_dtoa_r+0xb8>
 800b2b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2b2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b2bc:	4333      	orrs	r3, r6
 800b2be:	f000 8593 	beq.w	800bde8 <_dtoa_r+0xbb8>
 800b2c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2c4:	b963      	cbnz	r3, 800b2e0 <_dtoa_r+0xb0>
 800b2c6:	4b97      	ldr	r3, [pc, #604]	; (800b524 <_dtoa_r+0x2f4>)
 800b2c8:	e027      	b.n	800b31a <_dtoa_r+0xea>
 800b2ca:	4b97      	ldr	r3, [pc, #604]	; (800b528 <_dtoa_r+0x2f8>)
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	3308      	adds	r3, #8
 800b2d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b2d2:	6013      	str	r3, [r2, #0]
 800b2d4:	9800      	ldr	r0, [sp, #0]
 800b2d6:	b013      	add	sp, #76	; 0x4c
 800b2d8:	ecbd 8b04 	vpop	{d8-d9}
 800b2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e0:	4b90      	ldr	r3, [pc, #576]	; (800b524 <_dtoa_r+0x2f4>)
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	3303      	adds	r3, #3
 800b2e6:	e7f3      	b.n	800b2d0 <_dtoa_r+0xa0>
 800b2e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	ec51 0b17 	vmov	r0, r1, d7
 800b2f2:	eeb0 8a47 	vmov.f32	s16, s14
 800b2f6:	eef0 8a67 	vmov.f32	s17, s15
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	f7f5 fbfc 	bl	8000af8 <__aeabi_dcmpeq>
 800b300:	4681      	mov	r9, r0
 800b302:	b160      	cbz	r0, 800b31e <_dtoa_r+0xee>
 800b304:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b306:	2301      	movs	r3, #1
 800b308:	6013      	str	r3, [r2, #0]
 800b30a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f000 8568 	beq.w	800bde2 <_dtoa_r+0xbb2>
 800b312:	4b86      	ldr	r3, [pc, #536]	; (800b52c <_dtoa_r+0x2fc>)
 800b314:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b316:	6013      	str	r3, [r2, #0]
 800b318:	3b01      	subs	r3, #1
 800b31a:	9300      	str	r3, [sp, #0]
 800b31c:	e7da      	b.n	800b2d4 <_dtoa_r+0xa4>
 800b31e:	aa10      	add	r2, sp, #64	; 0x40
 800b320:	a911      	add	r1, sp, #68	; 0x44
 800b322:	4620      	mov	r0, r4
 800b324:	eeb0 0a48 	vmov.f32	s0, s16
 800b328:	eef0 0a68 	vmov.f32	s1, s17
 800b32c:	f001 f994 	bl	800c658 <__d2b>
 800b330:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b334:	4682      	mov	sl, r0
 800b336:	2d00      	cmp	r5, #0
 800b338:	d07f      	beq.n	800b43a <_dtoa_r+0x20a>
 800b33a:	ee18 3a90 	vmov	r3, s17
 800b33e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b342:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b346:	ec51 0b18 	vmov	r0, r1, d8
 800b34a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b34e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b352:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b356:	4619      	mov	r1, r3
 800b358:	2200      	movs	r2, #0
 800b35a:	4b75      	ldr	r3, [pc, #468]	; (800b530 <_dtoa_r+0x300>)
 800b35c:	f7f4 ffac 	bl	80002b8 <__aeabi_dsub>
 800b360:	a367      	add	r3, pc, #412	; (adr r3, 800b500 <_dtoa_r+0x2d0>)
 800b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b366:	f7f5 f95f 	bl	8000628 <__aeabi_dmul>
 800b36a:	a367      	add	r3, pc, #412	; (adr r3, 800b508 <_dtoa_r+0x2d8>)
 800b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b370:	f7f4 ffa4 	bl	80002bc <__adddf3>
 800b374:	4606      	mov	r6, r0
 800b376:	4628      	mov	r0, r5
 800b378:	460f      	mov	r7, r1
 800b37a:	f7f5 f8eb 	bl	8000554 <__aeabi_i2d>
 800b37e:	a364      	add	r3, pc, #400	; (adr r3, 800b510 <_dtoa_r+0x2e0>)
 800b380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b384:	f7f5 f950 	bl	8000628 <__aeabi_dmul>
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	4630      	mov	r0, r6
 800b38e:	4639      	mov	r1, r7
 800b390:	f7f4 ff94 	bl	80002bc <__adddf3>
 800b394:	4606      	mov	r6, r0
 800b396:	460f      	mov	r7, r1
 800b398:	f7f5 fbf6 	bl	8000b88 <__aeabi_d2iz>
 800b39c:	2200      	movs	r2, #0
 800b39e:	4683      	mov	fp, r0
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	4639      	mov	r1, r7
 800b3a6:	f7f5 fbb1 	bl	8000b0c <__aeabi_dcmplt>
 800b3aa:	b148      	cbz	r0, 800b3c0 <_dtoa_r+0x190>
 800b3ac:	4658      	mov	r0, fp
 800b3ae:	f7f5 f8d1 	bl	8000554 <__aeabi_i2d>
 800b3b2:	4632      	mov	r2, r6
 800b3b4:	463b      	mov	r3, r7
 800b3b6:	f7f5 fb9f 	bl	8000af8 <__aeabi_dcmpeq>
 800b3ba:	b908      	cbnz	r0, 800b3c0 <_dtoa_r+0x190>
 800b3bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b3c0:	f1bb 0f16 	cmp.w	fp, #22
 800b3c4:	d857      	bhi.n	800b476 <_dtoa_r+0x246>
 800b3c6:	4b5b      	ldr	r3, [pc, #364]	; (800b534 <_dtoa_r+0x304>)
 800b3c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d0:	ec51 0b18 	vmov	r0, r1, d8
 800b3d4:	f7f5 fb9a 	bl	8000b0c <__aeabi_dcmplt>
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	d04e      	beq.n	800b47a <_dtoa_r+0x24a>
 800b3dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	930c      	str	r3, [sp, #48]	; 0x30
 800b3e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3e6:	1b5b      	subs	r3, r3, r5
 800b3e8:	1e5a      	subs	r2, r3, #1
 800b3ea:	bf45      	ittet	mi
 800b3ec:	f1c3 0301 	rsbmi	r3, r3, #1
 800b3f0:	9305      	strmi	r3, [sp, #20]
 800b3f2:	2300      	movpl	r3, #0
 800b3f4:	2300      	movmi	r3, #0
 800b3f6:	9206      	str	r2, [sp, #24]
 800b3f8:	bf54      	ite	pl
 800b3fa:	9305      	strpl	r3, [sp, #20]
 800b3fc:	9306      	strmi	r3, [sp, #24]
 800b3fe:	f1bb 0f00 	cmp.w	fp, #0
 800b402:	db3c      	blt.n	800b47e <_dtoa_r+0x24e>
 800b404:	9b06      	ldr	r3, [sp, #24]
 800b406:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b40a:	445b      	add	r3, fp
 800b40c:	9306      	str	r3, [sp, #24]
 800b40e:	2300      	movs	r3, #0
 800b410:	9308      	str	r3, [sp, #32]
 800b412:	9b07      	ldr	r3, [sp, #28]
 800b414:	2b09      	cmp	r3, #9
 800b416:	d868      	bhi.n	800b4ea <_dtoa_r+0x2ba>
 800b418:	2b05      	cmp	r3, #5
 800b41a:	bfc4      	itt	gt
 800b41c:	3b04      	subgt	r3, #4
 800b41e:	9307      	strgt	r3, [sp, #28]
 800b420:	9b07      	ldr	r3, [sp, #28]
 800b422:	f1a3 0302 	sub.w	r3, r3, #2
 800b426:	bfcc      	ite	gt
 800b428:	2500      	movgt	r5, #0
 800b42a:	2501      	movle	r5, #1
 800b42c:	2b03      	cmp	r3, #3
 800b42e:	f200 8085 	bhi.w	800b53c <_dtoa_r+0x30c>
 800b432:	e8df f003 	tbb	[pc, r3]
 800b436:	3b2e      	.short	0x3b2e
 800b438:	5839      	.short	0x5839
 800b43a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b43e:	441d      	add	r5, r3
 800b440:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b444:	2b20      	cmp	r3, #32
 800b446:	bfc1      	itttt	gt
 800b448:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b44c:	fa08 f803 	lslgt.w	r8, r8, r3
 800b450:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b454:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b458:	bfd6      	itet	le
 800b45a:	f1c3 0320 	rsble	r3, r3, #32
 800b45e:	ea48 0003 	orrgt.w	r0, r8, r3
 800b462:	fa06 f003 	lslle.w	r0, r6, r3
 800b466:	f7f5 f865 	bl	8000534 <__aeabi_ui2d>
 800b46a:	2201      	movs	r2, #1
 800b46c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b470:	3d01      	subs	r5, #1
 800b472:	920e      	str	r2, [sp, #56]	; 0x38
 800b474:	e76f      	b.n	800b356 <_dtoa_r+0x126>
 800b476:	2301      	movs	r3, #1
 800b478:	e7b3      	b.n	800b3e2 <_dtoa_r+0x1b2>
 800b47a:	900c      	str	r0, [sp, #48]	; 0x30
 800b47c:	e7b2      	b.n	800b3e4 <_dtoa_r+0x1b4>
 800b47e:	9b05      	ldr	r3, [sp, #20]
 800b480:	eba3 030b 	sub.w	r3, r3, fp
 800b484:	9305      	str	r3, [sp, #20]
 800b486:	f1cb 0300 	rsb	r3, fp, #0
 800b48a:	9308      	str	r3, [sp, #32]
 800b48c:	2300      	movs	r3, #0
 800b48e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b490:	e7bf      	b.n	800b412 <_dtoa_r+0x1e2>
 800b492:	2300      	movs	r3, #0
 800b494:	9309      	str	r3, [sp, #36]	; 0x24
 800b496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b498:	2b00      	cmp	r3, #0
 800b49a:	dc52      	bgt.n	800b542 <_dtoa_r+0x312>
 800b49c:	2301      	movs	r3, #1
 800b49e:	9301      	str	r3, [sp, #4]
 800b4a0:	9304      	str	r3, [sp, #16]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	920a      	str	r2, [sp, #40]	; 0x28
 800b4a6:	e00b      	b.n	800b4c0 <_dtoa_r+0x290>
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e7f3      	b.n	800b494 <_dtoa_r+0x264>
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4b2:	445b      	add	r3, fp
 800b4b4:	9301      	str	r3, [sp, #4]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	9304      	str	r3, [sp, #16]
 800b4bc:	bfb8      	it	lt
 800b4be:	2301      	movlt	r3, #1
 800b4c0:	69e0      	ldr	r0, [r4, #28]
 800b4c2:	2100      	movs	r1, #0
 800b4c4:	2204      	movs	r2, #4
 800b4c6:	f102 0614 	add.w	r6, r2, #20
 800b4ca:	429e      	cmp	r6, r3
 800b4cc:	d93d      	bls.n	800b54a <_dtoa_r+0x31a>
 800b4ce:	6041      	str	r1, [r0, #4]
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f000 fd9f 	bl	800c014 <_Balloc>
 800b4d6:	9000      	str	r0, [sp, #0]
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d139      	bne.n	800b550 <_dtoa_r+0x320>
 800b4dc:	4b16      	ldr	r3, [pc, #88]	; (800b538 <_dtoa_r+0x308>)
 800b4de:	4602      	mov	r2, r0
 800b4e0:	f240 11af 	movw	r1, #431	; 0x1af
 800b4e4:	e6bd      	b.n	800b262 <_dtoa_r+0x32>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e7e1      	b.n	800b4ae <_dtoa_r+0x27e>
 800b4ea:	2501      	movs	r5, #1
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	9307      	str	r3, [sp, #28]
 800b4f0:	9509      	str	r5, [sp, #36]	; 0x24
 800b4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f6:	9301      	str	r3, [sp, #4]
 800b4f8:	9304      	str	r3, [sp, #16]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	2312      	movs	r3, #18
 800b4fe:	e7d1      	b.n	800b4a4 <_dtoa_r+0x274>
 800b500:	636f4361 	.word	0x636f4361
 800b504:	3fd287a7 	.word	0x3fd287a7
 800b508:	8b60c8b3 	.word	0x8b60c8b3
 800b50c:	3fc68a28 	.word	0x3fc68a28
 800b510:	509f79fb 	.word	0x509f79fb
 800b514:	3fd34413 	.word	0x3fd34413
 800b518:	0800cf79 	.word	0x0800cf79
 800b51c:	0800cf90 	.word	0x0800cf90
 800b520:	7ff00000 	.word	0x7ff00000
 800b524:	0800cf75 	.word	0x0800cf75
 800b528:	0800cf6c 	.word	0x0800cf6c
 800b52c:	0800cf49 	.word	0x0800cf49
 800b530:	3ff80000 	.word	0x3ff80000
 800b534:	0800d080 	.word	0x0800d080
 800b538:	0800cfe8 	.word	0x0800cfe8
 800b53c:	2301      	movs	r3, #1
 800b53e:	9309      	str	r3, [sp, #36]	; 0x24
 800b540:	e7d7      	b.n	800b4f2 <_dtoa_r+0x2c2>
 800b542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b544:	9301      	str	r3, [sp, #4]
 800b546:	9304      	str	r3, [sp, #16]
 800b548:	e7ba      	b.n	800b4c0 <_dtoa_r+0x290>
 800b54a:	3101      	adds	r1, #1
 800b54c:	0052      	lsls	r2, r2, #1
 800b54e:	e7ba      	b.n	800b4c6 <_dtoa_r+0x296>
 800b550:	69e3      	ldr	r3, [r4, #28]
 800b552:	9a00      	ldr	r2, [sp, #0]
 800b554:	601a      	str	r2, [r3, #0]
 800b556:	9b04      	ldr	r3, [sp, #16]
 800b558:	2b0e      	cmp	r3, #14
 800b55a:	f200 80a8 	bhi.w	800b6ae <_dtoa_r+0x47e>
 800b55e:	2d00      	cmp	r5, #0
 800b560:	f000 80a5 	beq.w	800b6ae <_dtoa_r+0x47e>
 800b564:	f1bb 0f00 	cmp.w	fp, #0
 800b568:	dd38      	ble.n	800b5dc <_dtoa_r+0x3ac>
 800b56a:	4bc0      	ldr	r3, [pc, #768]	; (800b86c <_dtoa_r+0x63c>)
 800b56c:	f00b 020f 	and.w	r2, fp, #15
 800b570:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b574:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b578:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b57c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b580:	d019      	beq.n	800b5b6 <_dtoa_r+0x386>
 800b582:	4bbb      	ldr	r3, [pc, #748]	; (800b870 <_dtoa_r+0x640>)
 800b584:	ec51 0b18 	vmov	r0, r1, d8
 800b588:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b58c:	f7f5 f976 	bl	800087c <__aeabi_ddiv>
 800b590:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b594:	f008 080f 	and.w	r8, r8, #15
 800b598:	2503      	movs	r5, #3
 800b59a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b870 <_dtoa_r+0x640>
 800b59e:	f1b8 0f00 	cmp.w	r8, #0
 800b5a2:	d10a      	bne.n	800b5ba <_dtoa_r+0x38a>
 800b5a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5a8:	4632      	mov	r2, r6
 800b5aa:	463b      	mov	r3, r7
 800b5ac:	f7f5 f966 	bl	800087c <__aeabi_ddiv>
 800b5b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5b4:	e02b      	b.n	800b60e <_dtoa_r+0x3de>
 800b5b6:	2502      	movs	r5, #2
 800b5b8:	e7ef      	b.n	800b59a <_dtoa_r+0x36a>
 800b5ba:	f018 0f01 	tst.w	r8, #1
 800b5be:	d008      	beq.n	800b5d2 <_dtoa_r+0x3a2>
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	4639      	mov	r1, r7
 800b5c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b5c8:	f7f5 f82e 	bl	8000628 <__aeabi_dmul>
 800b5cc:	3501      	adds	r5, #1
 800b5ce:	4606      	mov	r6, r0
 800b5d0:	460f      	mov	r7, r1
 800b5d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b5d6:	f109 0908 	add.w	r9, r9, #8
 800b5da:	e7e0      	b.n	800b59e <_dtoa_r+0x36e>
 800b5dc:	f000 809f 	beq.w	800b71e <_dtoa_r+0x4ee>
 800b5e0:	f1cb 0600 	rsb	r6, fp, #0
 800b5e4:	4ba1      	ldr	r3, [pc, #644]	; (800b86c <_dtoa_r+0x63c>)
 800b5e6:	4fa2      	ldr	r7, [pc, #648]	; (800b870 <_dtoa_r+0x640>)
 800b5e8:	f006 020f 	and.w	r2, r6, #15
 800b5ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f4:	ec51 0b18 	vmov	r0, r1, d8
 800b5f8:	f7f5 f816 	bl	8000628 <__aeabi_dmul>
 800b5fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b600:	1136      	asrs	r6, r6, #4
 800b602:	2300      	movs	r3, #0
 800b604:	2502      	movs	r5, #2
 800b606:	2e00      	cmp	r6, #0
 800b608:	d17e      	bne.n	800b708 <_dtoa_r+0x4d8>
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1d0      	bne.n	800b5b0 <_dtoa_r+0x380>
 800b60e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b610:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 8084 	beq.w	800b722 <_dtoa_r+0x4f2>
 800b61a:	4b96      	ldr	r3, [pc, #600]	; (800b874 <_dtoa_r+0x644>)
 800b61c:	2200      	movs	r2, #0
 800b61e:	4640      	mov	r0, r8
 800b620:	4649      	mov	r1, r9
 800b622:	f7f5 fa73 	bl	8000b0c <__aeabi_dcmplt>
 800b626:	2800      	cmp	r0, #0
 800b628:	d07b      	beq.n	800b722 <_dtoa_r+0x4f2>
 800b62a:	9b04      	ldr	r3, [sp, #16]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d078      	beq.n	800b722 <_dtoa_r+0x4f2>
 800b630:	9b01      	ldr	r3, [sp, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	dd39      	ble.n	800b6aa <_dtoa_r+0x47a>
 800b636:	4b90      	ldr	r3, [pc, #576]	; (800b878 <_dtoa_r+0x648>)
 800b638:	2200      	movs	r2, #0
 800b63a:	4640      	mov	r0, r8
 800b63c:	4649      	mov	r1, r9
 800b63e:	f7f4 fff3 	bl	8000628 <__aeabi_dmul>
 800b642:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b646:	9e01      	ldr	r6, [sp, #4]
 800b648:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b64c:	3501      	adds	r5, #1
 800b64e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b652:	4628      	mov	r0, r5
 800b654:	f7f4 ff7e 	bl	8000554 <__aeabi_i2d>
 800b658:	4642      	mov	r2, r8
 800b65a:	464b      	mov	r3, r9
 800b65c:	f7f4 ffe4 	bl	8000628 <__aeabi_dmul>
 800b660:	4b86      	ldr	r3, [pc, #536]	; (800b87c <_dtoa_r+0x64c>)
 800b662:	2200      	movs	r2, #0
 800b664:	f7f4 fe2a 	bl	80002bc <__adddf3>
 800b668:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b66c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b670:	9303      	str	r3, [sp, #12]
 800b672:	2e00      	cmp	r6, #0
 800b674:	d158      	bne.n	800b728 <_dtoa_r+0x4f8>
 800b676:	4b82      	ldr	r3, [pc, #520]	; (800b880 <_dtoa_r+0x650>)
 800b678:	2200      	movs	r2, #0
 800b67a:	4640      	mov	r0, r8
 800b67c:	4649      	mov	r1, r9
 800b67e:	f7f4 fe1b 	bl	80002b8 <__aeabi_dsub>
 800b682:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b686:	4680      	mov	r8, r0
 800b688:	4689      	mov	r9, r1
 800b68a:	f7f5 fa5d 	bl	8000b48 <__aeabi_dcmpgt>
 800b68e:	2800      	cmp	r0, #0
 800b690:	f040 8296 	bne.w	800bbc0 <_dtoa_r+0x990>
 800b694:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b698:	4640      	mov	r0, r8
 800b69a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b69e:	4649      	mov	r1, r9
 800b6a0:	f7f5 fa34 	bl	8000b0c <__aeabi_dcmplt>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	f040 8289 	bne.w	800bbbc <_dtoa_r+0x98c>
 800b6aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b6ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f2c0 814e 	blt.w	800b952 <_dtoa_r+0x722>
 800b6b6:	f1bb 0f0e 	cmp.w	fp, #14
 800b6ba:	f300 814a 	bgt.w	800b952 <_dtoa_r+0x722>
 800b6be:	4b6b      	ldr	r3, [pc, #428]	; (800b86c <_dtoa_r+0x63c>)
 800b6c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b6c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b6c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	f280 80dc 	bge.w	800b888 <_dtoa_r+0x658>
 800b6d0:	9b04      	ldr	r3, [sp, #16]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f300 80d8 	bgt.w	800b888 <_dtoa_r+0x658>
 800b6d8:	f040 826f 	bne.w	800bbba <_dtoa_r+0x98a>
 800b6dc:	4b68      	ldr	r3, [pc, #416]	; (800b880 <_dtoa_r+0x650>)
 800b6de:	2200      	movs	r2, #0
 800b6e0:	4640      	mov	r0, r8
 800b6e2:	4649      	mov	r1, r9
 800b6e4:	f7f4 ffa0 	bl	8000628 <__aeabi_dmul>
 800b6e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6ec:	f7f5 fa22 	bl	8000b34 <__aeabi_dcmpge>
 800b6f0:	9e04      	ldr	r6, [sp, #16]
 800b6f2:	4637      	mov	r7, r6
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	f040 8245 	bne.w	800bb84 <_dtoa_r+0x954>
 800b6fa:	9d00      	ldr	r5, [sp, #0]
 800b6fc:	2331      	movs	r3, #49	; 0x31
 800b6fe:	f805 3b01 	strb.w	r3, [r5], #1
 800b702:	f10b 0b01 	add.w	fp, fp, #1
 800b706:	e241      	b.n	800bb8c <_dtoa_r+0x95c>
 800b708:	07f2      	lsls	r2, r6, #31
 800b70a:	d505      	bpl.n	800b718 <_dtoa_r+0x4e8>
 800b70c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b710:	f7f4 ff8a 	bl	8000628 <__aeabi_dmul>
 800b714:	3501      	adds	r5, #1
 800b716:	2301      	movs	r3, #1
 800b718:	1076      	asrs	r6, r6, #1
 800b71a:	3708      	adds	r7, #8
 800b71c:	e773      	b.n	800b606 <_dtoa_r+0x3d6>
 800b71e:	2502      	movs	r5, #2
 800b720:	e775      	b.n	800b60e <_dtoa_r+0x3de>
 800b722:	9e04      	ldr	r6, [sp, #16]
 800b724:	465f      	mov	r7, fp
 800b726:	e792      	b.n	800b64e <_dtoa_r+0x41e>
 800b728:	9900      	ldr	r1, [sp, #0]
 800b72a:	4b50      	ldr	r3, [pc, #320]	; (800b86c <_dtoa_r+0x63c>)
 800b72c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b730:	4431      	add	r1, r6
 800b732:	9102      	str	r1, [sp, #8]
 800b734:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b736:	eeb0 9a47 	vmov.f32	s18, s14
 800b73a:	eef0 9a67 	vmov.f32	s19, s15
 800b73e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b742:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b746:	2900      	cmp	r1, #0
 800b748:	d044      	beq.n	800b7d4 <_dtoa_r+0x5a4>
 800b74a:	494e      	ldr	r1, [pc, #312]	; (800b884 <_dtoa_r+0x654>)
 800b74c:	2000      	movs	r0, #0
 800b74e:	f7f5 f895 	bl	800087c <__aeabi_ddiv>
 800b752:	ec53 2b19 	vmov	r2, r3, d9
 800b756:	f7f4 fdaf 	bl	80002b8 <__aeabi_dsub>
 800b75a:	9d00      	ldr	r5, [sp, #0]
 800b75c:	ec41 0b19 	vmov	d9, r0, r1
 800b760:	4649      	mov	r1, r9
 800b762:	4640      	mov	r0, r8
 800b764:	f7f5 fa10 	bl	8000b88 <__aeabi_d2iz>
 800b768:	4606      	mov	r6, r0
 800b76a:	f7f4 fef3 	bl	8000554 <__aeabi_i2d>
 800b76e:	4602      	mov	r2, r0
 800b770:	460b      	mov	r3, r1
 800b772:	4640      	mov	r0, r8
 800b774:	4649      	mov	r1, r9
 800b776:	f7f4 fd9f 	bl	80002b8 <__aeabi_dsub>
 800b77a:	3630      	adds	r6, #48	; 0x30
 800b77c:	f805 6b01 	strb.w	r6, [r5], #1
 800b780:	ec53 2b19 	vmov	r2, r3, d9
 800b784:	4680      	mov	r8, r0
 800b786:	4689      	mov	r9, r1
 800b788:	f7f5 f9c0 	bl	8000b0c <__aeabi_dcmplt>
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d164      	bne.n	800b85a <_dtoa_r+0x62a>
 800b790:	4642      	mov	r2, r8
 800b792:	464b      	mov	r3, r9
 800b794:	4937      	ldr	r1, [pc, #220]	; (800b874 <_dtoa_r+0x644>)
 800b796:	2000      	movs	r0, #0
 800b798:	f7f4 fd8e 	bl	80002b8 <__aeabi_dsub>
 800b79c:	ec53 2b19 	vmov	r2, r3, d9
 800b7a0:	f7f5 f9b4 	bl	8000b0c <__aeabi_dcmplt>
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	f040 80b6 	bne.w	800b916 <_dtoa_r+0x6e6>
 800b7aa:	9b02      	ldr	r3, [sp, #8]
 800b7ac:	429d      	cmp	r5, r3
 800b7ae:	f43f af7c 	beq.w	800b6aa <_dtoa_r+0x47a>
 800b7b2:	4b31      	ldr	r3, [pc, #196]	; (800b878 <_dtoa_r+0x648>)
 800b7b4:	ec51 0b19 	vmov	r0, r1, d9
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f7f4 ff35 	bl	8000628 <__aeabi_dmul>
 800b7be:	4b2e      	ldr	r3, [pc, #184]	; (800b878 <_dtoa_r+0x648>)
 800b7c0:	ec41 0b19 	vmov	d9, r0, r1
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	4640      	mov	r0, r8
 800b7c8:	4649      	mov	r1, r9
 800b7ca:	f7f4 ff2d 	bl	8000628 <__aeabi_dmul>
 800b7ce:	4680      	mov	r8, r0
 800b7d0:	4689      	mov	r9, r1
 800b7d2:	e7c5      	b.n	800b760 <_dtoa_r+0x530>
 800b7d4:	ec51 0b17 	vmov	r0, r1, d7
 800b7d8:	f7f4 ff26 	bl	8000628 <__aeabi_dmul>
 800b7dc:	9b02      	ldr	r3, [sp, #8]
 800b7de:	9d00      	ldr	r5, [sp, #0]
 800b7e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7e2:	ec41 0b19 	vmov	d9, r0, r1
 800b7e6:	4649      	mov	r1, r9
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	f7f5 f9cd 	bl	8000b88 <__aeabi_d2iz>
 800b7ee:	4606      	mov	r6, r0
 800b7f0:	f7f4 feb0 	bl	8000554 <__aeabi_i2d>
 800b7f4:	3630      	adds	r6, #48	; 0x30
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	4640      	mov	r0, r8
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	f7f4 fd5b 	bl	80002b8 <__aeabi_dsub>
 800b802:	f805 6b01 	strb.w	r6, [r5], #1
 800b806:	9b02      	ldr	r3, [sp, #8]
 800b808:	429d      	cmp	r5, r3
 800b80a:	4680      	mov	r8, r0
 800b80c:	4689      	mov	r9, r1
 800b80e:	f04f 0200 	mov.w	r2, #0
 800b812:	d124      	bne.n	800b85e <_dtoa_r+0x62e>
 800b814:	4b1b      	ldr	r3, [pc, #108]	; (800b884 <_dtoa_r+0x654>)
 800b816:	ec51 0b19 	vmov	r0, r1, d9
 800b81a:	f7f4 fd4f 	bl	80002bc <__adddf3>
 800b81e:	4602      	mov	r2, r0
 800b820:	460b      	mov	r3, r1
 800b822:	4640      	mov	r0, r8
 800b824:	4649      	mov	r1, r9
 800b826:	f7f5 f98f 	bl	8000b48 <__aeabi_dcmpgt>
 800b82a:	2800      	cmp	r0, #0
 800b82c:	d173      	bne.n	800b916 <_dtoa_r+0x6e6>
 800b82e:	ec53 2b19 	vmov	r2, r3, d9
 800b832:	4914      	ldr	r1, [pc, #80]	; (800b884 <_dtoa_r+0x654>)
 800b834:	2000      	movs	r0, #0
 800b836:	f7f4 fd3f 	bl	80002b8 <__aeabi_dsub>
 800b83a:	4602      	mov	r2, r0
 800b83c:	460b      	mov	r3, r1
 800b83e:	4640      	mov	r0, r8
 800b840:	4649      	mov	r1, r9
 800b842:	f7f5 f963 	bl	8000b0c <__aeabi_dcmplt>
 800b846:	2800      	cmp	r0, #0
 800b848:	f43f af2f 	beq.w	800b6aa <_dtoa_r+0x47a>
 800b84c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b84e:	1e6b      	subs	r3, r5, #1
 800b850:	930f      	str	r3, [sp, #60]	; 0x3c
 800b852:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b856:	2b30      	cmp	r3, #48	; 0x30
 800b858:	d0f8      	beq.n	800b84c <_dtoa_r+0x61c>
 800b85a:	46bb      	mov	fp, r7
 800b85c:	e04a      	b.n	800b8f4 <_dtoa_r+0x6c4>
 800b85e:	4b06      	ldr	r3, [pc, #24]	; (800b878 <_dtoa_r+0x648>)
 800b860:	f7f4 fee2 	bl	8000628 <__aeabi_dmul>
 800b864:	4680      	mov	r8, r0
 800b866:	4689      	mov	r9, r1
 800b868:	e7bd      	b.n	800b7e6 <_dtoa_r+0x5b6>
 800b86a:	bf00      	nop
 800b86c:	0800d080 	.word	0x0800d080
 800b870:	0800d058 	.word	0x0800d058
 800b874:	3ff00000 	.word	0x3ff00000
 800b878:	40240000 	.word	0x40240000
 800b87c:	401c0000 	.word	0x401c0000
 800b880:	40140000 	.word	0x40140000
 800b884:	3fe00000 	.word	0x3fe00000
 800b888:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b88c:	9d00      	ldr	r5, [sp, #0]
 800b88e:	4642      	mov	r2, r8
 800b890:	464b      	mov	r3, r9
 800b892:	4630      	mov	r0, r6
 800b894:	4639      	mov	r1, r7
 800b896:	f7f4 fff1 	bl	800087c <__aeabi_ddiv>
 800b89a:	f7f5 f975 	bl	8000b88 <__aeabi_d2iz>
 800b89e:	9001      	str	r0, [sp, #4]
 800b8a0:	f7f4 fe58 	bl	8000554 <__aeabi_i2d>
 800b8a4:	4642      	mov	r2, r8
 800b8a6:	464b      	mov	r3, r9
 800b8a8:	f7f4 febe 	bl	8000628 <__aeabi_dmul>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	4630      	mov	r0, r6
 800b8b2:	4639      	mov	r1, r7
 800b8b4:	f7f4 fd00 	bl	80002b8 <__aeabi_dsub>
 800b8b8:	9e01      	ldr	r6, [sp, #4]
 800b8ba:	9f04      	ldr	r7, [sp, #16]
 800b8bc:	3630      	adds	r6, #48	; 0x30
 800b8be:	f805 6b01 	strb.w	r6, [r5], #1
 800b8c2:	9e00      	ldr	r6, [sp, #0]
 800b8c4:	1bae      	subs	r6, r5, r6
 800b8c6:	42b7      	cmp	r7, r6
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	d134      	bne.n	800b938 <_dtoa_r+0x708>
 800b8ce:	f7f4 fcf5 	bl	80002bc <__adddf3>
 800b8d2:	4642      	mov	r2, r8
 800b8d4:	464b      	mov	r3, r9
 800b8d6:	4606      	mov	r6, r0
 800b8d8:	460f      	mov	r7, r1
 800b8da:	f7f5 f935 	bl	8000b48 <__aeabi_dcmpgt>
 800b8de:	b9c8      	cbnz	r0, 800b914 <_dtoa_r+0x6e4>
 800b8e0:	4642      	mov	r2, r8
 800b8e2:	464b      	mov	r3, r9
 800b8e4:	4630      	mov	r0, r6
 800b8e6:	4639      	mov	r1, r7
 800b8e8:	f7f5 f906 	bl	8000af8 <__aeabi_dcmpeq>
 800b8ec:	b110      	cbz	r0, 800b8f4 <_dtoa_r+0x6c4>
 800b8ee:	9b01      	ldr	r3, [sp, #4]
 800b8f0:	07db      	lsls	r3, r3, #31
 800b8f2:	d40f      	bmi.n	800b914 <_dtoa_r+0x6e4>
 800b8f4:	4651      	mov	r1, sl
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f000 fbcc 	bl	800c094 <_Bfree>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b900:	702b      	strb	r3, [r5, #0]
 800b902:	f10b 0301 	add.w	r3, fp, #1
 800b906:	6013      	str	r3, [r2, #0]
 800b908:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	f43f ace2 	beq.w	800b2d4 <_dtoa_r+0xa4>
 800b910:	601d      	str	r5, [r3, #0]
 800b912:	e4df      	b.n	800b2d4 <_dtoa_r+0xa4>
 800b914:	465f      	mov	r7, fp
 800b916:	462b      	mov	r3, r5
 800b918:	461d      	mov	r5, r3
 800b91a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b91e:	2a39      	cmp	r2, #57	; 0x39
 800b920:	d106      	bne.n	800b930 <_dtoa_r+0x700>
 800b922:	9a00      	ldr	r2, [sp, #0]
 800b924:	429a      	cmp	r2, r3
 800b926:	d1f7      	bne.n	800b918 <_dtoa_r+0x6e8>
 800b928:	9900      	ldr	r1, [sp, #0]
 800b92a:	2230      	movs	r2, #48	; 0x30
 800b92c:	3701      	adds	r7, #1
 800b92e:	700a      	strb	r2, [r1, #0]
 800b930:	781a      	ldrb	r2, [r3, #0]
 800b932:	3201      	adds	r2, #1
 800b934:	701a      	strb	r2, [r3, #0]
 800b936:	e790      	b.n	800b85a <_dtoa_r+0x62a>
 800b938:	4ba3      	ldr	r3, [pc, #652]	; (800bbc8 <_dtoa_r+0x998>)
 800b93a:	2200      	movs	r2, #0
 800b93c:	f7f4 fe74 	bl	8000628 <__aeabi_dmul>
 800b940:	2200      	movs	r2, #0
 800b942:	2300      	movs	r3, #0
 800b944:	4606      	mov	r6, r0
 800b946:	460f      	mov	r7, r1
 800b948:	f7f5 f8d6 	bl	8000af8 <__aeabi_dcmpeq>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	d09e      	beq.n	800b88e <_dtoa_r+0x65e>
 800b950:	e7d0      	b.n	800b8f4 <_dtoa_r+0x6c4>
 800b952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b954:	2a00      	cmp	r2, #0
 800b956:	f000 80ca 	beq.w	800baee <_dtoa_r+0x8be>
 800b95a:	9a07      	ldr	r2, [sp, #28]
 800b95c:	2a01      	cmp	r2, #1
 800b95e:	f300 80ad 	bgt.w	800babc <_dtoa_r+0x88c>
 800b962:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b964:	2a00      	cmp	r2, #0
 800b966:	f000 80a5 	beq.w	800bab4 <_dtoa_r+0x884>
 800b96a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b96e:	9e08      	ldr	r6, [sp, #32]
 800b970:	9d05      	ldr	r5, [sp, #20]
 800b972:	9a05      	ldr	r2, [sp, #20]
 800b974:	441a      	add	r2, r3
 800b976:	9205      	str	r2, [sp, #20]
 800b978:	9a06      	ldr	r2, [sp, #24]
 800b97a:	2101      	movs	r1, #1
 800b97c:	441a      	add	r2, r3
 800b97e:	4620      	mov	r0, r4
 800b980:	9206      	str	r2, [sp, #24]
 800b982:	f000 fc3d 	bl	800c200 <__i2b>
 800b986:	4607      	mov	r7, r0
 800b988:	b165      	cbz	r5, 800b9a4 <_dtoa_r+0x774>
 800b98a:	9b06      	ldr	r3, [sp, #24]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	dd09      	ble.n	800b9a4 <_dtoa_r+0x774>
 800b990:	42ab      	cmp	r3, r5
 800b992:	9a05      	ldr	r2, [sp, #20]
 800b994:	bfa8      	it	ge
 800b996:	462b      	movge	r3, r5
 800b998:	1ad2      	subs	r2, r2, r3
 800b99a:	9205      	str	r2, [sp, #20]
 800b99c:	9a06      	ldr	r2, [sp, #24]
 800b99e:	1aed      	subs	r5, r5, r3
 800b9a0:	1ad3      	subs	r3, r2, r3
 800b9a2:	9306      	str	r3, [sp, #24]
 800b9a4:	9b08      	ldr	r3, [sp, #32]
 800b9a6:	b1f3      	cbz	r3, 800b9e6 <_dtoa_r+0x7b6>
 800b9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f000 80a3 	beq.w	800baf6 <_dtoa_r+0x8c6>
 800b9b0:	2e00      	cmp	r6, #0
 800b9b2:	dd10      	ble.n	800b9d6 <_dtoa_r+0x7a6>
 800b9b4:	4639      	mov	r1, r7
 800b9b6:	4632      	mov	r2, r6
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f000 fce1 	bl	800c380 <__pow5mult>
 800b9be:	4652      	mov	r2, sl
 800b9c0:	4601      	mov	r1, r0
 800b9c2:	4607      	mov	r7, r0
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	f000 fc31 	bl	800c22c <__multiply>
 800b9ca:	4651      	mov	r1, sl
 800b9cc:	4680      	mov	r8, r0
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f000 fb60 	bl	800c094 <_Bfree>
 800b9d4:	46c2      	mov	sl, r8
 800b9d6:	9b08      	ldr	r3, [sp, #32]
 800b9d8:	1b9a      	subs	r2, r3, r6
 800b9da:	d004      	beq.n	800b9e6 <_dtoa_r+0x7b6>
 800b9dc:	4651      	mov	r1, sl
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f000 fcce 	bl	800c380 <__pow5mult>
 800b9e4:	4682      	mov	sl, r0
 800b9e6:	2101      	movs	r1, #1
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	f000 fc09 	bl	800c200 <__i2b>
 800b9ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	4606      	mov	r6, r0
 800b9f4:	f340 8081 	ble.w	800bafa <_dtoa_r+0x8ca>
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	4601      	mov	r1, r0
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f000 fcbf 	bl	800c380 <__pow5mult>
 800ba02:	9b07      	ldr	r3, [sp, #28]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	4606      	mov	r6, r0
 800ba08:	dd7a      	ble.n	800bb00 <_dtoa_r+0x8d0>
 800ba0a:	f04f 0800 	mov.w	r8, #0
 800ba0e:	6933      	ldr	r3, [r6, #16]
 800ba10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ba14:	6918      	ldr	r0, [r3, #16]
 800ba16:	f000 fba5 	bl	800c164 <__hi0bits>
 800ba1a:	f1c0 0020 	rsb	r0, r0, #32
 800ba1e:	9b06      	ldr	r3, [sp, #24]
 800ba20:	4418      	add	r0, r3
 800ba22:	f010 001f 	ands.w	r0, r0, #31
 800ba26:	f000 8094 	beq.w	800bb52 <_dtoa_r+0x922>
 800ba2a:	f1c0 0320 	rsb	r3, r0, #32
 800ba2e:	2b04      	cmp	r3, #4
 800ba30:	f340 8085 	ble.w	800bb3e <_dtoa_r+0x90e>
 800ba34:	9b05      	ldr	r3, [sp, #20]
 800ba36:	f1c0 001c 	rsb	r0, r0, #28
 800ba3a:	4403      	add	r3, r0
 800ba3c:	9305      	str	r3, [sp, #20]
 800ba3e:	9b06      	ldr	r3, [sp, #24]
 800ba40:	4403      	add	r3, r0
 800ba42:	4405      	add	r5, r0
 800ba44:	9306      	str	r3, [sp, #24]
 800ba46:	9b05      	ldr	r3, [sp, #20]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	dd05      	ble.n	800ba58 <_dtoa_r+0x828>
 800ba4c:	4651      	mov	r1, sl
 800ba4e:	461a      	mov	r2, r3
 800ba50:	4620      	mov	r0, r4
 800ba52:	f000 fcef 	bl	800c434 <__lshift>
 800ba56:	4682      	mov	sl, r0
 800ba58:	9b06      	ldr	r3, [sp, #24]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	dd05      	ble.n	800ba6a <_dtoa_r+0x83a>
 800ba5e:	4631      	mov	r1, r6
 800ba60:	461a      	mov	r2, r3
 800ba62:	4620      	mov	r0, r4
 800ba64:	f000 fce6 	bl	800c434 <__lshift>
 800ba68:	4606      	mov	r6, r0
 800ba6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d072      	beq.n	800bb56 <_dtoa_r+0x926>
 800ba70:	4631      	mov	r1, r6
 800ba72:	4650      	mov	r0, sl
 800ba74:	f000 fd4a 	bl	800c50c <__mcmp>
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	da6c      	bge.n	800bb56 <_dtoa_r+0x926>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	4651      	mov	r1, sl
 800ba80:	220a      	movs	r2, #10
 800ba82:	4620      	mov	r0, r4
 800ba84:	f000 fb28 	bl	800c0d8 <__multadd>
 800ba88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ba8e:	4682      	mov	sl, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f000 81b0 	beq.w	800bdf6 <_dtoa_r+0xbc6>
 800ba96:	2300      	movs	r3, #0
 800ba98:	4639      	mov	r1, r7
 800ba9a:	220a      	movs	r2, #10
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	f000 fb1b 	bl	800c0d8 <__multadd>
 800baa2:	9b01      	ldr	r3, [sp, #4]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	4607      	mov	r7, r0
 800baa8:	f300 8096 	bgt.w	800bbd8 <_dtoa_r+0x9a8>
 800baac:	9b07      	ldr	r3, [sp, #28]
 800baae:	2b02      	cmp	r3, #2
 800bab0:	dc59      	bgt.n	800bb66 <_dtoa_r+0x936>
 800bab2:	e091      	b.n	800bbd8 <_dtoa_r+0x9a8>
 800bab4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bab6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800baba:	e758      	b.n	800b96e <_dtoa_r+0x73e>
 800babc:	9b04      	ldr	r3, [sp, #16]
 800babe:	1e5e      	subs	r6, r3, #1
 800bac0:	9b08      	ldr	r3, [sp, #32]
 800bac2:	42b3      	cmp	r3, r6
 800bac4:	bfbf      	itttt	lt
 800bac6:	9b08      	ldrlt	r3, [sp, #32]
 800bac8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800baca:	9608      	strlt	r6, [sp, #32]
 800bacc:	1af3      	sublt	r3, r6, r3
 800bace:	bfb4      	ite	lt
 800bad0:	18d2      	addlt	r2, r2, r3
 800bad2:	1b9e      	subge	r6, r3, r6
 800bad4:	9b04      	ldr	r3, [sp, #16]
 800bad6:	bfbc      	itt	lt
 800bad8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bada:	2600      	movlt	r6, #0
 800badc:	2b00      	cmp	r3, #0
 800bade:	bfb7      	itett	lt
 800bae0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bae4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bae8:	1a9d      	sublt	r5, r3, r2
 800baea:	2300      	movlt	r3, #0
 800baec:	e741      	b.n	800b972 <_dtoa_r+0x742>
 800baee:	9e08      	ldr	r6, [sp, #32]
 800baf0:	9d05      	ldr	r5, [sp, #20]
 800baf2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800baf4:	e748      	b.n	800b988 <_dtoa_r+0x758>
 800baf6:	9a08      	ldr	r2, [sp, #32]
 800baf8:	e770      	b.n	800b9dc <_dtoa_r+0x7ac>
 800bafa:	9b07      	ldr	r3, [sp, #28]
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	dc19      	bgt.n	800bb34 <_dtoa_r+0x904>
 800bb00:	9b02      	ldr	r3, [sp, #8]
 800bb02:	b9bb      	cbnz	r3, 800bb34 <_dtoa_r+0x904>
 800bb04:	9b03      	ldr	r3, [sp, #12]
 800bb06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb0a:	b99b      	cbnz	r3, 800bb34 <_dtoa_r+0x904>
 800bb0c:	9b03      	ldr	r3, [sp, #12]
 800bb0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb12:	0d1b      	lsrs	r3, r3, #20
 800bb14:	051b      	lsls	r3, r3, #20
 800bb16:	b183      	cbz	r3, 800bb3a <_dtoa_r+0x90a>
 800bb18:	9b05      	ldr	r3, [sp, #20]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	9305      	str	r3, [sp, #20]
 800bb1e:	9b06      	ldr	r3, [sp, #24]
 800bb20:	3301      	adds	r3, #1
 800bb22:	9306      	str	r3, [sp, #24]
 800bb24:	f04f 0801 	mov.w	r8, #1
 800bb28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	f47f af6f 	bne.w	800ba0e <_dtoa_r+0x7de>
 800bb30:	2001      	movs	r0, #1
 800bb32:	e774      	b.n	800ba1e <_dtoa_r+0x7ee>
 800bb34:	f04f 0800 	mov.w	r8, #0
 800bb38:	e7f6      	b.n	800bb28 <_dtoa_r+0x8f8>
 800bb3a:	4698      	mov	r8, r3
 800bb3c:	e7f4      	b.n	800bb28 <_dtoa_r+0x8f8>
 800bb3e:	d082      	beq.n	800ba46 <_dtoa_r+0x816>
 800bb40:	9a05      	ldr	r2, [sp, #20]
 800bb42:	331c      	adds	r3, #28
 800bb44:	441a      	add	r2, r3
 800bb46:	9205      	str	r2, [sp, #20]
 800bb48:	9a06      	ldr	r2, [sp, #24]
 800bb4a:	441a      	add	r2, r3
 800bb4c:	441d      	add	r5, r3
 800bb4e:	9206      	str	r2, [sp, #24]
 800bb50:	e779      	b.n	800ba46 <_dtoa_r+0x816>
 800bb52:	4603      	mov	r3, r0
 800bb54:	e7f4      	b.n	800bb40 <_dtoa_r+0x910>
 800bb56:	9b04      	ldr	r3, [sp, #16]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	dc37      	bgt.n	800bbcc <_dtoa_r+0x99c>
 800bb5c:	9b07      	ldr	r3, [sp, #28]
 800bb5e:	2b02      	cmp	r3, #2
 800bb60:	dd34      	ble.n	800bbcc <_dtoa_r+0x99c>
 800bb62:	9b04      	ldr	r3, [sp, #16]
 800bb64:	9301      	str	r3, [sp, #4]
 800bb66:	9b01      	ldr	r3, [sp, #4]
 800bb68:	b963      	cbnz	r3, 800bb84 <_dtoa_r+0x954>
 800bb6a:	4631      	mov	r1, r6
 800bb6c:	2205      	movs	r2, #5
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f000 fab2 	bl	800c0d8 <__multadd>
 800bb74:	4601      	mov	r1, r0
 800bb76:	4606      	mov	r6, r0
 800bb78:	4650      	mov	r0, sl
 800bb7a:	f000 fcc7 	bl	800c50c <__mcmp>
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	f73f adbb 	bgt.w	800b6fa <_dtoa_r+0x4ca>
 800bb84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb86:	9d00      	ldr	r5, [sp, #0]
 800bb88:	ea6f 0b03 	mvn.w	fp, r3
 800bb8c:	f04f 0800 	mov.w	r8, #0
 800bb90:	4631      	mov	r1, r6
 800bb92:	4620      	mov	r0, r4
 800bb94:	f000 fa7e 	bl	800c094 <_Bfree>
 800bb98:	2f00      	cmp	r7, #0
 800bb9a:	f43f aeab 	beq.w	800b8f4 <_dtoa_r+0x6c4>
 800bb9e:	f1b8 0f00 	cmp.w	r8, #0
 800bba2:	d005      	beq.n	800bbb0 <_dtoa_r+0x980>
 800bba4:	45b8      	cmp	r8, r7
 800bba6:	d003      	beq.n	800bbb0 <_dtoa_r+0x980>
 800bba8:	4641      	mov	r1, r8
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f000 fa72 	bl	800c094 <_Bfree>
 800bbb0:	4639      	mov	r1, r7
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f000 fa6e 	bl	800c094 <_Bfree>
 800bbb8:	e69c      	b.n	800b8f4 <_dtoa_r+0x6c4>
 800bbba:	2600      	movs	r6, #0
 800bbbc:	4637      	mov	r7, r6
 800bbbe:	e7e1      	b.n	800bb84 <_dtoa_r+0x954>
 800bbc0:	46bb      	mov	fp, r7
 800bbc2:	4637      	mov	r7, r6
 800bbc4:	e599      	b.n	800b6fa <_dtoa_r+0x4ca>
 800bbc6:	bf00      	nop
 800bbc8:	40240000 	.word	0x40240000
 800bbcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f000 80c8 	beq.w	800bd64 <_dtoa_r+0xb34>
 800bbd4:	9b04      	ldr	r3, [sp, #16]
 800bbd6:	9301      	str	r3, [sp, #4]
 800bbd8:	2d00      	cmp	r5, #0
 800bbda:	dd05      	ble.n	800bbe8 <_dtoa_r+0x9b8>
 800bbdc:	4639      	mov	r1, r7
 800bbde:	462a      	mov	r2, r5
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f000 fc27 	bl	800c434 <__lshift>
 800bbe6:	4607      	mov	r7, r0
 800bbe8:	f1b8 0f00 	cmp.w	r8, #0
 800bbec:	d05b      	beq.n	800bca6 <_dtoa_r+0xa76>
 800bbee:	6879      	ldr	r1, [r7, #4]
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f000 fa0f 	bl	800c014 <_Balloc>
 800bbf6:	4605      	mov	r5, r0
 800bbf8:	b928      	cbnz	r0, 800bc06 <_dtoa_r+0x9d6>
 800bbfa:	4b83      	ldr	r3, [pc, #524]	; (800be08 <_dtoa_r+0xbd8>)
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bc02:	f7ff bb2e 	b.w	800b262 <_dtoa_r+0x32>
 800bc06:	693a      	ldr	r2, [r7, #16]
 800bc08:	3202      	adds	r2, #2
 800bc0a:	0092      	lsls	r2, r2, #2
 800bc0c:	f107 010c 	add.w	r1, r7, #12
 800bc10:	300c      	adds	r0, #12
 800bc12:	f7ff fa76 	bl	800b102 <memcpy>
 800bc16:	2201      	movs	r2, #1
 800bc18:	4629      	mov	r1, r5
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f000 fc0a 	bl	800c434 <__lshift>
 800bc20:	9b00      	ldr	r3, [sp, #0]
 800bc22:	3301      	adds	r3, #1
 800bc24:	9304      	str	r3, [sp, #16]
 800bc26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	9308      	str	r3, [sp, #32]
 800bc2e:	9b02      	ldr	r3, [sp, #8]
 800bc30:	f003 0301 	and.w	r3, r3, #1
 800bc34:	46b8      	mov	r8, r7
 800bc36:	9306      	str	r3, [sp, #24]
 800bc38:	4607      	mov	r7, r0
 800bc3a:	9b04      	ldr	r3, [sp, #16]
 800bc3c:	4631      	mov	r1, r6
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	4650      	mov	r0, sl
 800bc42:	9301      	str	r3, [sp, #4]
 800bc44:	f7ff fa6b 	bl	800b11e <quorem>
 800bc48:	4641      	mov	r1, r8
 800bc4a:	9002      	str	r0, [sp, #8]
 800bc4c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bc50:	4650      	mov	r0, sl
 800bc52:	f000 fc5b 	bl	800c50c <__mcmp>
 800bc56:	463a      	mov	r2, r7
 800bc58:	9005      	str	r0, [sp, #20]
 800bc5a:	4631      	mov	r1, r6
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f000 fc71 	bl	800c544 <__mdiff>
 800bc62:	68c2      	ldr	r2, [r0, #12]
 800bc64:	4605      	mov	r5, r0
 800bc66:	bb02      	cbnz	r2, 800bcaa <_dtoa_r+0xa7a>
 800bc68:	4601      	mov	r1, r0
 800bc6a:	4650      	mov	r0, sl
 800bc6c:	f000 fc4e 	bl	800c50c <__mcmp>
 800bc70:	4602      	mov	r2, r0
 800bc72:	4629      	mov	r1, r5
 800bc74:	4620      	mov	r0, r4
 800bc76:	9209      	str	r2, [sp, #36]	; 0x24
 800bc78:	f000 fa0c 	bl	800c094 <_Bfree>
 800bc7c:	9b07      	ldr	r3, [sp, #28]
 800bc7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc80:	9d04      	ldr	r5, [sp, #16]
 800bc82:	ea43 0102 	orr.w	r1, r3, r2
 800bc86:	9b06      	ldr	r3, [sp, #24]
 800bc88:	4319      	orrs	r1, r3
 800bc8a:	d110      	bne.n	800bcae <_dtoa_r+0xa7e>
 800bc8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bc90:	d029      	beq.n	800bce6 <_dtoa_r+0xab6>
 800bc92:	9b05      	ldr	r3, [sp, #20]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	dd02      	ble.n	800bc9e <_dtoa_r+0xa6e>
 800bc98:	9b02      	ldr	r3, [sp, #8]
 800bc9a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bc9e:	9b01      	ldr	r3, [sp, #4]
 800bca0:	f883 9000 	strb.w	r9, [r3]
 800bca4:	e774      	b.n	800bb90 <_dtoa_r+0x960>
 800bca6:	4638      	mov	r0, r7
 800bca8:	e7ba      	b.n	800bc20 <_dtoa_r+0x9f0>
 800bcaa:	2201      	movs	r2, #1
 800bcac:	e7e1      	b.n	800bc72 <_dtoa_r+0xa42>
 800bcae:	9b05      	ldr	r3, [sp, #20]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	db04      	blt.n	800bcbe <_dtoa_r+0xa8e>
 800bcb4:	9907      	ldr	r1, [sp, #28]
 800bcb6:	430b      	orrs	r3, r1
 800bcb8:	9906      	ldr	r1, [sp, #24]
 800bcba:	430b      	orrs	r3, r1
 800bcbc:	d120      	bne.n	800bd00 <_dtoa_r+0xad0>
 800bcbe:	2a00      	cmp	r2, #0
 800bcc0:	dded      	ble.n	800bc9e <_dtoa_r+0xa6e>
 800bcc2:	4651      	mov	r1, sl
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f000 fbb4 	bl	800c434 <__lshift>
 800bccc:	4631      	mov	r1, r6
 800bcce:	4682      	mov	sl, r0
 800bcd0:	f000 fc1c 	bl	800c50c <__mcmp>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	dc03      	bgt.n	800bce0 <_dtoa_r+0xab0>
 800bcd8:	d1e1      	bne.n	800bc9e <_dtoa_r+0xa6e>
 800bcda:	f019 0f01 	tst.w	r9, #1
 800bcde:	d0de      	beq.n	800bc9e <_dtoa_r+0xa6e>
 800bce0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bce4:	d1d8      	bne.n	800bc98 <_dtoa_r+0xa68>
 800bce6:	9a01      	ldr	r2, [sp, #4]
 800bce8:	2339      	movs	r3, #57	; 0x39
 800bcea:	7013      	strb	r3, [r2, #0]
 800bcec:	462b      	mov	r3, r5
 800bcee:	461d      	mov	r5, r3
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bcf6:	2a39      	cmp	r2, #57	; 0x39
 800bcf8:	d06c      	beq.n	800bdd4 <_dtoa_r+0xba4>
 800bcfa:	3201      	adds	r2, #1
 800bcfc:	701a      	strb	r2, [r3, #0]
 800bcfe:	e747      	b.n	800bb90 <_dtoa_r+0x960>
 800bd00:	2a00      	cmp	r2, #0
 800bd02:	dd07      	ble.n	800bd14 <_dtoa_r+0xae4>
 800bd04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bd08:	d0ed      	beq.n	800bce6 <_dtoa_r+0xab6>
 800bd0a:	9a01      	ldr	r2, [sp, #4]
 800bd0c:	f109 0301 	add.w	r3, r9, #1
 800bd10:	7013      	strb	r3, [r2, #0]
 800bd12:	e73d      	b.n	800bb90 <_dtoa_r+0x960>
 800bd14:	9b04      	ldr	r3, [sp, #16]
 800bd16:	9a08      	ldr	r2, [sp, #32]
 800bd18:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d043      	beq.n	800bda8 <_dtoa_r+0xb78>
 800bd20:	4651      	mov	r1, sl
 800bd22:	2300      	movs	r3, #0
 800bd24:	220a      	movs	r2, #10
 800bd26:	4620      	mov	r0, r4
 800bd28:	f000 f9d6 	bl	800c0d8 <__multadd>
 800bd2c:	45b8      	cmp	r8, r7
 800bd2e:	4682      	mov	sl, r0
 800bd30:	f04f 0300 	mov.w	r3, #0
 800bd34:	f04f 020a 	mov.w	r2, #10
 800bd38:	4641      	mov	r1, r8
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	d107      	bne.n	800bd4e <_dtoa_r+0xb1e>
 800bd3e:	f000 f9cb 	bl	800c0d8 <__multadd>
 800bd42:	4680      	mov	r8, r0
 800bd44:	4607      	mov	r7, r0
 800bd46:	9b04      	ldr	r3, [sp, #16]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	9304      	str	r3, [sp, #16]
 800bd4c:	e775      	b.n	800bc3a <_dtoa_r+0xa0a>
 800bd4e:	f000 f9c3 	bl	800c0d8 <__multadd>
 800bd52:	4639      	mov	r1, r7
 800bd54:	4680      	mov	r8, r0
 800bd56:	2300      	movs	r3, #0
 800bd58:	220a      	movs	r2, #10
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	f000 f9bc 	bl	800c0d8 <__multadd>
 800bd60:	4607      	mov	r7, r0
 800bd62:	e7f0      	b.n	800bd46 <_dtoa_r+0xb16>
 800bd64:	9b04      	ldr	r3, [sp, #16]
 800bd66:	9301      	str	r3, [sp, #4]
 800bd68:	9d00      	ldr	r5, [sp, #0]
 800bd6a:	4631      	mov	r1, r6
 800bd6c:	4650      	mov	r0, sl
 800bd6e:	f7ff f9d6 	bl	800b11e <quorem>
 800bd72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bd76:	9b00      	ldr	r3, [sp, #0]
 800bd78:	f805 9b01 	strb.w	r9, [r5], #1
 800bd7c:	1aea      	subs	r2, r5, r3
 800bd7e:	9b01      	ldr	r3, [sp, #4]
 800bd80:	4293      	cmp	r3, r2
 800bd82:	dd07      	ble.n	800bd94 <_dtoa_r+0xb64>
 800bd84:	4651      	mov	r1, sl
 800bd86:	2300      	movs	r3, #0
 800bd88:	220a      	movs	r2, #10
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f000 f9a4 	bl	800c0d8 <__multadd>
 800bd90:	4682      	mov	sl, r0
 800bd92:	e7ea      	b.n	800bd6a <_dtoa_r+0xb3a>
 800bd94:	9b01      	ldr	r3, [sp, #4]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	bfc8      	it	gt
 800bd9a:	461d      	movgt	r5, r3
 800bd9c:	9b00      	ldr	r3, [sp, #0]
 800bd9e:	bfd8      	it	le
 800bda0:	2501      	movle	r5, #1
 800bda2:	441d      	add	r5, r3
 800bda4:	f04f 0800 	mov.w	r8, #0
 800bda8:	4651      	mov	r1, sl
 800bdaa:	2201      	movs	r2, #1
 800bdac:	4620      	mov	r0, r4
 800bdae:	f000 fb41 	bl	800c434 <__lshift>
 800bdb2:	4631      	mov	r1, r6
 800bdb4:	4682      	mov	sl, r0
 800bdb6:	f000 fba9 	bl	800c50c <__mcmp>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	dc96      	bgt.n	800bcec <_dtoa_r+0xabc>
 800bdbe:	d102      	bne.n	800bdc6 <_dtoa_r+0xb96>
 800bdc0:	f019 0f01 	tst.w	r9, #1
 800bdc4:	d192      	bne.n	800bcec <_dtoa_r+0xabc>
 800bdc6:	462b      	mov	r3, r5
 800bdc8:	461d      	mov	r5, r3
 800bdca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdce:	2a30      	cmp	r2, #48	; 0x30
 800bdd0:	d0fa      	beq.n	800bdc8 <_dtoa_r+0xb98>
 800bdd2:	e6dd      	b.n	800bb90 <_dtoa_r+0x960>
 800bdd4:	9a00      	ldr	r2, [sp, #0]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d189      	bne.n	800bcee <_dtoa_r+0xabe>
 800bdda:	f10b 0b01 	add.w	fp, fp, #1
 800bdde:	2331      	movs	r3, #49	; 0x31
 800bde0:	e796      	b.n	800bd10 <_dtoa_r+0xae0>
 800bde2:	4b0a      	ldr	r3, [pc, #40]	; (800be0c <_dtoa_r+0xbdc>)
 800bde4:	f7ff ba99 	b.w	800b31a <_dtoa_r+0xea>
 800bde8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	f47f aa6d 	bne.w	800b2ca <_dtoa_r+0x9a>
 800bdf0:	4b07      	ldr	r3, [pc, #28]	; (800be10 <_dtoa_r+0xbe0>)
 800bdf2:	f7ff ba92 	b.w	800b31a <_dtoa_r+0xea>
 800bdf6:	9b01      	ldr	r3, [sp, #4]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	dcb5      	bgt.n	800bd68 <_dtoa_r+0xb38>
 800bdfc:	9b07      	ldr	r3, [sp, #28]
 800bdfe:	2b02      	cmp	r3, #2
 800be00:	f73f aeb1 	bgt.w	800bb66 <_dtoa_r+0x936>
 800be04:	e7b0      	b.n	800bd68 <_dtoa_r+0xb38>
 800be06:	bf00      	nop
 800be08:	0800cfe8 	.word	0x0800cfe8
 800be0c:	0800cf48 	.word	0x0800cf48
 800be10:	0800cf6c 	.word	0x0800cf6c

0800be14 <_free_r>:
 800be14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be16:	2900      	cmp	r1, #0
 800be18:	d044      	beq.n	800bea4 <_free_r+0x90>
 800be1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be1e:	9001      	str	r0, [sp, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	f1a1 0404 	sub.w	r4, r1, #4
 800be26:	bfb8      	it	lt
 800be28:	18e4      	addlt	r4, r4, r3
 800be2a:	f000 f8e7 	bl	800bffc <__malloc_lock>
 800be2e:	4a1e      	ldr	r2, [pc, #120]	; (800bea8 <_free_r+0x94>)
 800be30:	9801      	ldr	r0, [sp, #4]
 800be32:	6813      	ldr	r3, [r2, #0]
 800be34:	b933      	cbnz	r3, 800be44 <_free_r+0x30>
 800be36:	6063      	str	r3, [r4, #4]
 800be38:	6014      	str	r4, [r2, #0]
 800be3a:	b003      	add	sp, #12
 800be3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be40:	f000 b8e2 	b.w	800c008 <__malloc_unlock>
 800be44:	42a3      	cmp	r3, r4
 800be46:	d908      	bls.n	800be5a <_free_r+0x46>
 800be48:	6825      	ldr	r5, [r4, #0]
 800be4a:	1961      	adds	r1, r4, r5
 800be4c:	428b      	cmp	r3, r1
 800be4e:	bf01      	itttt	eq
 800be50:	6819      	ldreq	r1, [r3, #0]
 800be52:	685b      	ldreq	r3, [r3, #4]
 800be54:	1949      	addeq	r1, r1, r5
 800be56:	6021      	streq	r1, [r4, #0]
 800be58:	e7ed      	b.n	800be36 <_free_r+0x22>
 800be5a:	461a      	mov	r2, r3
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	b10b      	cbz	r3, 800be64 <_free_r+0x50>
 800be60:	42a3      	cmp	r3, r4
 800be62:	d9fa      	bls.n	800be5a <_free_r+0x46>
 800be64:	6811      	ldr	r1, [r2, #0]
 800be66:	1855      	adds	r5, r2, r1
 800be68:	42a5      	cmp	r5, r4
 800be6a:	d10b      	bne.n	800be84 <_free_r+0x70>
 800be6c:	6824      	ldr	r4, [r4, #0]
 800be6e:	4421      	add	r1, r4
 800be70:	1854      	adds	r4, r2, r1
 800be72:	42a3      	cmp	r3, r4
 800be74:	6011      	str	r1, [r2, #0]
 800be76:	d1e0      	bne.n	800be3a <_free_r+0x26>
 800be78:	681c      	ldr	r4, [r3, #0]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	6053      	str	r3, [r2, #4]
 800be7e:	440c      	add	r4, r1
 800be80:	6014      	str	r4, [r2, #0]
 800be82:	e7da      	b.n	800be3a <_free_r+0x26>
 800be84:	d902      	bls.n	800be8c <_free_r+0x78>
 800be86:	230c      	movs	r3, #12
 800be88:	6003      	str	r3, [r0, #0]
 800be8a:	e7d6      	b.n	800be3a <_free_r+0x26>
 800be8c:	6825      	ldr	r5, [r4, #0]
 800be8e:	1961      	adds	r1, r4, r5
 800be90:	428b      	cmp	r3, r1
 800be92:	bf04      	itt	eq
 800be94:	6819      	ldreq	r1, [r3, #0]
 800be96:	685b      	ldreq	r3, [r3, #4]
 800be98:	6063      	str	r3, [r4, #4]
 800be9a:	bf04      	itt	eq
 800be9c:	1949      	addeq	r1, r1, r5
 800be9e:	6021      	streq	r1, [r4, #0]
 800bea0:	6054      	str	r4, [r2, #4]
 800bea2:	e7ca      	b.n	800be3a <_free_r+0x26>
 800bea4:	b003      	add	sp, #12
 800bea6:	bd30      	pop	{r4, r5, pc}
 800bea8:	200007e4 	.word	0x200007e4

0800beac <malloc>:
 800beac:	4b02      	ldr	r3, [pc, #8]	; (800beb8 <malloc+0xc>)
 800beae:	4601      	mov	r1, r0
 800beb0:	6818      	ldr	r0, [r3, #0]
 800beb2:	f000 b823 	b.w	800befc <_malloc_r>
 800beb6:	bf00      	nop
 800beb8:	2000006c 	.word	0x2000006c

0800bebc <sbrk_aligned>:
 800bebc:	b570      	push	{r4, r5, r6, lr}
 800bebe:	4e0e      	ldr	r6, [pc, #56]	; (800bef8 <sbrk_aligned+0x3c>)
 800bec0:	460c      	mov	r4, r1
 800bec2:	6831      	ldr	r1, [r6, #0]
 800bec4:	4605      	mov	r5, r0
 800bec6:	b911      	cbnz	r1, 800bece <sbrk_aligned+0x12>
 800bec8:	f000 fcce 	bl	800c868 <_sbrk_r>
 800becc:	6030      	str	r0, [r6, #0]
 800bece:	4621      	mov	r1, r4
 800bed0:	4628      	mov	r0, r5
 800bed2:	f000 fcc9 	bl	800c868 <_sbrk_r>
 800bed6:	1c43      	adds	r3, r0, #1
 800bed8:	d00a      	beq.n	800bef0 <sbrk_aligned+0x34>
 800beda:	1cc4      	adds	r4, r0, #3
 800bedc:	f024 0403 	bic.w	r4, r4, #3
 800bee0:	42a0      	cmp	r0, r4
 800bee2:	d007      	beq.n	800bef4 <sbrk_aligned+0x38>
 800bee4:	1a21      	subs	r1, r4, r0
 800bee6:	4628      	mov	r0, r5
 800bee8:	f000 fcbe 	bl	800c868 <_sbrk_r>
 800beec:	3001      	adds	r0, #1
 800beee:	d101      	bne.n	800bef4 <sbrk_aligned+0x38>
 800bef0:	f04f 34ff 	mov.w	r4, #4294967295
 800bef4:	4620      	mov	r0, r4
 800bef6:	bd70      	pop	{r4, r5, r6, pc}
 800bef8:	200007e8 	.word	0x200007e8

0800befc <_malloc_r>:
 800befc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf00:	1ccd      	adds	r5, r1, #3
 800bf02:	f025 0503 	bic.w	r5, r5, #3
 800bf06:	3508      	adds	r5, #8
 800bf08:	2d0c      	cmp	r5, #12
 800bf0a:	bf38      	it	cc
 800bf0c:	250c      	movcc	r5, #12
 800bf0e:	2d00      	cmp	r5, #0
 800bf10:	4607      	mov	r7, r0
 800bf12:	db01      	blt.n	800bf18 <_malloc_r+0x1c>
 800bf14:	42a9      	cmp	r1, r5
 800bf16:	d905      	bls.n	800bf24 <_malloc_r+0x28>
 800bf18:	230c      	movs	r3, #12
 800bf1a:	603b      	str	r3, [r7, #0]
 800bf1c:	2600      	movs	r6, #0
 800bf1e:	4630      	mov	r0, r6
 800bf20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bff8 <_malloc_r+0xfc>
 800bf28:	f000 f868 	bl	800bffc <__malloc_lock>
 800bf2c:	f8d8 3000 	ldr.w	r3, [r8]
 800bf30:	461c      	mov	r4, r3
 800bf32:	bb5c      	cbnz	r4, 800bf8c <_malloc_r+0x90>
 800bf34:	4629      	mov	r1, r5
 800bf36:	4638      	mov	r0, r7
 800bf38:	f7ff ffc0 	bl	800bebc <sbrk_aligned>
 800bf3c:	1c43      	adds	r3, r0, #1
 800bf3e:	4604      	mov	r4, r0
 800bf40:	d155      	bne.n	800bfee <_malloc_r+0xf2>
 800bf42:	f8d8 4000 	ldr.w	r4, [r8]
 800bf46:	4626      	mov	r6, r4
 800bf48:	2e00      	cmp	r6, #0
 800bf4a:	d145      	bne.n	800bfd8 <_malloc_r+0xdc>
 800bf4c:	2c00      	cmp	r4, #0
 800bf4e:	d048      	beq.n	800bfe2 <_malloc_r+0xe6>
 800bf50:	6823      	ldr	r3, [r4, #0]
 800bf52:	4631      	mov	r1, r6
 800bf54:	4638      	mov	r0, r7
 800bf56:	eb04 0903 	add.w	r9, r4, r3
 800bf5a:	f000 fc85 	bl	800c868 <_sbrk_r>
 800bf5e:	4581      	cmp	r9, r0
 800bf60:	d13f      	bne.n	800bfe2 <_malloc_r+0xe6>
 800bf62:	6821      	ldr	r1, [r4, #0]
 800bf64:	1a6d      	subs	r5, r5, r1
 800bf66:	4629      	mov	r1, r5
 800bf68:	4638      	mov	r0, r7
 800bf6a:	f7ff ffa7 	bl	800bebc <sbrk_aligned>
 800bf6e:	3001      	adds	r0, #1
 800bf70:	d037      	beq.n	800bfe2 <_malloc_r+0xe6>
 800bf72:	6823      	ldr	r3, [r4, #0]
 800bf74:	442b      	add	r3, r5
 800bf76:	6023      	str	r3, [r4, #0]
 800bf78:	f8d8 3000 	ldr.w	r3, [r8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d038      	beq.n	800bff2 <_malloc_r+0xf6>
 800bf80:	685a      	ldr	r2, [r3, #4]
 800bf82:	42a2      	cmp	r2, r4
 800bf84:	d12b      	bne.n	800bfde <_malloc_r+0xe2>
 800bf86:	2200      	movs	r2, #0
 800bf88:	605a      	str	r2, [r3, #4]
 800bf8a:	e00f      	b.n	800bfac <_malloc_r+0xb0>
 800bf8c:	6822      	ldr	r2, [r4, #0]
 800bf8e:	1b52      	subs	r2, r2, r5
 800bf90:	d41f      	bmi.n	800bfd2 <_malloc_r+0xd6>
 800bf92:	2a0b      	cmp	r2, #11
 800bf94:	d917      	bls.n	800bfc6 <_malloc_r+0xca>
 800bf96:	1961      	adds	r1, r4, r5
 800bf98:	42a3      	cmp	r3, r4
 800bf9a:	6025      	str	r5, [r4, #0]
 800bf9c:	bf18      	it	ne
 800bf9e:	6059      	strne	r1, [r3, #4]
 800bfa0:	6863      	ldr	r3, [r4, #4]
 800bfa2:	bf08      	it	eq
 800bfa4:	f8c8 1000 	streq.w	r1, [r8]
 800bfa8:	5162      	str	r2, [r4, r5]
 800bfaa:	604b      	str	r3, [r1, #4]
 800bfac:	4638      	mov	r0, r7
 800bfae:	f104 060b 	add.w	r6, r4, #11
 800bfb2:	f000 f829 	bl	800c008 <__malloc_unlock>
 800bfb6:	f026 0607 	bic.w	r6, r6, #7
 800bfba:	1d23      	adds	r3, r4, #4
 800bfbc:	1af2      	subs	r2, r6, r3
 800bfbe:	d0ae      	beq.n	800bf1e <_malloc_r+0x22>
 800bfc0:	1b9b      	subs	r3, r3, r6
 800bfc2:	50a3      	str	r3, [r4, r2]
 800bfc4:	e7ab      	b.n	800bf1e <_malloc_r+0x22>
 800bfc6:	42a3      	cmp	r3, r4
 800bfc8:	6862      	ldr	r2, [r4, #4]
 800bfca:	d1dd      	bne.n	800bf88 <_malloc_r+0x8c>
 800bfcc:	f8c8 2000 	str.w	r2, [r8]
 800bfd0:	e7ec      	b.n	800bfac <_malloc_r+0xb0>
 800bfd2:	4623      	mov	r3, r4
 800bfd4:	6864      	ldr	r4, [r4, #4]
 800bfd6:	e7ac      	b.n	800bf32 <_malloc_r+0x36>
 800bfd8:	4634      	mov	r4, r6
 800bfda:	6876      	ldr	r6, [r6, #4]
 800bfdc:	e7b4      	b.n	800bf48 <_malloc_r+0x4c>
 800bfde:	4613      	mov	r3, r2
 800bfe0:	e7cc      	b.n	800bf7c <_malloc_r+0x80>
 800bfe2:	230c      	movs	r3, #12
 800bfe4:	603b      	str	r3, [r7, #0]
 800bfe6:	4638      	mov	r0, r7
 800bfe8:	f000 f80e 	bl	800c008 <__malloc_unlock>
 800bfec:	e797      	b.n	800bf1e <_malloc_r+0x22>
 800bfee:	6025      	str	r5, [r4, #0]
 800bff0:	e7dc      	b.n	800bfac <_malloc_r+0xb0>
 800bff2:	605b      	str	r3, [r3, #4]
 800bff4:	deff      	udf	#255	; 0xff
 800bff6:	bf00      	nop
 800bff8:	200007e4 	.word	0x200007e4

0800bffc <__malloc_lock>:
 800bffc:	4801      	ldr	r0, [pc, #4]	; (800c004 <__malloc_lock+0x8>)
 800bffe:	f7ff b87e 	b.w	800b0fe <__retarget_lock_acquire_recursive>
 800c002:	bf00      	nop
 800c004:	200007e0 	.word	0x200007e0

0800c008 <__malloc_unlock>:
 800c008:	4801      	ldr	r0, [pc, #4]	; (800c010 <__malloc_unlock+0x8>)
 800c00a:	f7ff b879 	b.w	800b100 <__retarget_lock_release_recursive>
 800c00e:	bf00      	nop
 800c010:	200007e0 	.word	0x200007e0

0800c014 <_Balloc>:
 800c014:	b570      	push	{r4, r5, r6, lr}
 800c016:	69c6      	ldr	r6, [r0, #28]
 800c018:	4604      	mov	r4, r0
 800c01a:	460d      	mov	r5, r1
 800c01c:	b976      	cbnz	r6, 800c03c <_Balloc+0x28>
 800c01e:	2010      	movs	r0, #16
 800c020:	f7ff ff44 	bl	800beac <malloc>
 800c024:	4602      	mov	r2, r0
 800c026:	61e0      	str	r0, [r4, #28]
 800c028:	b920      	cbnz	r0, 800c034 <_Balloc+0x20>
 800c02a:	4b18      	ldr	r3, [pc, #96]	; (800c08c <_Balloc+0x78>)
 800c02c:	4818      	ldr	r0, [pc, #96]	; (800c090 <_Balloc+0x7c>)
 800c02e:	216b      	movs	r1, #107	; 0x6b
 800c030:	f000 fc2a 	bl	800c888 <__assert_func>
 800c034:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c038:	6006      	str	r6, [r0, #0]
 800c03a:	60c6      	str	r6, [r0, #12]
 800c03c:	69e6      	ldr	r6, [r4, #28]
 800c03e:	68f3      	ldr	r3, [r6, #12]
 800c040:	b183      	cbz	r3, 800c064 <_Balloc+0x50>
 800c042:	69e3      	ldr	r3, [r4, #28]
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c04a:	b9b8      	cbnz	r0, 800c07c <_Balloc+0x68>
 800c04c:	2101      	movs	r1, #1
 800c04e:	fa01 f605 	lsl.w	r6, r1, r5
 800c052:	1d72      	adds	r2, r6, #5
 800c054:	0092      	lsls	r2, r2, #2
 800c056:	4620      	mov	r0, r4
 800c058:	f000 fc34 	bl	800c8c4 <_calloc_r>
 800c05c:	b160      	cbz	r0, 800c078 <_Balloc+0x64>
 800c05e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c062:	e00e      	b.n	800c082 <_Balloc+0x6e>
 800c064:	2221      	movs	r2, #33	; 0x21
 800c066:	2104      	movs	r1, #4
 800c068:	4620      	mov	r0, r4
 800c06a:	f000 fc2b 	bl	800c8c4 <_calloc_r>
 800c06e:	69e3      	ldr	r3, [r4, #28]
 800c070:	60f0      	str	r0, [r6, #12]
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d1e4      	bne.n	800c042 <_Balloc+0x2e>
 800c078:	2000      	movs	r0, #0
 800c07a:	bd70      	pop	{r4, r5, r6, pc}
 800c07c:	6802      	ldr	r2, [r0, #0]
 800c07e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c082:	2300      	movs	r3, #0
 800c084:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c088:	e7f7      	b.n	800c07a <_Balloc+0x66>
 800c08a:	bf00      	nop
 800c08c:	0800cf79 	.word	0x0800cf79
 800c090:	0800cff9 	.word	0x0800cff9

0800c094 <_Bfree>:
 800c094:	b570      	push	{r4, r5, r6, lr}
 800c096:	69c6      	ldr	r6, [r0, #28]
 800c098:	4605      	mov	r5, r0
 800c09a:	460c      	mov	r4, r1
 800c09c:	b976      	cbnz	r6, 800c0bc <_Bfree+0x28>
 800c09e:	2010      	movs	r0, #16
 800c0a0:	f7ff ff04 	bl	800beac <malloc>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	61e8      	str	r0, [r5, #28]
 800c0a8:	b920      	cbnz	r0, 800c0b4 <_Bfree+0x20>
 800c0aa:	4b09      	ldr	r3, [pc, #36]	; (800c0d0 <_Bfree+0x3c>)
 800c0ac:	4809      	ldr	r0, [pc, #36]	; (800c0d4 <_Bfree+0x40>)
 800c0ae:	218f      	movs	r1, #143	; 0x8f
 800c0b0:	f000 fbea 	bl	800c888 <__assert_func>
 800c0b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0b8:	6006      	str	r6, [r0, #0]
 800c0ba:	60c6      	str	r6, [r0, #12]
 800c0bc:	b13c      	cbz	r4, 800c0ce <_Bfree+0x3a>
 800c0be:	69eb      	ldr	r3, [r5, #28]
 800c0c0:	6862      	ldr	r2, [r4, #4]
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0c8:	6021      	str	r1, [r4, #0]
 800c0ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c0ce:	bd70      	pop	{r4, r5, r6, pc}
 800c0d0:	0800cf79 	.word	0x0800cf79
 800c0d4:	0800cff9 	.word	0x0800cff9

0800c0d8 <__multadd>:
 800c0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0dc:	690d      	ldr	r5, [r1, #16]
 800c0de:	4607      	mov	r7, r0
 800c0e0:	460c      	mov	r4, r1
 800c0e2:	461e      	mov	r6, r3
 800c0e4:	f101 0c14 	add.w	ip, r1, #20
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	f8dc 3000 	ldr.w	r3, [ip]
 800c0ee:	b299      	uxth	r1, r3
 800c0f0:	fb02 6101 	mla	r1, r2, r1, r6
 800c0f4:	0c1e      	lsrs	r6, r3, #16
 800c0f6:	0c0b      	lsrs	r3, r1, #16
 800c0f8:	fb02 3306 	mla	r3, r2, r6, r3
 800c0fc:	b289      	uxth	r1, r1
 800c0fe:	3001      	adds	r0, #1
 800c100:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c104:	4285      	cmp	r5, r0
 800c106:	f84c 1b04 	str.w	r1, [ip], #4
 800c10a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c10e:	dcec      	bgt.n	800c0ea <__multadd+0x12>
 800c110:	b30e      	cbz	r6, 800c156 <__multadd+0x7e>
 800c112:	68a3      	ldr	r3, [r4, #8]
 800c114:	42ab      	cmp	r3, r5
 800c116:	dc19      	bgt.n	800c14c <__multadd+0x74>
 800c118:	6861      	ldr	r1, [r4, #4]
 800c11a:	4638      	mov	r0, r7
 800c11c:	3101      	adds	r1, #1
 800c11e:	f7ff ff79 	bl	800c014 <_Balloc>
 800c122:	4680      	mov	r8, r0
 800c124:	b928      	cbnz	r0, 800c132 <__multadd+0x5a>
 800c126:	4602      	mov	r2, r0
 800c128:	4b0c      	ldr	r3, [pc, #48]	; (800c15c <__multadd+0x84>)
 800c12a:	480d      	ldr	r0, [pc, #52]	; (800c160 <__multadd+0x88>)
 800c12c:	21ba      	movs	r1, #186	; 0xba
 800c12e:	f000 fbab 	bl	800c888 <__assert_func>
 800c132:	6922      	ldr	r2, [r4, #16]
 800c134:	3202      	adds	r2, #2
 800c136:	f104 010c 	add.w	r1, r4, #12
 800c13a:	0092      	lsls	r2, r2, #2
 800c13c:	300c      	adds	r0, #12
 800c13e:	f7fe ffe0 	bl	800b102 <memcpy>
 800c142:	4621      	mov	r1, r4
 800c144:	4638      	mov	r0, r7
 800c146:	f7ff ffa5 	bl	800c094 <_Bfree>
 800c14a:	4644      	mov	r4, r8
 800c14c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c150:	3501      	adds	r5, #1
 800c152:	615e      	str	r6, [r3, #20]
 800c154:	6125      	str	r5, [r4, #16]
 800c156:	4620      	mov	r0, r4
 800c158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c15c:	0800cfe8 	.word	0x0800cfe8
 800c160:	0800cff9 	.word	0x0800cff9

0800c164 <__hi0bits>:
 800c164:	0c03      	lsrs	r3, r0, #16
 800c166:	041b      	lsls	r3, r3, #16
 800c168:	b9d3      	cbnz	r3, 800c1a0 <__hi0bits+0x3c>
 800c16a:	0400      	lsls	r0, r0, #16
 800c16c:	2310      	movs	r3, #16
 800c16e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c172:	bf04      	itt	eq
 800c174:	0200      	lsleq	r0, r0, #8
 800c176:	3308      	addeq	r3, #8
 800c178:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c17c:	bf04      	itt	eq
 800c17e:	0100      	lsleq	r0, r0, #4
 800c180:	3304      	addeq	r3, #4
 800c182:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c186:	bf04      	itt	eq
 800c188:	0080      	lsleq	r0, r0, #2
 800c18a:	3302      	addeq	r3, #2
 800c18c:	2800      	cmp	r0, #0
 800c18e:	db05      	blt.n	800c19c <__hi0bits+0x38>
 800c190:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c194:	f103 0301 	add.w	r3, r3, #1
 800c198:	bf08      	it	eq
 800c19a:	2320      	moveq	r3, #32
 800c19c:	4618      	mov	r0, r3
 800c19e:	4770      	bx	lr
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	e7e4      	b.n	800c16e <__hi0bits+0xa>

0800c1a4 <__lo0bits>:
 800c1a4:	6803      	ldr	r3, [r0, #0]
 800c1a6:	f013 0207 	ands.w	r2, r3, #7
 800c1aa:	d00c      	beq.n	800c1c6 <__lo0bits+0x22>
 800c1ac:	07d9      	lsls	r1, r3, #31
 800c1ae:	d422      	bmi.n	800c1f6 <__lo0bits+0x52>
 800c1b0:	079a      	lsls	r2, r3, #30
 800c1b2:	bf49      	itett	mi
 800c1b4:	085b      	lsrmi	r3, r3, #1
 800c1b6:	089b      	lsrpl	r3, r3, #2
 800c1b8:	6003      	strmi	r3, [r0, #0]
 800c1ba:	2201      	movmi	r2, #1
 800c1bc:	bf5c      	itt	pl
 800c1be:	6003      	strpl	r3, [r0, #0]
 800c1c0:	2202      	movpl	r2, #2
 800c1c2:	4610      	mov	r0, r2
 800c1c4:	4770      	bx	lr
 800c1c6:	b299      	uxth	r1, r3
 800c1c8:	b909      	cbnz	r1, 800c1ce <__lo0bits+0x2a>
 800c1ca:	0c1b      	lsrs	r3, r3, #16
 800c1cc:	2210      	movs	r2, #16
 800c1ce:	b2d9      	uxtb	r1, r3
 800c1d0:	b909      	cbnz	r1, 800c1d6 <__lo0bits+0x32>
 800c1d2:	3208      	adds	r2, #8
 800c1d4:	0a1b      	lsrs	r3, r3, #8
 800c1d6:	0719      	lsls	r1, r3, #28
 800c1d8:	bf04      	itt	eq
 800c1da:	091b      	lsreq	r3, r3, #4
 800c1dc:	3204      	addeq	r2, #4
 800c1de:	0799      	lsls	r1, r3, #30
 800c1e0:	bf04      	itt	eq
 800c1e2:	089b      	lsreq	r3, r3, #2
 800c1e4:	3202      	addeq	r2, #2
 800c1e6:	07d9      	lsls	r1, r3, #31
 800c1e8:	d403      	bmi.n	800c1f2 <__lo0bits+0x4e>
 800c1ea:	085b      	lsrs	r3, r3, #1
 800c1ec:	f102 0201 	add.w	r2, r2, #1
 800c1f0:	d003      	beq.n	800c1fa <__lo0bits+0x56>
 800c1f2:	6003      	str	r3, [r0, #0]
 800c1f4:	e7e5      	b.n	800c1c2 <__lo0bits+0x1e>
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	e7e3      	b.n	800c1c2 <__lo0bits+0x1e>
 800c1fa:	2220      	movs	r2, #32
 800c1fc:	e7e1      	b.n	800c1c2 <__lo0bits+0x1e>
	...

0800c200 <__i2b>:
 800c200:	b510      	push	{r4, lr}
 800c202:	460c      	mov	r4, r1
 800c204:	2101      	movs	r1, #1
 800c206:	f7ff ff05 	bl	800c014 <_Balloc>
 800c20a:	4602      	mov	r2, r0
 800c20c:	b928      	cbnz	r0, 800c21a <__i2b+0x1a>
 800c20e:	4b05      	ldr	r3, [pc, #20]	; (800c224 <__i2b+0x24>)
 800c210:	4805      	ldr	r0, [pc, #20]	; (800c228 <__i2b+0x28>)
 800c212:	f240 1145 	movw	r1, #325	; 0x145
 800c216:	f000 fb37 	bl	800c888 <__assert_func>
 800c21a:	2301      	movs	r3, #1
 800c21c:	6144      	str	r4, [r0, #20]
 800c21e:	6103      	str	r3, [r0, #16]
 800c220:	bd10      	pop	{r4, pc}
 800c222:	bf00      	nop
 800c224:	0800cfe8 	.word	0x0800cfe8
 800c228:	0800cff9 	.word	0x0800cff9

0800c22c <__multiply>:
 800c22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c230:	4691      	mov	r9, r2
 800c232:	690a      	ldr	r2, [r1, #16]
 800c234:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c238:	429a      	cmp	r2, r3
 800c23a:	bfb8      	it	lt
 800c23c:	460b      	movlt	r3, r1
 800c23e:	460c      	mov	r4, r1
 800c240:	bfbc      	itt	lt
 800c242:	464c      	movlt	r4, r9
 800c244:	4699      	movlt	r9, r3
 800c246:	6927      	ldr	r7, [r4, #16]
 800c248:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c24c:	68a3      	ldr	r3, [r4, #8]
 800c24e:	6861      	ldr	r1, [r4, #4]
 800c250:	eb07 060a 	add.w	r6, r7, sl
 800c254:	42b3      	cmp	r3, r6
 800c256:	b085      	sub	sp, #20
 800c258:	bfb8      	it	lt
 800c25a:	3101      	addlt	r1, #1
 800c25c:	f7ff feda 	bl	800c014 <_Balloc>
 800c260:	b930      	cbnz	r0, 800c270 <__multiply+0x44>
 800c262:	4602      	mov	r2, r0
 800c264:	4b44      	ldr	r3, [pc, #272]	; (800c378 <__multiply+0x14c>)
 800c266:	4845      	ldr	r0, [pc, #276]	; (800c37c <__multiply+0x150>)
 800c268:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c26c:	f000 fb0c 	bl	800c888 <__assert_func>
 800c270:	f100 0514 	add.w	r5, r0, #20
 800c274:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c278:	462b      	mov	r3, r5
 800c27a:	2200      	movs	r2, #0
 800c27c:	4543      	cmp	r3, r8
 800c27e:	d321      	bcc.n	800c2c4 <__multiply+0x98>
 800c280:	f104 0314 	add.w	r3, r4, #20
 800c284:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c288:	f109 0314 	add.w	r3, r9, #20
 800c28c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c290:	9202      	str	r2, [sp, #8]
 800c292:	1b3a      	subs	r2, r7, r4
 800c294:	3a15      	subs	r2, #21
 800c296:	f022 0203 	bic.w	r2, r2, #3
 800c29a:	3204      	adds	r2, #4
 800c29c:	f104 0115 	add.w	r1, r4, #21
 800c2a0:	428f      	cmp	r7, r1
 800c2a2:	bf38      	it	cc
 800c2a4:	2204      	movcc	r2, #4
 800c2a6:	9201      	str	r2, [sp, #4]
 800c2a8:	9a02      	ldr	r2, [sp, #8]
 800c2aa:	9303      	str	r3, [sp, #12]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d80c      	bhi.n	800c2ca <__multiply+0x9e>
 800c2b0:	2e00      	cmp	r6, #0
 800c2b2:	dd03      	ble.n	800c2bc <__multiply+0x90>
 800c2b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d05b      	beq.n	800c374 <__multiply+0x148>
 800c2bc:	6106      	str	r6, [r0, #16]
 800c2be:	b005      	add	sp, #20
 800c2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2c4:	f843 2b04 	str.w	r2, [r3], #4
 800c2c8:	e7d8      	b.n	800c27c <__multiply+0x50>
 800c2ca:	f8b3 a000 	ldrh.w	sl, [r3]
 800c2ce:	f1ba 0f00 	cmp.w	sl, #0
 800c2d2:	d024      	beq.n	800c31e <__multiply+0xf2>
 800c2d4:	f104 0e14 	add.w	lr, r4, #20
 800c2d8:	46a9      	mov	r9, r5
 800c2da:	f04f 0c00 	mov.w	ip, #0
 800c2de:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c2e2:	f8d9 1000 	ldr.w	r1, [r9]
 800c2e6:	fa1f fb82 	uxth.w	fp, r2
 800c2ea:	b289      	uxth	r1, r1
 800c2ec:	fb0a 110b 	mla	r1, sl, fp, r1
 800c2f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c2f4:	f8d9 2000 	ldr.w	r2, [r9]
 800c2f8:	4461      	add	r1, ip
 800c2fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c2fe:	fb0a c20b 	mla	r2, sl, fp, ip
 800c302:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c306:	b289      	uxth	r1, r1
 800c308:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c30c:	4577      	cmp	r7, lr
 800c30e:	f849 1b04 	str.w	r1, [r9], #4
 800c312:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c316:	d8e2      	bhi.n	800c2de <__multiply+0xb2>
 800c318:	9a01      	ldr	r2, [sp, #4]
 800c31a:	f845 c002 	str.w	ip, [r5, r2]
 800c31e:	9a03      	ldr	r2, [sp, #12]
 800c320:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c324:	3304      	adds	r3, #4
 800c326:	f1b9 0f00 	cmp.w	r9, #0
 800c32a:	d021      	beq.n	800c370 <__multiply+0x144>
 800c32c:	6829      	ldr	r1, [r5, #0]
 800c32e:	f104 0c14 	add.w	ip, r4, #20
 800c332:	46ae      	mov	lr, r5
 800c334:	f04f 0a00 	mov.w	sl, #0
 800c338:	f8bc b000 	ldrh.w	fp, [ip]
 800c33c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c340:	fb09 220b 	mla	r2, r9, fp, r2
 800c344:	4452      	add	r2, sl
 800c346:	b289      	uxth	r1, r1
 800c348:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c34c:	f84e 1b04 	str.w	r1, [lr], #4
 800c350:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c354:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c358:	f8be 1000 	ldrh.w	r1, [lr]
 800c35c:	fb09 110a 	mla	r1, r9, sl, r1
 800c360:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c364:	4567      	cmp	r7, ip
 800c366:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c36a:	d8e5      	bhi.n	800c338 <__multiply+0x10c>
 800c36c:	9a01      	ldr	r2, [sp, #4]
 800c36e:	50a9      	str	r1, [r5, r2]
 800c370:	3504      	adds	r5, #4
 800c372:	e799      	b.n	800c2a8 <__multiply+0x7c>
 800c374:	3e01      	subs	r6, #1
 800c376:	e79b      	b.n	800c2b0 <__multiply+0x84>
 800c378:	0800cfe8 	.word	0x0800cfe8
 800c37c:	0800cff9 	.word	0x0800cff9

0800c380 <__pow5mult>:
 800c380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c384:	4615      	mov	r5, r2
 800c386:	f012 0203 	ands.w	r2, r2, #3
 800c38a:	4606      	mov	r6, r0
 800c38c:	460f      	mov	r7, r1
 800c38e:	d007      	beq.n	800c3a0 <__pow5mult+0x20>
 800c390:	4c25      	ldr	r4, [pc, #148]	; (800c428 <__pow5mult+0xa8>)
 800c392:	3a01      	subs	r2, #1
 800c394:	2300      	movs	r3, #0
 800c396:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c39a:	f7ff fe9d 	bl	800c0d8 <__multadd>
 800c39e:	4607      	mov	r7, r0
 800c3a0:	10ad      	asrs	r5, r5, #2
 800c3a2:	d03d      	beq.n	800c420 <__pow5mult+0xa0>
 800c3a4:	69f4      	ldr	r4, [r6, #28]
 800c3a6:	b97c      	cbnz	r4, 800c3c8 <__pow5mult+0x48>
 800c3a8:	2010      	movs	r0, #16
 800c3aa:	f7ff fd7f 	bl	800beac <malloc>
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	61f0      	str	r0, [r6, #28]
 800c3b2:	b928      	cbnz	r0, 800c3c0 <__pow5mult+0x40>
 800c3b4:	4b1d      	ldr	r3, [pc, #116]	; (800c42c <__pow5mult+0xac>)
 800c3b6:	481e      	ldr	r0, [pc, #120]	; (800c430 <__pow5mult+0xb0>)
 800c3b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c3bc:	f000 fa64 	bl	800c888 <__assert_func>
 800c3c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3c4:	6004      	str	r4, [r0, #0]
 800c3c6:	60c4      	str	r4, [r0, #12]
 800c3c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c3cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c3d0:	b94c      	cbnz	r4, 800c3e6 <__pow5mult+0x66>
 800c3d2:	f240 2171 	movw	r1, #625	; 0x271
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	f7ff ff12 	bl	800c200 <__i2b>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	f8c8 0008 	str.w	r0, [r8, #8]
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	6003      	str	r3, [r0, #0]
 800c3e6:	f04f 0900 	mov.w	r9, #0
 800c3ea:	07eb      	lsls	r3, r5, #31
 800c3ec:	d50a      	bpl.n	800c404 <__pow5mult+0x84>
 800c3ee:	4639      	mov	r1, r7
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	4630      	mov	r0, r6
 800c3f4:	f7ff ff1a 	bl	800c22c <__multiply>
 800c3f8:	4639      	mov	r1, r7
 800c3fa:	4680      	mov	r8, r0
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	f7ff fe49 	bl	800c094 <_Bfree>
 800c402:	4647      	mov	r7, r8
 800c404:	106d      	asrs	r5, r5, #1
 800c406:	d00b      	beq.n	800c420 <__pow5mult+0xa0>
 800c408:	6820      	ldr	r0, [r4, #0]
 800c40a:	b938      	cbnz	r0, 800c41c <__pow5mult+0x9c>
 800c40c:	4622      	mov	r2, r4
 800c40e:	4621      	mov	r1, r4
 800c410:	4630      	mov	r0, r6
 800c412:	f7ff ff0b 	bl	800c22c <__multiply>
 800c416:	6020      	str	r0, [r4, #0]
 800c418:	f8c0 9000 	str.w	r9, [r0]
 800c41c:	4604      	mov	r4, r0
 800c41e:	e7e4      	b.n	800c3ea <__pow5mult+0x6a>
 800c420:	4638      	mov	r0, r7
 800c422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c426:	bf00      	nop
 800c428:	0800d148 	.word	0x0800d148
 800c42c:	0800cf79 	.word	0x0800cf79
 800c430:	0800cff9 	.word	0x0800cff9

0800c434 <__lshift>:
 800c434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c438:	460c      	mov	r4, r1
 800c43a:	6849      	ldr	r1, [r1, #4]
 800c43c:	6923      	ldr	r3, [r4, #16]
 800c43e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c442:	68a3      	ldr	r3, [r4, #8]
 800c444:	4607      	mov	r7, r0
 800c446:	4691      	mov	r9, r2
 800c448:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c44c:	f108 0601 	add.w	r6, r8, #1
 800c450:	42b3      	cmp	r3, r6
 800c452:	db0b      	blt.n	800c46c <__lshift+0x38>
 800c454:	4638      	mov	r0, r7
 800c456:	f7ff fddd 	bl	800c014 <_Balloc>
 800c45a:	4605      	mov	r5, r0
 800c45c:	b948      	cbnz	r0, 800c472 <__lshift+0x3e>
 800c45e:	4602      	mov	r2, r0
 800c460:	4b28      	ldr	r3, [pc, #160]	; (800c504 <__lshift+0xd0>)
 800c462:	4829      	ldr	r0, [pc, #164]	; (800c508 <__lshift+0xd4>)
 800c464:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c468:	f000 fa0e 	bl	800c888 <__assert_func>
 800c46c:	3101      	adds	r1, #1
 800c46e:	005b      	lsls	r3, r3, #1
 800c470:	e7ee      	b.n	800c450 <__lshift+0x1c>
 800c472:	2300      	movs	r3, #0
 800c474:	f100 0114 	add.w	r1, r0, #20
 800c478:	f100 0210 	add.w	r2, r0, #16
 800c47c:	4618      	mov	r0, r3
 800c47e:	4553      	cmp	r3, sl
 800c480:	db33      	blt.n	800c4ea <__lshift+0xb6>
 800c482:	6920      	ldr	r0, [r4, #16]
 800c484:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c488:	f104 0314 	add.w	r3, r4, #20
 800c48c:	f019 091f 	ands.w	r9, r9, #31
 800c490:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c494:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c498:	d02b      	beq.n	800c4f2 <__lshift+0xbe>
 800c49a:	f1c9 0e20 	rsb	lr, r9, #32
 800c49e:	468a      	mov	sl, r1
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	6818      	ldr	r0, [r3, #0]
 800c4a4:	fa00 f009 	lsl.w	r0, r0, r9
 800c4a8:	4310      	orrs	r0, r2
 800c4aa:	f84a 0b04 	str.w	r0, [sl], #4
 800c4ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4b2:	459c      	cmp	ip, r3
 800c4b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c4b8:	d8f3      	bhi.n	800c4a2 <__lshift+0x6e>
 800c4ba:	ebac 0304 	sub.w	r3, ip, r4
 800c4be:	3b15      	subs	r3, #21
 800c4c0:	f023 0303 	bic.w	r3, r3, #3
 800c4c4:	3304      	adds	r3, #4
 800c4c6:	f104 0015 	add.w	r0, r4, #21
 800c4ca:	4584      	cmp	ip, r0
 800c4cc:	bf38      	it	cc
 800c4ce:	2304      	movcc	r3, #4
 800c4d0:	50ca      	str	r2, [r1, r3]
 800c4d2:	b10a      	cbz	r2, 800c4d8 <__lshift+0xa4>
 800c4d4:	f108 0602 	add.w	r6, r8, #2
 800c4d8:	3e01      	subs	r6, #1
 800c4da:	4638      	mov	r0, r7
 800c4dc:	612e      	str	r6, [r5, #16]
 800c4de:	4621      	mov	r1, r4
 800c4e0:	f7ff fdd8 	bl	800c094 <_Bfree>
 800c4e4:	4628      	mov	r0, r5
 800c4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	e7c5      	b.n	800c47e <__lshift+0x4a>
 800c4f2:	3904      	subs	r1, #4
 800c4f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c4fc:	459c      	cmp	ip, r3
 800c4fe:	d8f9      	bhi.n	800c4f4 <__lshift+0xc0>
 800c500:	e7ea      	b.n	800c4d8 <__lshift+0xa4>
 800c502:	bf00      	nop
 800c504:	0800cfe8 	.word	0x0800cfe8
 800c508:	0800cff9 	.word	0x0800cff9

0800c50c <__mcmp>:
 800c50c:	b530      	push	{r4, r5, lr}
 800c50e:	6902      	ldr	r2, [r0, #16]
 800c510:	690c      	ldr	r4, [r1, #16]
 800c512:	1b12      	subs	r2, r2, r4
 800c514:	d10e      	bne.n	800c534 <__mcmp+0x28>
 800c516:	f100 0314 	add.w	r3, r0, #20
 800c51a:	3114      	adds	r1, #20
 800c51c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c520:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c524:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c528:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c52c:	42a5      	cmp	r5, r4
 800c52e:	d003      	beq.n	800c538 <__mcmp+0x2c>
 800c530:	d305      	bcc.n	800c53e <__mcmp+0x32>
 800c532:	2201      	movs	r2, #1
 800c534:	4610      	mov	r0, r2
 800c536:	bd30      	pop	{r4, r5, pc}
 800c538:	4283      	cmp	r3, r0
 800c53a:	d3f3      	bcc.n	800c524 <__mcmp+0x18>
 800c53c:	e7fa      	b.n	800c534 <__mcmp+0x28>
 800c53e:	f04f 32ff 	mov.w	r2, #4294967295
 800c542:	e7f7      	b.n	800c534 <__mcmp+0x28>

0800c544 <__mdiff>:
 800c544:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c548:	460c      	mov	r4, r1
 800c54a:	4606      	mov	r6, r0
 800c54c:	4611      	mov	r1, r2
 800c54e:	4620      	mov	r0, r4
 800c550:	4690      	mov	r8, r2
 800c552:	f7ff ffdb 	bl	800c50c <__mcmp>
 800c556:	1e05      	subs	r5, r0, #0
 800c558:	d110      	bne.n	800c57c <__mdiff+0x38>
 800c55a:	4629      	mov	r1, r5
 800c55c:	4630      	mov	r0, r6
 800c55e:	f7ff fd59 	bl	800c014 <_Balloc>
 800c562:	b930      	cbnz	r0, 800c572 <__mdiff+0x2e>
 800c564:	4b3a      	ldr	r3, [pc, #232]	; (800c650 <__mdiff+0x10c>)
 800c566:	4602      	mov	r2, r0
 800c568:	f240 2137 	movw	r1, #567	; 0x237
 800c56c:	4839      	ldr	r0, [pc, #228]	; (800c654 <__mdiff+0x110>)
 800c56e:	f000 f98b 	bl	800c888 <__assert_func>
 800c572:	2301      	movs	r3, #1
 800c574:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c57c:	bfa4      	itt	ge
 800c57e:	4643      	movge	r3, r8
 800c580:	46a0      	movge	r8, r4
 800c582:	4630      	mov	r0, r6
 800c584:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c588:	bfa6      	itte	ge
 800c58a:	461c      	movge	r4, r3
 800c58c:	2500      	movge	r5, #0
 800c58e:	2501      	movlt	r5, #1
 800c590:	f7ff fd40 	bl	800c014 <_Balloc>
 800c594:	b920      	cbnz	r0, 800c5a0 <__mdiff+0x5c>
 800c596:	4b2e      	ldr	r3, [pc, #184]	; (800c650 <__mdiff+0x10c>)
 800c598:	4602      	mov	r2, r0
 800c59a:	f240 2145 	movw	r1, #581	; 0x245
 800c59e:	e7e5      	b.n	800c56c <__mdiff+0x28>
 800c5a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c5a4:	6926      	ldr	r6, [r4, #16]
 800c5a6:	60c5      	str	r5, [r0, #12]
 800c5a8:	f104 0914 	add.w	r9, r4, #20
 800c5ac:	f108 0514 	add.w	r5, r8, #20
 800c5b0:	f100 0e14 	add.w	lr, r0, #20
 800c5b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c5b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c5bc:	f108 0210 	add.w	r2, r8, #16
 800c5c0:	46f2      	mov	sl, lr
 800c5c2:	2100      	movs	r1, #0
 800c5c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c5c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c5cc:	fa11 f88b 	uxtah	r8, r1, fp
 800c5d0:	b299      	uxth	r1, r3
 800c5d2:	0c1b      	lsrs	r3, r3, #16
 800c5d4:	eba8 0801 	sub.w	r8, r8, r1
 800c5d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c5dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c5e0:	fa1f f888 	uxth.w	r8, r8
 800c5e4:	1419      	asrs	r1, r3, #16
 800c5e6:	454e      	cmp	r6, r9
 800c5e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c5ec:	f84a 3b04 	str.w	r3, [sl], #4
 800c5f0:	d8e8      	bhi.n	800c5c4 <__mdiff+0x80>
 800c5f2:	1b33      	subs	r3, r6, r4
 800c5f4:	3b15      	subs	r3, #21
 800c5f6:	f023 0303 	bic.w	r3, r3, #3
 800c5fa:	3304      	adds	r3, #4
 800c5fc:	3415      	adds	r4, #21
 800c5fe:	42a6      	cmp	r6, r4
 800c600:	bf38      	it	cc
 800c602:	2304      	movcc	r3, #4
 800c604:	441d      	add	r5, r3
 800c606:	4473      	add	r3, lr
 800c608:	469e      	mov	lr, r3
 800c60a:	462e      	mov	r6, r5
 800c60c:	4566      	cmp	r6, ip
 800c60e:	d30e      	bcc.n	800c62e <__mdiff+0xea>
 800c610:	f10c 0203 	add.w	r2, ip, #3
 800c614:	1b52      	subs	r2, r2, r5
 800c616:	f022 0203 	bic.w	r2, r2, #3
 800c61a:	3d03      	subs	r5, #3
 800c61c:	45ac      	cmp	ip, r5
 800c61e:	bf38      	it	cc
 800c620:	2200      	movcc	r2, #0
 800c622:	4413      	add	r3, r2
 800c624:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c628:	b17a      	cbz	r2, 800c64a <__mdiff+0x106>
 800c62a:	6107      	str	r7, [r0, #16]
 800c62c:	e7a4      	b.n	800c578 <__mdiff+0x34>
 800c62e:	f856 8b04 	ldr.w	r8, [r6], #4
 800c632:	fa11 f288 	uxtah	r2, r1, r8
 800c636:	1414      	asrs	r4, r2, #16
 800c638:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c63c:	b292      	uxth	r2, r2
 800c63e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c642:	f84e 2b04 	str.w	r2, [lr], #4
 800c646:	1421      	asrs	r1, r4, #16
 800c648:	e7e0      	b.n	800c60c <__mdiff+0xc8>
 800c64a:	3f01      	subs	r7, #1
 800c64c:	e7ea      	b.n	800c624 <__mdiff+0xe0>
 800c64e:	bf00      	nop
 800c650:	0800cfe8 	.word	0x0800cfe8
 800c654:	0800cff9 	.word	0x0800cff9

0800c658 <__d2b>:
 800c658:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c65c:	460f      	mov	r7, r1
 800c65e:	2101      	movs	r1, #1
 800c660:	ec59 8b10 	vmov	r8, r9, d0
 800c664:	4616      	mov	r6, r2
 800c666:	f7ff fcd5 	bl	800c014 <_Balloc>
 800c66a:	4604      	mov	r4, r0
 800c66c:	b930      	cbnz	r0, 800c67c <__d2b+0x24>
 800c66e:	4602      	mov	r2, r0
 800c670:	4b24      	ldr	r3, [pc, #144]	; (800c704 <__d2b+0xac>)
 800c672:	4825      	ldr	r0, [pc, #148]	; (800c708 <__d2b+0xb0>)
 800c674:	f240 310f 	movw	r1, #783	; 0x30f
 800c678:	f000 f906 	bl	800c888 <__assert_func>
 800c67c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c680:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c684:	bb2d      	cbnz	r5, 800c6d2 <__d2b+0x7a>
 800c686:	9301      	str	r3, [sp, #4]
 800c688:	f1b8 0300 	subs.w	r3, r8, #0
 800c68c:	d026      	beq.n	800c6dc <__d2b+0x84>
 800c68e:	4668      	mov	r0, sp
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	f7ff fd87 	bl	800c1a4 <__lo0bits>
 800c696:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c69a:	b1e8      	cbz	r0, 800c6d8 <__d2b+0x80>
 800c69c:	f1c0 0320 	rsb	r3, r0, #32
 800c6a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c6a4:	430b      	orrs	r3, r1
 800c6a6:	40c2      	lsrs	r2, r0
 800c6a8:	6163      	str	r3, [r4, #20]
 800c6aa:	9201      	str	r2, [sp, #4]
 800c6ac:	9b01      	ldr	r3, [sp, #4]
 800c6ae:	61a3      	str	r3, [r4, #24]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	bf14      	ite	ne
 800c6b4:	2202      	movne	r2, #2
 800c6b6:	2201      	moveq	r2, #1
 800c6b8:	6122      	str	r2, [r4, #16]
 800c6ba:	b1bd      	cbz	r5, 800c6ec <__d2b+0x94>
 800c6bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c6c0:	4405      	add	r5, r0
 800c6c2:	603d      	str	r5, [r7, #0]
 800c6c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c6c8:	6030      	str	r0, [r6, #0]
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	b003      	add	sp, #12
 800c6ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6d6:	e7d6      	b.n	800c686 <__d2b+0x2e>
 800c6d8:	6161      	str	r1, [r4, #20]
 800c6da:	e7e7      	b.n	800c6ac <__d2b+0x54>
 800c6dc:	a801      	add	r0, sp, #4
 800c6de:	f7ff fd61 	bl	800c1a4 <__lo0bits>
 800c6e2:	9b01      	ldr	r3, [sp, #4]
 800c6e4:	6163      	str	r3, [r4, #20]
 800c6e6:	3020      	adds	r0, #32
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	e7e5      	b.n	800c6b8 <__d2b+0x60>
 800c6ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c6f4:	6038      	str	r0, [r7, #0]
 800c6f6:	6918      	ldr	r0, [r3, #16]
 800c6f8:	f7ff fd34 	bl	800c164 <__hi0bits>
 800c6fc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c700:	e7e2      	b.n	800c6c8 <__d2b+0x70>
 800c702:	bf00      	nop
 800c704:	0800cfe8 	.word	0x0800cfe8
 800c708:	0800cff9 	.word	0x0800cff9

0800c70c <__sflush_r>:
 800c70c:	898a      	ldrh	r2, [r1, #12]
 800c70e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c712:	4605      	mov	r5, r0
 800c714:	0710      	lsls	r0, r2, #28
 800c716:	460c      	mov	r4, r1
 800c718:	d458      	bmi.n	800c7cc <__sflush_r+0xc0>
 800c71a:	684b      	ldr	r3, [r1, #4]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	dc05      	bgt.n	800c72c <__sflush_r+0x20>
 800c720:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c722:	2b00      	cmp	r3, #0
 800c724:	dc02      	bgt.n	800c72c <__sflush_r+0x20>
 800c726:	2000      	movs	r0, #0
 800c728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c72c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c72e:	2e00      	cmp	r6, #0
 800c730:	d0f9      	beq.n	800c726 <__sflush_r+0x1a>
 800c732:	2300      	movs	r3, #0
 800c734:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c738:	682f      	ldr	r7, [r5, #0]
 800c73a:	6a21      	ldr	r1, [r4, #32]
 800c73c:	602b      	str	r3, [r5, #0]
 800c73e:	d032      	beq.n	800c7a6 <__sflush_r+0x9a>
 800c740:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c742:	89a3      	ldrh	r3, [r4, #12]
 800c744:	075a      	lsls	r2, r3, #29
 800c746:	d505      	bpl.n	800c754 <__sflush_r+0x48>
 800c748:	6863      	ldr	r3, [r4, #4]
 800c74a:	1ac0      	subs	r0, r0, r3
 800c74c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c74e:	b10b      	cbz	r3, 800c754 <__sflush_r+0x48>
 800c750:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c752:	1ac0      	subs	r0, r0, r3
 800c754:	2300      	movs	r3, #0
 800c756:	4602      	mov	r2, r0
 800c758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c75a:	6a21      	ldr	r1, [r4, #32]
 800c75c:	4628      	mov	r0, r5
 800c75e:	47b0      	blx	r6
 800c760:	1c43      	adds	r3, r0, #1
 800c762:	89a3      	ldrh	r3, [r4, #12]
 800c764:	d106      	bne.n	800c774 <__sflush_r+0x68>
 800c766:	6829      	ldr	r1, [r5, #0]
 800c768:	291d      	cmp	r1, #29
 800c76a:	d82b      	bhi.n	800c7c4 <__sflush_r+0xb8>
 800c76c:	4a29      	ldr	r2, [pc, #164]	; (800c814 <__sflush_r+0x108>)
 800c76e:	410a      	asrs	r2, r1
 800c770:	07d6      	lsls	r6, r2, #31
 800c772:	d427      	bmi.n	800c7c4 <__sflush_r+0xb8>
 800c774:	2200      	movs	r2, #0
 800c776:	6062      	str	r2, [r4, #4]
 800c778:	04d9      	lsls	r1, r3, #19
 800c77a:	6922      	ldr	r2, [r4, #16]
 800c77c:	6022      	str	r2, [r4, #0]
 800c77e:	d504      	bpl.n	800c78a <__sflush_r+0x7e>
 800c780:	1c42      	adds	r2, r0, #1
 800c782:	d101      	bne.n	800c788 <__sflush_r+0x7c>
 800c784:	682b      	ldr	r3, [r5, #0]
 800c786:	b903      	cbnz	r3, 800c78a <__sflush_r+0x7e>
 800c788:	6560      	str	r0, [r4, #84]	; 0x54
 800c78a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c78c:	602f      	str	r7, [r5, #0]
 800c78e:	2900      	cmp	r1, #0
 800c790:	d0c9      	beq.n	800c726 <__sflush_r+0x1a>
 800c792:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c796:	4299      	cmp	r1, r3
 800c798:	d002      	beq.n	800c7a0 <__sflush_r+0x94>
 800c79a:	4628      	mov	r0, r5
 800c79c:	f7ff fb3a 	bl	800be14 <_free_r>
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	6360      	str	r0, [r4, #52]	; 0x34
 800c7a4:	e7c0      	b.n	800c728 <__sflush_r+0x1c>
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	47b0      	blx	r6
 800c7ac:	1c41      	adds	r1, r0, #1
 800c7ae:	d1c8      	bne.n	800c742 <__sflush_r+0x36>
 800c7b0:	682b      	ldr	r3, [r5, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d0c5      	beq.n	800c742 <__sflush_r+0x36>
 800c7b6:	2b1d      	cmp	r3, #29
 800c7b8:	d001      	beq.n	800c7be <__sflush_r+0xb2>
 800c7ba:	2b16      	cmp	r3, #22
 800c7bc:	d101      	bne.n	800c7c2 <__sflush_r+0xb6>
 800c7be:	602f      	str	r7, [r5, #0]
 800c7c0:	e7b1      	b.n	800c726 <__sflush_r+0x1a>
 800c7c2:	89a3      	ldrh	r3, [r4, #12]
 800c7c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7c8:	81a3      	strh	r3, [r4, #12]
 800c7ca:	e7ad      	b.n	800c728 <__sflush_r+0x1c>
 800c7cc:	690f      	ldr	r7, [r1, #16]
 800c7ce:	2f00      	cmp	r7, #0
 800c7d0:	d0a9      	beq.n	800c726 <__sflush_r+0x1a>
 800c7d2:	0793      	lsls	r3, r2, #30
 800c7d4:	680e      	ldr	r6, [r1, #0]
 800c7d6:	bf08      	it	eq
 800c7d8:	694b      	ldreq	r3, [r1, #20]
 800c7da:	600f      	str	r7, [r1, #0]
 800c7dc:	bf18      	it	ne
 800c7de:	2300      	movne	r3, #0
 800c7e0:	eba6 0807 	sub.w	r8, r6, r7
 800c7e4:	608b      	str	r3, [r1, #8]
 800c7e6:	f1b8 0f00 	cmp.w	r8, #0
 800c7ea:	dd9c      	ble.n	800c726 <__sflush_r+0x1a>
 800c7ec:	6a21      	ldr	r1, [r4, #32]
 800c7ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c7f0:	4643      	mov	r3, r8
 800c7f2:	463a      	mov	r2, r7
 800c7f4:	4628      	mov	r0, r5
 800c7f6:	47b0      	blx	r6
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	dc06      	bgt.n	800c80a <__sflush_r+0xfe>
 800c7fc:	89a3      	ldrh	r3, [r4, #12]
 800c7fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c802:	81a3      	strh	r3, [r4, #12]
 800c804:	f04f 30ff 	mov.w	r0, #4294967295
 800c808:	e78e      	b.n	800c728 <__sflush_r+0x1c>
 800c80a:	4407      	add	r7, r0
 800c80c:	eba8 0800 	sub.w	r8, r8, r0
 800c810:	e7e9      	b.n	800c7e6 <__sflush_r+0xda>
 800c812:	bf00      	nop
 800c814:	dfbffffe 	.word	0xdfbffffe

0800c818 <_fflush_r>:
 800c818:	b538      	push	{r3, r4, r5, lr}
 800c81a:	690b      	ldr	r3, [r1, #16]
 800c81c:	4605      	mov	r5, r0
 800c81e:	460c      	mov	r4, r1
 800c820:	b913      	cbnz	r3, 800c828 <_fflush_r+0x10>
 800c822:	2500      	movs	r5, #0
 800c824:	4628      	mov	r0, r5
 800c826:	bd38      	pop	{r3, r4, r5, pc}
 800c828:	b118      	cbz	r0, 800c832 <_fflush_r+0x1a>
 800c82a:	6a03      	ldr	r3, [r0, #32]
 800c82c:	b90b      	cbnz	r3, 800c832 <_fflush_r+0x1a>
 800c82e:	f7fe fb6f 	bl	800af10 <__sinit>
 800c832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d0f3      	beq.n	800c822 <_fflush_r+0xa>
 800c83a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c83c:	07d0      	lsls	r0, r2, #31
 800c83e:	d404      	bmi.n	800c84a <_fflush_r+0x32>
 800c840:	0599      	lsls	r1, r3, #22
 800c842:	d402      	bmi.n	800c84a <_fflush_r+0x32>
 800c844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c846:	f7fe fc5a 	bl	800b0fe <__retarget_lock_acquire_recursive>
 800c84a:	4628      	mov	r0, r5
 800c84c:	4621      	mov	r1, r4
 800c84e:	f7ff ff5d 	bl	800c70c <__sflush_r>
 800c852:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c854:	07da      	lsls	r2, r3, #31
 800c856:	4605      	mov	r5, r0
 800c858:	d4e4      	bmi.n	800c824 <_fflush_r+0xc>
 800c85a:	89a3      	ldrh	r3, [r4, #12]
 800c85c:	059b      	lsls	r3, r3, #22
 800c85e:	d4e1      	bmi.n	800c824 <_fflush_r+0xc>
 800c860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c862:	f7fe fc4d 	bl	800b100 <__retarget_lock_release_recursive>
 800c866:	e7dd      	b.n	800c824 <_fflush_r+0xc>

0800c868 <_sbrk_r>:
 800c868:	b538      	push	{r3, r4, r5, lr}
 800c86a:	4d06      	ldr	r5, [pc, #24]	; (800c884 <_sbrk_r+0x1c>)
 800c86c:	2300      	movs	r3, #0
 800c86e:	4604      	mov	r4, r0
 800c870:	4608      	mov	r0, r1
 800c872:	602b      	str	r3, [r5, #0]
 800c874:	f7f6 fd46 	bl	8003304 <_sbrk>
 800c878:	1c43      	adds	r3, r0, #1
 800c87a:	d102      	bne.n	800c882 <_sbrk_r+0x1a>
 800c87c:	682b      	ldr	r3, [r5, #0]
 800c87e:	b103      	cbz	r3, 800c882 <_sbrk_r+0x1a>
 800c880:	6023      	str	r3, [r4, #0]
 800c882:	bd38      	pop	{r3, r4, r5, pc}
 800c884:	200007dc 	.word	0x200007dc

0800c888 <__assert_func>:
 800c888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c88a:	4614      	mov	r4, r2
 800c88c:	461a      	mov	r2, r3
 800c88e:	4b09      	ldr	r3, [pc, #36]	; (800c8b4 <__assert_func+0x2c>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4605      	mov	r5, r0
 800c894:	68d8      	ldr	r0, [r3, #12]
 800c896:	b14c      	cbz	r4, 800c8ac <__assert_func+0x24>
 800c898:	4b07      	ldr	r3, [pc, #28]	; (800c8b8 <__assert_func+0x30>)
 800c89a:	9100      	str	r1, [sp, #0]
 800c89c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8a0:	4906      	ldr	r1, [pc, #24]	; (800c8bc <__assert_func+0x34>)
 800c8a2:	462b      	mov	r3, r5
 800c8a4:	f000 f844 	bl	800c930 <fiprintf>
 800c8a8:	f000 f854 	bl	800c954 <abort>
 800c8ac:	4b04      	ldr	r3, [pc, #16]	; (800c8c0 <__assert_func+0x38>)
 800c8ae:	461c      	mov	r4, r3
 800c8b0:	e7f3      	b.n	800c89a <__assert_func+0x12>
 800c8b2:	bf00      	nop
 800c8b4:	2000006c 	.word	0x2000006c
 800c8b8:	0800d15e 	.word	0x0800d15e
 800c8bc:	0800d16b 	.word	0x0800d16b
 800c8c0:	0800d199 	.word	0x0800d199

0800c8c4 <_calloc_r>:
 800c8c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8c6:	fba1 2402 	umull	r2, r4, r1, r2
 800c8ca:	b94c      	cbnz	r4, 800c8e0 <_calloc_r+0x1c>
 800c8cc:	4611      	mov	r1, r2
 800c8ce:	9201      	str	r2, [sp, #4]
 800c8d0:	f7ff fb14 	bl	800befc <_malloc_r>
 800c8d4:	9a01      	ldr	r2, [sp, #4]
 800c8d6:	4605      	mov	r5, r0
 800c8d8:	b930      	cbnz	r0, 800c8e8 <_calloc_r+0x24>
 800c8da:	4628      	mov	r0, r5
 800c8dc:	b003      	add	sp, #12
 800c8de:	bd30      	pop	{r4, r5, pc}
 800c8e0:	220c      	movs	r2, #12
 800c8e2:	6002      	str	r2, [r0, #0]
 800c8e4:	2500      	movs	r5, #0
 800c8e6:	e7f8      	b.n	800c8da <_calloc_r+0x16>
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	f7fe fb8a 	bl	800b002 <memset>
 800c8ee:	e7f4      	b.n	800c8da <_calloc_r+0x16>

0800c8f0 <__ascii_mbtowc>:
 800c8f0:	b082      	sub	sp, #8
 800c8f2:	b901      	cbnz	r1, 800c8f6 <__ascii_mbtowc+0x6>
 800c8f4:	a901      	add	r1, sp, #4
 800c8f6:	b142      	cbz	r2, 800c90a <__ascii_mbtowc+0x1a>
 800c8f8:	b14b      	cbz	r3, 800c90e <__ascii_mbtowc+0x1e>
 800c8fa:	7813      	ldrb	r3, [r2, #0]
 800c8fc:	600b      	str	r3, [r1, #0]
 800c8fe:	7812      	ldrb	r2, [r2, #0]
 800c900:	1e10      	subs	r0, r2, #0
 800c902:	bf18      	it	ne
 800c904:	2001      	movne	r0, #1
 800c906:	b002      	add	sp, #8
 800c908:	4770      	bx	lr
 800c90a:	4610      	mov	r0, r2
 800c90c:	e7fb      	b.n	800c906 <__ascii_mbtowc+0x16>
 800c90e:	f06f 0001 	mvn.w	r0, #1
 800c912:	e7f8      	b.n	800c906 <__ascii_mbtowc+0x16>

0800c914 <__ascii_wctomb>:
 800c914:	b149      	cbz	r1, 800c92a <__ascii_wctomb+0x16>
 800c916:	2aff      	cmp	r2, #255	; 0xff
 800c918:	bf85      	ittet	hi
 800c91a:	238a      	movhi	r3, #138	; 0x8a
 800c91c:	6003      	strhi	r3, [r0, #0]
 800c91e:	700a      	strbls	r2, [r1, #0]
 800c920:	f04f 30ff 	movhi.w	r0, #4294967295
 800c924:	bf98      	it	ls
 800c926:	2001      	movls	r0, #1
 800c928:	4770      	bx	lr
 800c92a:	4608      	mov	r0, r1
 800c92c:	4770      	bx	lr
	...

0800c930 <fiprintf>:
 800c930:	b40e      	push	{r1, r2, r3}
 800c932:	b503      	push	{r0, r1, lr}
 800c934:	4601      	mov	r1, r0
 800c936:	ab03      	add	r3, sp, #12
 800c938:	4805      	ldr	r0, [pc, #20]	; (800c950 <fiprintf+0x20>)
 800c93a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c93e:	6800      	ldr	r0, [r0, #0]
 800c940:	9301      	str	r3, [sp, #4]
 800c942:	f000 f837 	bl	800c9b4 <_vfiprintf_r>
 800c946:	b002      	add	sp, #8
 800c948:	f85d eb04 	ldr.w	lr, [sp], #4
 800c94c:	b003      	add	sp, #12
 800c94e:	4770      	bx	lr
 800c950:	2000006c 	.word	0x2000006c

0800c954 <abort>:
 800c954:	b508      	push	{r3, lr}
 800c956:	2006      	movs	r0, #6
 800c958:	f000 fa04 	bl	800cd64 <raise>
 800c95c:	2001      	movs	r0, #1
 800c95e:	f7f6 fc59 	bl	8003214 <_exit>

0800c962 <__sfputc_r>:
 800c962:	6893      	ldr	r3, [r2, #8]
 800c964:	3b01      	subs	r3, #1
 800c966:	2b00      	cmp	r3, #0
 800c968:	b410      	push	{r4}
 800c96a:	6093      	str	r3, [r2, #8]
 800c96c:	da08      	bge.n	800c980 <__sfputc_r+0x1e>
 800c96e:	6994      	ldr	r4, [r2, #24]
 800c970:	42a3      	cmp	r3, r4
 800c972:	db01      	blt.n	800c978 <__sfputc_r+0x16>
 800c974:	290a      	cmp	r1, #10
 800c976:	d103      	bne.n	800c980 <__sfputc_r+0x1e>
 800c978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c97c:	f000 b934 	b.w	800cbe8 <__swbuf_r>
 800c980:	6813      	ldr	r3, [r2, #0]
 800c982:	1c58      	adds	r0, r3, #1
 800c984:	6010      	str	r0, [r2, #0]
 800c986:	7019      	strb	r1, [r3, #0]
 800c988:	4608      	mov	r0, r1
 800c98a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <__sfputs_r>:
 800c990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c992:	4606      	mov	r6, r0
 800c994:	460f      	mov	r7, r1
 800c996:	4614      	mov	r4, r2
 800c998:	18d5      	adds	r5, r2, r3
 800c99a:	42ac      	cmp	r4, r5
 800c99c:	d101      	bne.n	800c9a2 <__sfputs_r+0x12>
 800c99e:	2000      	movs	r0, #0
 800c9a0:	e007      	b.n	800c9b2 <__sfputs_r+0x22>
 800c9a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9a6:	463a      	mov	r2, r7
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	f7ff ffda 	bl	800c962 <__sfputc_r>
 800c9ae:	1c43      	adds	r3, r0, #1
 800c9b0:	d1f3      	bne.n	800c99a <__sfputs_r+0xa>
 800c9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c9b4 <_vfiprintf_r>:
 800c9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b8:	460d      	mov	r5, r1
 800c9ba:	b09d      	sub	sp, #116	; 0x74
 800c9bc:	4614      	mov	r4, r2
 800c9be:	4698      	mov	r8, r3
 800c9c0:	4606      	mov	r6, r0
 800c9c2:	b118      	cbz	r0, 800c9cc <_vfiprintf_r+0x18>
 800c9c4:	6a03      	ldr	r3, [r0, #32]
 800c9c6:	b90b      	cbnz	r3, 800c9cc <_vfiprintf_r+0x18>
 800c9c8:	f7fe faa2 	bl	800af10 <__sinit>
 800c9cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9ce:	07d9      	lsls	r1, r3, #31
 800c9d0:	d405      	bmi.n	800c9de <_vfiprintf_r+0x2a>
 800c9d2:	89ab      	ldrh	r3, [r5, #12]
 800c9d4:	059a      	lsls	r2, r3, #22
 800c9d6:	d402      	bmi.n	800c9de <_vfiprintf_r+0x2a>
 800c9d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9da:	f7fe fb90 	bl	800b0fe <__retarget_lock_acquire_recursive>
 800c9de:	89ab      	ldrh	r3, [r5, #12]
 800c9e0:	071b      	lsls	r3, r3, #28
 800c9e2:	d501      	bpl.n	800c9e8 <_vfiprintf_r+0x34>
 800c9e4:	692b      	ldr	r3, [r5, #16]
 800c9e6:	b99b      	cbnz	r3, 800ca10 <_vfiprintf_r+0x5c>
 800c9e8:	4629      	mov	r1, r5
 800c9ea:	4630      	mov	r0, r6
 800c9ec:	f000 f93a 	bl	800cc64 <__swsetup_r>
 800c9f0:	b170      	cbz	r0, 800ca10 <_vfiprintf_r+0x5c>
 800c9f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9f4:	07dc      	lsls	r4, r3, #31
 800c9f6:	d504      	bpl.n	800ca02 <_vfiprintf_r+0x4e>
 800c9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9fc:	b01d      	add	sp, #116	; 0x74
 800c9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca02:	89ab      	ldrh	r3, [r5, #12]
 800ca04:	0598      	lsls	r0, r3, #22
 800ca06:	d4f7      	bmi.n	800c9f8 <_vfiprintf_r+0x44>
 800ca08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca0a:	f7fe fb79 	bl	800b100 <__retarget_lock_release_recursive>
 800ca0e:	e7f3      	b.n	800c9f8 <_vfiprintf_r+0x44>
 800ca10:	2300      	movs	r3, #0
 800ca12:	9309      	str	r3, [sp, #36]	; 0x24
 800ca14:	2320      	movs	r3, #32
 800ca16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca1e:	2330      	movs	r3, #48	; 0x30
 800ca20:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cbd4 <_vfiprintf_r+0x220>
 800ca24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca28:	f04f 0901 	mov.w	r9, #1
 800ca2c:	4623      	mov	r3, r4
 800ca2e:	469a      	mov	sl, r3
 800ca30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca34:	b10a      	cbz	r2, 800ca3a <_vfiprintf_r+0x86>
 800ca36:	2a25      	cmp	r2, #37	; 0x25
 800ca38:	d1f9      	bne.n	800ca2e <_vfiprintf_r+0x7a>
 800ca3a:	ebba 0b04 	subs.w	fp, sl, r4
 800ca3e:	d00b      	beq.n	800ca58 <_vfiprintf_r+0xa4>
 800ca40:	465b      	mov	r3, fp
 800ca42:	4622      	mov	r2, r4
 800ca44:	4629      	mov	r1, r5
 800ca46:	4630      	mov	r0, r6
 800ca48:	f7ff ffa2 	bl	800c990 <__sfputs_r>
 800ca4c:	3001      	adds	r0, #1
 800ca4e:	f000 80a9 	beq.w	800cba4 <_vfiprintf_r+0x1f0>
 800ca52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca54:	445a      	add	r2, fp
 800ca56:	9209      	str	r2, [sp, #36]	; 0x24
 800ca58:	f89a 3000 	ldrb.w	r3, [sl]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	f000 80a1 	beq.w	800cba4 <_vfiprintf_r+0x1f0>
 800ca62:	2300      	movs	r3, #0
 800ca64:	f04f 32ff 	mov.w	r2, #4294967295
 800ca68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca6c:	f10a 0a01 	add.w	sl, sl, #1
 800ca70:	9304      	str	r3, [sp, #16]
 800ca72:	9307      	str	r3, [sp, #28]
 800ca74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca78:	931a      	str	r3, [sp, #104]	; 0x68
 800ca7a:	4654      	mov	r4, sl
 800ca7c:	2205      	movs	r2, #5
 800ca7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca82:	4854      	ldr	r0, [pc, #336]	; (800cbd4 <_vfiprintf_r+0x220>)
 800ca84:	f7f3 fbbc 	bl	8000200 <memchr>
 800ca88:	9a04      	ldr	r2, [sp, #16]
 800ca8a:	b9d8      	cbnz	r0, 800cac4 <_vfiprintf_r+0x110>
 800ca8c:	06d1      	lsls	r1, r2, #27
 800ca8e:	bf44      	itt	mi
 800ca90:	2320      	movmi	r3, #32
 800ca92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca96:	0713      	lsls	r3, r2, #28
 800ca98:	bf44      	itt	mi
 800ca9a:	232b      	movmi	r3, #43	; 0x2b
 800ca9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caa0:	f89a 3000 	ldrb.w	r3, [sl]
 800caa4:	2b2a      	cmp	r3, #42	; 0x2a
 800caa6:	d015      	beq.n	800cad4 <_vfiprintf_r+0x120>
 800caa8:	9a07      	ldr	r2, [sp, #28]
 800caaa:	4654      	mov	r4, sl
 800caac:	2000      	movs	r0, #0
 800caae:	f04f 0c0a 	mov.w	ip, #10
 800cab2:	4621      	mov	r1, r4
 800cab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cab8:	3b30      	subs	r3, #48	; 0x30
 800caba:	2b09      	cmp	r3, #9
 800cabc:	d94d      	bls.n	800cb5a <_vfiprintf_r+0x1a6>
 800cabe:	b1b0      	cbz	r0, 800caee <_vfiprintf_r+0x13a>
 800cac0:	9207      	str	r2, [sp, #28]
 800cac2:	e014      	b.n	800caee <_vfiprintf_r+0x13a>
 800cac4:	eba0 0308 	sub.w	r3, r0, r8
 800cac8:	fa09 f303 	lsl.w	r3, r9, r3
 800cacc:	4313      	orrs	r3, r2
 800cace:	9304      	str	r3, [sp, #16]
 800cad0:	46a2      	mov	sl, r4
 800cad2:	e7d2      	b.n	800ca7a <_vfiprintf_r+0xc6>
 800cad4:	9b03      	ldr	r3, [sp, #12]
 800cad6:	1d19      	adds	r1, r3, #4
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	9103      	str	r1, [sp, #12]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	bfbb      	ittet	lt
 800cae0:	425b      	neglt	r3, r3
 800cae2:	f042 0202 	orrlt.w	r2, r2, #2
 800cae6:	9307      	strge	r3, [sp, #28]
 800cae8:	9307      	strlt	r3, [sp, #28]
 800caea:	bfb8      	it	lt
 800caec:	9204      	strlt	r2, [sp, #16]
 800caee:	7823      	ldrb	r3, [r4, #0]
 800caf0:	2b2e      	cmp	r3, #46	; 0x2e
 800caf2:	d10c      	bne.n	800cb0e <_vfiprintf_r+0x15a>
 800caf4:	7863      	ldrb	r3, [r4, #1]
 800caf6:	2b2a      	cmp	r3, #42	; 0x2a
 800caf8:	d134      	bne.n	800cb64 <_vfiprintf_r+0x1b0>
 800cafa:	9b03      	ldr	r3, [sp, #12]
 800cafc:	1d1a      	adds	r2, r3, #4
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	9203      	str	r2, [sp, #12]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	bfb8      	it	lt
 800cb06:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb0a:	3402      	adds	r4, #2
 800cb0c:	9305      	str	r3, [sp, #20]
 800cb0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cbe4 <_vfiprintf_r+0x230>
 800cb12:	7821      	ldrb	r1, [r4, #0]
 800cb14:	2203      	movs	r2, #3
 800cb16:	4650      	mov	r0, sl
 800cb18:	f7f3 fb72 	bl	8000200 <memchr>
 800cb1c:	b138      	cbz	r0, 800cb2e <_vfiprintf_r+0x17a>
 800cb1e:	9b04      	ldr	r3, [sp, #16]
 800cb20:	eba0 000a 	sub.w	r0, r0, sl
 800cb24:	2240      	movs	r2, #64	; 0x40
 800cb26:	4082      	lsls	r2, r0
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	3401      	adds	r4, #1
 800cb2c:	9304      	str	r3, [sp, #16]
 800cb2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb32:	4829      	ldr	r0, [pc, #164]	; (800cbd8 <_vfiprintf_r+0x224>)
 800cb34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb38:	2206      	movs	r2, #6
 800cb3a:	f7f3 fb61 	bl	8000200 <memchr>
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	d03f      	beq.n	800cbc2 <_vfiprintf_r+0x20e>
 800cb42:	4b26      	ldr	r3, [pc, #152]	; (800cbdc <_vfiprintf_r+0x228>)
 800cb44:	bb1b      	cbnz	r3, 800cb8e <_vfiprintf_r+0x1da>
 800cb46:	9b03      	ldr	r3, [sp, #12]
 800cb48:	3307      	adds	r3, #7
 800cb4a:	f023 0307 	bic.w	r3, r3, #7
 800cb4e:	3308      	adds	r3, #8
 800cb50:	9303      	str	r3, [sp, #12]
 800cb52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb54:	443b      	add	r3, r7
 800cb56:	9309      	str	r3, [sp, #36]	; 0x24
 800cb58:	e768      	b.n	800ca2c <_vfiprintf_r+0x78>
 800cb5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb5e:	460c      	mov	r4, r1
 800cb60:	2001      	movs	r0, #1
 800cb62:	e7a6      	b.n	800cab2 <_vfiprintf_r+0xfe>
 800cb64:	2300      	movs	r3, #0
 800cb66:	3401      	adds	r4, #1
 800cb68:	9305      	str	r3, [sp, #20]
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	f04f 0c0a 	mov.w	ip, #10
 800cb70:	4620      	mov	r0, r4
 800cb72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb76:	3a30      	subs	r2, #48	; 0x30
 800cb78:	2a09      	cmp	r2, #9
 800cb7a:	d903      	bls.n	800cb84 <_vfiprintf_r+0x1d0>
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d0c6      	beq.n	800cb0e <_vfiprintf_r+0x15a>
 800cb80:	9105      	str	r1, [sp, #20]
 800cb82:	e7c4      	b.n	800cb0e <_vfiprintf_r+0x15a>
 800cb84:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb88:	4604      	mov	r4, r0
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e7f0      	b.n	800cb70 <_vfiprintf_r+0x1bc>
 800cb8e:	ab03      	add	r3, sp, #12
 800cb90:	9300      	str	r3, [sp, #0]
 800cb92:	462a      	mov	r2, r5
 800cb94:	4b12      	ldr	r3, [pc, #72]	; (800cbe0 <_vfiprintf_r+0x22c>)
 800cb96:	a904      	add	r1, sp, #16
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f7fd fd67 	bl	800a66c <_printf_float>
 800cb9e:	4607      	mov	r7, r0
 800cba0:	1c78      	adds	r0, r7, #1
 800cba2:	d1d6      	bne.n	800cb52 <_vfiprintf_r+0x19e>
 800cba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cba6:	07d9      	lsls	r1, r3, #31
 800cba8:	d405      	bmi.n	800cbb6 <_vfiprintf_r+0x202>
 800cbaa:	89ab      	ldrh	r3, [r5, #12]
 800cbac:	059a      	lsls	r2, r3, #22
 800cbae:	d402      	bmi.n	800cbb6 <_vfiprintf_r+0x202>
 800cbb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbb2:	f7fe faa5 	bl	800b100 <__retarget_lock_release_recursive>
 800cbb6:	89ab      	ldrh	r3, [r5, #12]
 800cbb8:	065b      	lsls	r3, r3, #25
 800cbba:	f53f af1d 	bmi.w	800c9f8 <_vfiprintf_r+0x44>
 800cbbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbc0:	e71c      	b.n	800c9fc <_vfiprintf_r+0x48>
 800cbc2:	ab03      	add	r3, sp, #12
 800cbc4:	9300      	str	r3, [sp, #0]
 800cbc6:	462a      	mov	r2, r5
 800cbc8:	4b05      	ldr	r3, [pc, #20]	; (800cbe0 <_vfiprintf_r+0x22c>)
 800cbca:	a904      	add	r1, sp, #16
 800cbcc:	4630      	mov	r0, r6
 800cbce:	f7fd fff1 	bl	800abb4 <_printf_i>
 800cbd2:	e7e4      	b.n	800cb9e <_vfiprintf_r+0x1ea>
 800cbd4:	0800d29b 	.word	0x0800d29b
 800cbd8:	0800d2a5 	.word	0x0800d2a5
 800cbdc:	0800a66d 	.word	0x0800a66d
 800cbe0:	0800c991 	.word	0x0800c991
 800cbe4:	0800d2a1 	.word	0x0800d2a1

0800cbe8 <__swbuf_r>:
 800cbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbea:	460e      	mov	r6, r1
 800cbec:	4614      	mov	r4, r2
 800cbee:	4605      	mov	r5, r0
 800cbf0:	b118      	cbz	r0, 800cbfa <__swbuf_r+0x12>
 800cbf2:	6a03      	ldr	r3, [r0, #32]
 800cbf4:	b90b      	cbnz	r3, 800cbfa <__swbuf_r+0x12>
 800cbf6:	f7fe f98b 	bl	800af10 <__sinit>
 800cbfa:	69a3      	ldr	r3, [r4, #24]
 800cbfc:	60a3      	str	r3, [r4, #8]
 800cbfe:	89a3      	ldrh	r3, [r4, #12]
 800cc00:	071a      	lsls	r2, r3, #28
 800cc02:	d525      	bpl.n	800cc50 <__swbuf_r+0x68>
 800cc04:	6923      	ldr	r3, [r4, #16]
 800cc06:	b31b      	cbz	r3, 800cc50 <__swbuf_r+0x68>
 800cc08:	6823      	ldr	r3, [r4, #0]
 800cc0a:	6922      	ldr	r2, [r4, #16]
 800cc0c:	1a98      	subs	r0, r3, r2
 800cc0e:	6963      	ldr	r3, [r4, #20]
 800cc10:	b2f6      	uxtb	r6, r6
 800cc12:	4283      	cmp	r3, r0
 800cc14:	4637      	mov	r7, r6
 800cc16:	dc04      	bgt.n	800cc22 <__swbuf_r+0x3a>
 800cc18:	4621      	mov	r1, r4
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	f7ff fdfc 	bl	800c818 <_fflush_r>
 800cc20:	b9e0      	cbnz	r0, 800cc5c <__swbuf_r+0x74>
 800cc22:	68a3      	ldr	r3, [r4, #8]
 800cc24:	3b01      	subs	r3, #1
 800cc26:	60a3      	str	r3, [r4, #8]
 800cc28:	6823      	ldr	r3, [r4, #0]
 800cc2a:	1c5a      	adds	r2, r3, #1
 800cc2c:	6022      	str	r2, [r4, #0]
 800cc2e:	701e      	strb	r6, [r3, #0]
 800cc30:	6962      	ldr	r2, [r4, #20]
 800cc32:	1c43      	adds	r3, r0, #1
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d004      	beq.n	800cc42 <__swbuf_r+0x5a>
 800cc38:	89a3      	ldrh	r3, [r4, #12]
 800cc3a:	07db      	lsls	r3, r3, #31
 800cc3c:	d506      	bpl.n	800cc4c <__swbuf_r+0x64>
 800cc3e:	2e0a      	cmp	r6, #10
 800cc40:	d104      	bne.n	800cc4c <__swbuf_r+0x64>
 800cc42:	4621      	mov	r1, r4
 800cc44:	4628      	mov	r0, r5
 800cc46:	f7ff fde7 	bl	800c818 <_fflush_r>
 800cc4a:	b938      	cbnz	r0, 800cc5c <__swbuf_r+0x74>
 800cc4c:	4638      	mov	r0, r7
 800cc4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc50:	4621      	mov	r1, r4
 800cc52:	4628      	mov	r0, r5
 800cc54:	f000 f806 	bl	800cc64 <__swsetup_r>
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	d0d5      	beq.n	800cc08 <__swbuf_r+0x20>
 800cc5c:	f04f 37ff 	mov.w	r7, #4294967295
 800cc60:	e7f4      	b.n	800cc4c <__swbuf_r+0x64>
	...

0800cc64 <__swsetup_r>:
 800cc64:	b538      	push	{r3, r4, r5, lr}
 800cc66:	4b2a      	ldr	r3, [pc, #168]	; (800cd10 <__swsetup_r+0xac>)
 800cc68:	4605      	mov	r5, r0
 800cc6a:	6818      	ldr	r0, [r3, #0]
 800cc6c:	460c      	mov	r4, r1
 800cc6e:	b118      	cbz	r0, 800cc78 <__swsetup_r+0x14>
 800cc70:	6a03      	ldr	r3, [r0, #32]
 800cc72:	b90b      	cbnz	r3, 800cc78 <__swsetup_r+0x14>
 800cc74:	f7fe f94c 	bl	800af10 <__sinit>
 800cc78:	89a3      	ldrh	r3, [r4, #12]
 800cc7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc7e:	0718      	lsls	r0, r3, #28
 800cc80:	d422      	bmi.n	800ccc8 <__swsetup_r+0x64>
 800cc82:	06d9      	lsls	r1, r3, #27
 800cc84:	d407      	bmi.n	800cc96 <__swsetup_r+0x32>
 800cc86:	2309      	movs	r3, #9
 800cc88:	602b      	str	r3, [r5, #0]
 800cc8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc8e:	81a3      	strh	r3, [r4, #12]
 800cc90:	f04f 30ff 	mov.w	r0, #4294967295
 800cc94:	e034      	b.n	800cd00 <__swsetup_r+0x9c>
 800cc96:	0758      	lsls	r0, r3, #29
 800cc98:	d512      	bpl.n	800ccc0 <__swsetup_r+0x5c>
 800cc9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc9c:	b141      	cbz	r1, 800ccb0 <__swsetup_r+0x4c>
 800cc9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cca2:	4299      	cmp	r1, r3
 800cca4:	d002      	beq.n	800ccac <__swsetup_r+0x48>
 800cca6:	4628      	mov	r0, r5
 800cca8:	f7ff f8b4 	bl	800be14 <_free_r>
 800ccac:	2300      	movs	r3, #0
 800ccae:	6363      	str	r3, [r4, #52]	; 0x34
 800ccb0:	89a3      	ldrh	r3, [r4, #12]
 800ccb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ccb6:	81a3      	strh	r3, [r4, #12]
 800ccb8:	2300      	movs	r3, #0
 800ccba:	6063      	str	r3, [r4, #4]
 800ccbc:	6923      	ldr	r3, [r4, #16]
 800ccbe:	6023      	str	r3, [r4, #0]
 800ccc0:	89a3      	ldrh	r3, [r4, #12]
 800ccc2:	f043 0308 	orr.w	r3, r3, #8
 800ccc6:	81a3      	strh	r3, [r4, #12]
 800ccc8:	6923      	ldr	r3, [r4, #16]
 800ccca:	b94b      	cbnz	r3, 800cce0 <__swsetup_r+0x7c>
 800cccc:	89a3      	ldrh	r3, [r4, #12]
 800ccce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ccd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccd6:	d003      	beq.n	800cce0 <__swsetup_r+0x7c>
 800ccd8:	4621      	mov	r1, r4
 800ccda:	4628      	mov	r0, r5
 800ccdc:	f000 f884 	bl	800cde8 <__smakebuf_r>
 800cce0:	89a0      	ldrh	r0, [r4, #12]
 800cce2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cce6:	f010 0301 	ands.w	r3, r0, #1
 800ccea:	d00a      	beq.n	800cd02 <__swsetup_r+0x9e>
 800ccec:	2300      	movs	r3, #0
 800ccee:	60a3      	str	r3, [r4, #8]
 800ccf0:	6963      	ldr	r3, [r4, #20]
 800ccf2:	425b      	negs	r3, r3
 800ccf4:	61a3      	str	r3, [r4, #24]
 800ccf6:	6923      	ldr	r3, [r4, #16]
 800ccf8:	b943      	cbnz	r3, 800cd0c <__swsetup_r+0xa8>
 800ccfa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ccfe:	d1c4      	bne.n	800cc8a <__swsetup_r+0x26>
 800cd00:	bd38      	pop	{r3, r4, r5, pc}
 800cd02:	0781      	lsls	r1, r0, #30
 800cd04:	bf58      	it	pl
 800cd06:	6963      	ldrpl	r3, [r4, #20]
 800cd08:	60a3      	str	r3, [r4, #8]
 800cd0a:	e7f4      	b.n	800ccf6 <__swsetup_r+0x92>
 800cd0c:	2000      	movs	r0, #0
 800cd0e:	e7f7      	b.n	800cd00 <__swsetup_r+0x9c>
 800cd10:	2000006c 	.word	0x2000006c

0800cd14 <_raise_r>:
 800cd14:	291f      	cmp	r1, #31
 800cd16:	b538      	push	{r3, r4, r5, lr}
 800cd18:	4604      	mov	r4, r0
 800cd1a:	460d      	mov	r5, r1
 800cd1c:	d904      	bls.n	800cd28 <_raise_r+0x14>
 800cd1e:	2316      	movs	r3, #22
 800cd20:	6003      	str	r3, [r0, #0]
 800cd22:	f04f 30ff 	mov.w	r0, #4294967295
 800cd26:	bd38      	pop	{r3, r4, r5, pc}
 800cd28:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cd2a:	b112      	cbz	r2, 800cd32 <_raise_r+0x1e>
 800cd2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd30:	b94b      	cbnz	r3, 800cd46 <_raise_r+0x32>
 800cd32:	4620      	mov	r0, r4
 800cd34:	f000 f830 	bl	800cd98 <_getpid_r>
 800cd38:	462a      	mov	r2, r5
 800cd3a:	4601      	mov	r1, r0
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd42:	f000 b817 	b.w	800cd74 <_kill_r>
 800cd46:	2b01      	cmp	r3, #1
 800cd48:	d00a      	beq.n	800cd60 <_raise_r+0x4c>
 800cd4a:	1c59      	adds	r1, r3, #1
 800cd4c:	d103      	bne.n	800cd56 <_raise_r+0x42>
 800cd4e:	2316      	movs	r3, #22
 800cd50:	6003      	str	r3, [r0, #0]
 800cd52:	2001      	movs	r0, #1
 800cd54:	e7e7      	b.n	800cd26 <_raise_r+0x12>
 800cd56:	2400      	movs	r4, #0
 800cd58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd5c:	4628      	mov	r0, r5
 800cd5e:	4798      	blx	r3
 800cd60:	2000      	movs	r0, #0
 800cd62:	e7e0      	b.n	800cd26 <_raise_r+0x12>

0800cd64 <raise>:
 800cd64:	4b02      	ldr	r3, [pc, #8]	; (800cd70 <raise+0xc>)
 800cd66:	4601      	mov	r1, r0
 800cd68:	6818      	ldr	r0, [r3, #0]
 800cd6a:	f7ff bfd3 	b.w	800cd14 <_raise_r>
 800cd6e:	bf00      	nop
 800cd70:	2000006c 	.word	0x2000006c

0800cd74 <_kill_r>:
 800cd74:	b538      	push	{r3, r4, r5, lr}
 800cd76:	4d07      	ldr	r5, [pc, #28]	; (800cd94 <_kill_r+0x20>)
 800cd78:	2300      	movs	r3, #0
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	4608      	mov	r0, r1
 800cd7e:	4611      	mov	r1, r2
 800cd80:	602b      	str	r3, [r5, #0]
 800cd82:	f7f6 fa37 	bl	80031f4 <_kill>
 800cd86:	1c43      	adds	r3, r0, #1
 800cd88:	d102      	bne.n	800cd90 <_kill_r+0x1c>
 800cd8a:	682b      	ldr	r3, [r5, #0]
 800cd8c:	b103      	cbz	r3, 800cd90 <_kill_r+0x1c>
 800cd8e:	6023      	str	r3, [r4, #0]
 800cd90:	bd38      	pop	{r3, r4, r5, pc}
 800cd92:	bf00      	nop
 800cd94:	200007dc 	.word	0x200007dc

0800cd98 <_getpid_r>:
 800cd98:	f7f6 ba24 	b.w	80031e4 <_getpid>

0800cd9c <__swhatbuf_r>:
 800cd9c:	b570      	push	{r4, r5, r6, lr}
 800cd9e:	460c      	mov	r4, r1
 800cda0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda4:	2900      	cmp	r1, #0
 800cda6:	b096      	sub	sp, #88	; 0x58
 800cda8:	4615      	mov	r5, r2
 800cdaa:	461e      	mov	r6, r3
 800cdac:	da0d      	bge.n	800cdca <__swhatbuf_r+0x2e>
 800cdae:	89a3      	ldrh	r3, [r4, #12]
 800cdb0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cdb4:	f04f 0100 	mov.w	r1, #0
 800cdb8:	bf0c      	ite	eq
 800cdba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cdbe:	2340      	movne	r3, #64	; 0x40
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	6031      	str	r1, [r6, #0]
 800cdc4:	602b      	str	r3, [r5, #0]
 800cdc6:	b016      	add	sp, #88	; 0x58
 800cdc8:	bd70      	pop	{r4, r5, r6, pc}
 800cdca:	466a      	mov	r2, sp
 800cdcc:	f000 f848 	bl	800ce60 <_fstat_r>
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	dbec      	blt.n	800cdae <__swhatbuf_r+0x12>
 800cdd4:	9901      	ldr	r1, [sp, #4]
 800cdd6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cdda:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cdde:	4259      	negs	r1, r3
 800cde0:	4159      	adcs	r1, r3
 800cde2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cde6:	e7eb      	b.n	800cdc0 <__swhatbuf_r+0x24>

0800cde8 <__smakebuf_r>:
 800cde8:	898b      	ldrh	r3, [r1, #12]
 800cdea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cdec:	079d      	lsls	r5, r3, #30
 800cdee:	4606      	mov	r6, r0
 800cdf0:	460c      	mov	r4, r1
 800cdf2:	d507      	bpl.n	800ce04 <__smakebuf_r+0x1c>
 800cdf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	6123      	str	r3, [r4, #16]
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	6163      	str	r3, [r4, #20]
 800ce00:	b002      	add	sp, #8
 800ce02:	bd70      	pop	{r4, r5, r6, pc}
 800ce04:	ab01      	add	r3, sp, #4
 800ce06:	466a      	mov	r2, sp
 800ce08:	f7ff ffc8 	bl	800cd9c <__swhatbuf_r>
 800ce0c:	9900      	ldr	r1, [sp, #0]
 800ce0e:	4605      	mov	r5, r0
 800ce10:	4630      	mov	r0, r6
 800ce12:	f7ff f873 	bl	800befc <_malloc_r>
 800ce16:	b948      	cbnz	r0, 800ce2c <__smakebuf_r+0x44>
 800ce18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce1c:	059a      	lsls	r2, r3, #22
 800ce1e:	d4ef      	bmi.n	800ce00 <__smakebuf_r+0x18>
 800ce20:	f023 0303 	bic.w	r3, r3, #3
 800ce24:	f043 0302 	orr.w	r3, r3, #2
 800ce28:	81a3      	strh	r3, [r4, #12]
 800ce2a:	e7e3      	b.n	800cdf4 <__smakebuf_r+0xc>
 800ce2c:	89a3      	ldrh	r3, [r4, #12]
 800ce2e:	6020      	str	r0, [r4, #0]
 800ce30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce34:	81a3      	strh	r3, [r4, #12]
 800ce36:	9b00      	ldr	r3, [sp, #0]
 800ce38:	6163      	str	r3, [r4, #20]
 800ce3a:	9b01      	ldr	r3, [sp, #4]
 800ce3c:	6120      	str	r0, [r4, #16]
 800ce3e:	b15b      	cbz	r3, 800ce58 <__smakebuf_r+0x70>
 800ce40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce44:	4630      	mov	r0, r6
 800ce46:	f000 f81d 	bl	800ce84 <_isatty_r>
 800ce4a:	b128      	cbz	r0, 800ce58 <__smakebuf_r+0x70>
 800ce4c:	89a3      	ldrh	r3, [r4, #12]
 800ce4e:	f023 0303 	bic.w	r3, r3, #3
 800ce52:	f043 0301 	orr.w	r3, r3, #1
 800ce56:	81a3      	strh	r3, [r4, #12]
 800ce58:	89a3      	ldrh	r3, [r4, #12]
 800ce5a:	431d      	orrs	r5, r3
 800ce5c:	81a5      	strh	r5, [r4, #12]
 800ce5e:	e7cf      	b.n	800ce00 <__smakebuf_r+0x18>

0800ce60 <_fstat_r>:
 800ce60:	b538      	push	{r3, r4, r5, lr}
 800ce62:	4d07      	ldr	r5, [pc, #28]	; (800ce80 <_fstat_r+0x20>)
 800ce64:	2300      	movs	r3, #0
 800ce66:	4604      	mov	r4, r0
 800ce68:	4608      	mov	r0, r1
 800ce6a:	4611      	mov	r1, r2
 800ce6c:	602b      	str	r3, [r5, #0]
 800ce6e:	f7f6 fa20 	bl	80032b2 <_fstat>
 800ce72:	1c43      	adds	r3, r0, #1
 800ce74:	d102      	bne.n	800ce7c <_fstat_r+0x1c>
 800ce76:	682b      	ldr	r3, [r5, #0]
 800ce78:	b103      	cbz	r3, 800ce7c <_fstat_r+0x1c>
 800ce7a:	6023      	str	r3, [r4, #0]
 800ce7c:	bd38      	pop	{r3, r4, r5, pc}
 800ce7e:	bf00      	nop
 800ce80:	200007dc 	.word	0x200007dc

0800ce84 <_isatty_r>:
 800ce84:	b538      	push	{r3, r4, r5, lr}
 800ce86:	4d06      	ldr	r5, [pc, #24]	; (800cea0 <_isatty_r+0x1c>)
 800ce88:	2300      	movs	r3, #0
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	4608      	mov	r0, r1
 800ce8e:	602b      	str	r3, [r5, #0]
 800ce90:	f7f6 fa1f 	bl	80032d2 <_isatty>
 800ce94:	1c43      	adds	r3, r0, #1
 800ce96:	d102      	bne.n	800ce9e <_isatty_r+0x1a>
 800ce98:	682b      	ldr	r3, [r5, #0]
 800ce9a:	b103      	cbz	r3, 800ce9e <_isatty_r+0x1a>
 800ce9c:	6023      	str	r3, [r4, #0]
 800ce9e:	bd38      	pop	{r3, r4, r5, pc}
 800cea0:	200007dc 	.word	0x200007dc

0800cea4 <_init>:
 800cea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cea6:	bf00      	nop
 800cea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceaa:	bc08      	pop	{r3}
 800ceac:	469e      	mov	lr, r3
 800ceae:	4770      	bx	lr

0800ceb0 <_fini>:
 800ceb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb2:	bf00      	nop
 800ceb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceb6:	bc08      	pop	{r3}
 800ceb8:	469e      	mov	lr, r3
 800ceba:	4770      	bx	lr
